// glslf output by Cg compiler
// cgc version 3.1.0013, build date Apr 18 2012
// command line args: -DGL=1 -DGL21=1 -q -profile glslf
// source file: deferred_render_color_normal_depth.cg
//vendor NVIDIA Corporation
//version 3.1.0.13
//profile glslf
//program ps
//semantic WorldView
//semantic WorldViewProj
//semantic NormalMatrix
//semantic DiffuseColor
//semantic Near
//semantic Far
//var float4 DiffuseColor :  : _DiffuseColor : -1 : 1
//var float Far :  : _Far : -1 : 1
//var float3 normal : $vin.TEXCOORD0 : TEX0 : 1 : 1
//var float3 viewNormal : $vin.TEXCOORD1 : TEX1 : 2 : 1
//var float4 viewPosition : $vin.TEXCOORD2 : TEX2 : 3 : 1
//var float4 ps.color : $vout.COLOR0 : COL : -1 : 1
//var float3 ps.normal : $vout.COLOR1 : COL1 : -1 : 1
//var float4 ps.depth : $vout.COLOR2 : COL2 : -1 : 1
//var float4 ps.viewNormal : $vout.COLOR3 : COL3 : -1 : 1

#version 110

#extension GL_ARB_draw_buffers : enable

struct VOutput {
    vec3 _normal2;
    vec3 _viewNormal2;
    vec4 _viewPosition2;
};

struct POutput {
    vec4 _color;
    vec3 _normal3;
    vec4 _depth1;
    vec4 _viewNormal3;
};

uniform vec4 _DiffuseColor;
uniform float _Far;

 // main procedure, the original name was ps
void main()
{

    POutput _OUT;
    float _depth;

    _OUT._normal3 = gl_TexCoord[0].xyz*5.00000000E-001 + 5.00000000E-001;
    _OUT._viewNormal3 = vec4(gl_TexCoord[1].x, gl_TexCoord[1].y, gl_TexCoord[1].z, 1.00000000E+000);
    _depth = -gl_TexCoord[2].z/_Far;
    _OUT._depth1 = vec4(_depth, _depth, _depth, 1.00000000E+000);
    gl_FragData[3] = _OUT._viewNormal3;
    gl_FragData[1].xyz = _OUT._normal3;
    gl_FragData[2] = _OUT._depth1;
    gl_FragData[0] = _DiffuseColor;
    return;
} // main end
