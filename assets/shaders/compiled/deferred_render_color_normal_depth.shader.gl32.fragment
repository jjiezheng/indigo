// glslf output by Cg compiler
// cgc version 3.1.0013, build date Apr 24 2012
// command line args: -DGL=1 -DGL32=1 -q -profileopts version=130 -profile glslf
// source file: deferred_render_color_normal_depth.cg
//vendor NVIDIA Corporation
//version 3.1.0.13
//profile glslf
//program ps
//semantic WorldView
//semantic WorldViewProj
//semantic NormalMatrix
//semantic DiffuseColor
//semantic Near
//semantic Far
//var float4 DiffuseColor :  : _DiffuseColor : -1 : 1
//var float3 normal : $vin.TEXCOORD0 : TEXCOORD0 : 1 : 1
//var float3 viewNormal : $vin.TEXCOORD1 : TEXCOORD1 : 2 : 1
//var float4 viewPosition : $vin.TEXCOORD2 : TEXCOORD2 : 3 : 1
//var float4 ps.color : $vout.COLOR0 : COLOR0 : -1 : 1
//var float3 ps.normal : $vout.COLOR1 : COLOR1 : -1 : 1
//var float4 ps.viewPosition : $vout.COLOR2 : COLOR2 : -1 : 1
//var float3 ps.viewNormal : $vout.COLOR3 : COLOR3 : -1 : 1

#version 130

#extension GL_ARB_draw_buffers : enable

struct VOutput {
    vec3 _normal2;
    vec3 _viewNormal2;
    vec4 _viewPosition2;
};

struct POutput {
    vec4 _color;
    vec3 _normal3;
    vec4 _viewPosition3;
    vec3 _viewNormal3;
};

vec3 _packedNormal0007;
vec3 _packedNormal0009;
uniform vec4 _DiffuseColor;
in vec4 cg_TexCoord1;
in vec4 cg_TexCoord0;
in vec4 cg_TexCoord2;
out vec4 cg_FragColor;
out vec4 cg_FragData2;
out vec4 cg_FragData1;
out vec4 cg_FragData3;

 // main procedure, the original name was ps
void main()
{


    _packedNormal0007 = cg_TexCoord0.xyz*5.00000000E-01 + 5.00000000E-01;
    _packedNormal0009 = cg_TexCoord1.xyz*5.00000000E-01 + 5.00000000E-01;
    cg_FragData3.xyz = _packedNormal0009;
    cg_FragData1.xyz = _packedNormal0007;
    cg_FragData2 = cg_TexCoord2;
    cg_FragColor = _DiffuseColor;
    return;
} // main end
