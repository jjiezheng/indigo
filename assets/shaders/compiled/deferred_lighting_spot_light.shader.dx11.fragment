// ps_4_0 output by Cg compiler
// cgc version 3.1.0013, build date Apr 18 2012
// command line args: -q -profile ps_5_0
// source file: deferred_lighting_spot_light.cg
//vendor NVIDIA Corporation
//version 3.1.0.13
//profile ps_5_0
//program ps
//semantic DepthMap : TEXUNIT0
//semantic NormalMap : TEXUNIT1
//semantic ShadowMap : TEXUNIT2
//semantic ViewPosition
//semantic LightDirection
//semantic LightPosition
//semantic LightColor
//semantic LightInnerAngle
//semantic LightOuterAngle
//semantic LightDecay
//semantic View
//semantic ViewProjInv
//semantic ProjInv
//semantic LightViewProj
//semantic WorldViewProj
//semantic NormalMatrix
//var sampler2D DepthMap : TEXUNIT0 : _DepthMap 0 : -1 : 1
//var sampler2D NormalMap : TEXUNIT1 : _NormalMap 1 : -1 : 1
//var sampler2D ShadowMap : TEXUNIT2 : _ShadowMap 2 : -1 : 1
//var float4 ViewPosition :  : _ViewPosition : -1 : 1
//var float4 LightDirection :  : _LightDirection : -1 : 1
//var float4 LightPosition :  : _LightPosition : -1 : 1
//var float3 LightColor :  : _LightColor : -1 : 1
//var float LightInnerAngle :  : _LightInnerAngle : -1 : 1
//var float LightOuterAngle :  : _LightOuterAngle : -1 : 1
//var float4x4 ViewProjInv :  : _ViewProjInv[0], 4 : -1 : 1
//var float4x4 LightViewProj :  : _LightViewProj[0], 4 : -1 : 1
//var float4 screenPosition : $vin.TEXCOORD0 :  : 1 : 1
//var float4 ps : $vout.COLOR0 : COLOR0 : -1 : 1

#pragma pack_matrix(row_major)

struct VOutput {
    float4 _position1 : SV_Position;
    float4 _screenPosition1 : TEXCOORD0;
};

struct X1X {
    float4 _POSITION : SV_Position;
    float4 _TEXCOORD0 : TEXCOORD0;
};

static float _TMP18;
static float _TMP16;
static float4 _TMP11;
static float _TMP10;
static float _TMP9;
static float _TMP14;
static float _TMP13;
static float _TMP8;
static float _TMP7;
static float3 _TMP6;
static float _TMP5;
static float _TMP4;
static float _TMP3;
static float3 _TMP2;
static float3 _TMP1;
static float _TMP15;
static float _TMP17;
static float3 _TMP0;
static float3 _TMP12;
static float4 _unPackedNormal0026;
static float4 _normalData0026;
static float4 _r0030;
static float _TMP31;
static float3 _v0036;
static float3 _v0040;
static float _y0044;
static float4 _r0050;
static float _p0052;
static float _p_max0052;
static float _m_d0052;
static float _variance0052;
static float _Ex_20052;
static float _TMP55;
static float _x0058;
Texture2D<float4> _TMP59 : register(t1);
Texture2D<float4> _TMP60 : register(t0);
Texture2D<float4> _TMP61 : register(t2);
SamplerState _DepthMap : TEXUNIT0;
SamplerState _NormalMap : TEXUNIT1;
SamplerState _ShadowMap : TEXUNIT2;
uniform float4 _ViewPosition;
uniform float4 _LightDirection;
uniform float4 _LightPosition;
uniform float3 _LightColor;
uniform float _LightInnerAngle;
uniform float _LightOuterAngle;
uniform float4x4 _ViewProjInv;
uniform float4x4 _LightViewProj;

 // main procedure, the original name was ps
float4 main( in X1X cin) : SV_Target0
{

    float4 _screenPosition;
    float4 _screenPositionHom;
    float3 _normal;
    float _diffusePower;
    float4 _depthSpec;
    float4 _positionScreen;
    float4 _positionWorld;
    float _distance;
    float3 _directionToLight;
    float _lightDirectionDot;
    float _diffuseStrength;
    float3 _lightVector;
    float _lightOuterCos;
    float _lightInnerCos;
    float3 _diffuseContribution;
    float _specularContribution;
    float4 _viewDirectionRaw1;
    float3 _viewDirection1;
    float3 _halfVectorRaw1;
    float _i1;
    float3 _pixelPositionFromLight;
    float2 _shadowCoord;
    float _shadowLightContribution;

    _screenPosition = cin._TEXCOORD0;
    _screenPositionHom = _screenPosition/_screenPosition.w;
    _TMP12 = float3(_screenPositionHom.x, -_screenPositionHom.y, _screenPositionHom.z);
    _TMP0 =  5.00000000000000000E-001f*(_TMP12 + float3(  1.00000000000000000E000f,  1.00000000000000000E000f,  0.00000000000000000E000f));
    _normalData0026 = _TMP59.Sample(_NormalMap, _TMP0.xy);
    _unPackedNormal0026 = _normalData0026* 2.00000000000000000E000f -  1.00000000000000000E000f;
    _TMP13 = dot(_unPackedNormal0026.xyz, _unPackedNormal0026.xyz);
    _TMP14 = rsqrt(_TMP13);
    _normal = _TMP14*_unPackedNormal0026.xyz;
    _diffusePower = _unPackedNormal0026.w* 2.55000000000000000E002f;
    _depthSpec = _TMP60.Sample(_DepthMap, _TMP0.xy);
    if (_depthSpec.x ==  1.00000000000000000E000f) { // if begin
        return float4(  0.00000000000000000E000f,  0.00000000000000000E000f,  0.00000000000000000E000f,  0.00000000000000000E000f);
    } // end if
    _positionScreen = float4(_screenPositionHom.x, _screenPositionHom.y, _depthSpec.x,  1.00000000000000000E000f);
    _r0030.x = dot(_ViewProjInv._11_12_13_14, _positionScreen);
    _r0030.y = dot(_ViewProjInv._21_22_23_24, _positionScreen);
    _r0030.z = dot(_ViewProjInv._31_32_33_34, _positionScreen);
    _r0030.w = dot(_ViewProjInv._41_42_43_44, _positionScreen);
    _positionWorld = _r0030/_r0030.w;
    _TMP15 = dot(_LightDirection, _LightDirection);
    _TMP17 = rsqrt(_TMP15);
    _TMP31 =  1.00000000000000000E000f/_TMP17;
    _distance = _TMP31*_TMP31;
    _v0036 = _LightPosition.xyz - _positionWorld.xyz;
    _TMP13 = dot(_v0036, _v0036);
    _TMP14 = rsqrt(_TMP13);
    _directionToLight = _TMP14*_v0036;
    _TMP13 = dot(_LightDirection.xyz, _LightDirection.xyz);
    _TMP14 = rsqrt(_TMP13);
    _TMP1 = _TMP14*_LightDirection.xyz;
    _lightDirectionDot = dot(_TMP1, -_directionToLight);
    _diffuseStrength =  0.00000000000000000E000f;
    _v0040 = -_LightDirection.xyz;
    _TMP13 = dot(_v0040, _v0040);
    _TMP14 = rsqrt(_TMP13);
    _lightVector = _TMP14*_v0040;
    _lightOuterCos = cos(_LightOuterAngle);
    _lightInnerCos = cos(_LightInnerAngle);
    if (_lightDirectionDot > _lightOuterCos) { // if begin
        _TMP13 = dot(_lightVector, _lightVector);
        _TMP14 = rsqrt(_TMP13);
        _TMP2 = _TMP14*_lightVector;
        _TMP3 = dot(_normal, _TMP2);
        _TMP4 = saturate(_TMP3);
        _diffuseStrength = max( 0.00000000000000000E000f, _TMP4);
        _y0044 = saturate((_lightDirectionDot - _lightOuterCos)/(_lightInnerCos - _lightOuterCos));
        _TMP5 = _y0044*_y0044*( 3.00000000000000000E000f -  2.00000000000000000E000f*_y0044);
        _diffuseStrength = _diffuseStrength*_TMP5;
    } // end if
    if (_lightDirectionDot > _lightInnerCos) { // if begin
        _TMP13 = dot(_lightVector, _lightVector);
        _TMP14 = rsqrt(_TMP13);
        _TMP6 = _TMP14*_lightVector;
        _TMP7 = dot(_normal, _TMP6);
        _TMP8 = saturate(_TMP7);
        _diffuseStrength = max( 0.00000000000000000E000f, _TMP8);
    } // end if
    _diffuseContribution = (_LightColor*_diffusePower*_diffuseStrength)/_distance;
    _specularContribution =  0.00000000000000000E000f;
    if (_diffuseStrength >  0.00000000000000000E000f) { // if begin
        _viewDirectionRaw1 = _ViewPosition - _positionWorld;
        _TMP13 = dot(_viewDirectionRaw1.xyz, _viewDirectionRaw1.xyz);
        _TMP14 = rsqrt(_TMP13);
        _viewDirection1 = _TMP14*_viewDirectionRaw1.xyz;
        _halfVectorRaw1 = _lightVector + _viewDirection1;
        _TMP9 = dot(_normal, _halfVectorRaw1);
        _TMP10 = saturate(_TMP9);
        _i1 = pow(_TMP10, _depthSpec.z);
        _specularContribution = (_i1*_depthSpec.w)/_distance;
    } // end if
    _r0050.x = dot(_LightViewProj._11_12_13_14, _positionWorld);
    _r0050.y = dot(_LightViewProj._21_22_23_24, _positionWorld);
    _r0050.z = dot(_LightViewProj._31_32_33_34, _positionWorld);
    _r0050.w = dot(_LightViewProj._41_42_43_44, _positionWorld);
    _pixelPositionFromLight = _r0050.xyz/_r0050.w;
    _shadowCoord = _pixelPositionFromLight.xy* 5.00000000000000000E-001f +  5.00000000000000000E-001f;
    _shadowCoord.y =  1.00000000000000000E000f - _shadowCoord.y;
    _TMP11 = _TMP61.Sample(_ShadowMap, _shadowCoord);
    _shadowLightContribution =  1.00000000000000000E000f;
    if (_TMP11.x < _pixelPositionFromLight.z && _shadowCoord.x >  0.00000000000000000E000f && _shadowCoord.x <  1.00000000000000000E000f) { // if begin
        _Ex_20052 = _TMP11.x*_TMP11.x;
        _TMP16 = max(_TMP11.y - _Ex_20052,  0.00000000000000000E000f);
        _variance0052 = min(_TMP16 +  4.99999998737621350E-007f,  1.00000000000000000E000f);
        _m_d0052 = _pixelPositionFromLight.z - _TMP11.x;
        _p_max0052 = _variance0052/(_variance0052 + _m_d0052*_m_d0052);
        _p0052 = (float) (_pixelPositionFromLight.z <= _TMP11.x);
        _shadowLightContribution = max(_p0052, _p_max0052);
        _x0058 = (_shadowLightContribution -  8.99999976158142090E-001f)/ 1.00000023841857910E-001f;
        _TMP18 = min( 1.00000000000000000E000f, _x0058);
        _TMP55 = max( 0.00000000000000000E000f, _TMP18);
        _shadowLightContribution = _TMP55;
    } // end if
    _diffuseContribution = _diffuseContribution*_shadowLightContribution;
    return float4(_diffuseContribution.x, _diffuseContribution.y, _diffuseContribution.z, _specularContribution);
} // main end
