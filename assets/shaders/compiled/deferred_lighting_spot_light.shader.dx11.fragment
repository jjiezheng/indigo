// ps_4_0 output by Cg compiler
// cgc version 3.1.0013, build date Apr 18 2012
// command line args: -DDX11=1 -q -unroll all -profile ps_5_0
// source file: deferred_lighting_spot_light.cg
//vendor NVIDIA Corporation
//version 3.1.0.13
//profile ps_5_0
//program ps
//semantic DepthMap : TEXUNIT0
//semantic NormalMap : TEXUNIT1
//semantic ShadowMap : TEXUNIT2
//semantic LightInnerAngle
//semantic LightOuterAngle
//semantic LightDecay
//semantic LightDistance
//semantic ShadowMapSize
//semantic LightDirection
//semantic LightPosition
//semantic LightColor
//semantic DirectionToLight
//semantic ViewerPosition
//semantic ViewProjInv
//semantic LightViewProj
//semantic LightViewProjInv
//semantic WorldViewProj
//semantic NormalMatrix
//var sampler2D DepthMap : TEXUNIT0 : _DepthMap 0 : -1 : 1
//var sampler2D NormalMap : TEXUNIT1 :  1 : -1 : 1
//var float LightInnerAngle :  : _LightInnerAngle : -1 : 1
//var float LightOuterAngle :  : _LightOuterAngle : -1 : 1
//var float3 LightDirection :  : _LightDirection : -1 : 1
//var float3 LightPosition :  : _LightPosition : -1 : 1
//var float3 DirectionToLight :  :  : -1 : 1
//var float4x4 ViewProjInv :  : _ViewProjInv[0], 4 : -1 : 1
//var float3 screenPosition : $vin.TEXCOORD0 :  : 1 : 1
//var float4 ps : $vout.COLOR0 : COLOR0 : -1 : 1

#pragma pack_matrix(row_major)

struct VOutput {
    float4 _position1 : SV_Position;
    float3 _screenPosition1 : TEXCOORD0;
};

struct X1X {
    float4 _POSITION : SV_Position;
    float3 _TEXCOORD0 : TEXCOORD0;
};

static float _TMP8;
static float _TMP7;
static float4 _TMP6;
static float2 _TMP5;
static float4 _r0024;
static float3 _v0026;
Texture2D<float4> _TMP33 : register(t0);
SamplerState _DepthMap : TEXUNIT0;
uniform float _LightInnerAngle;
uniform float _LightOuterAngle;
uniform float3 _LightDirection;
uniform float3 _LightPosition;
uniform float4x4 _ViewProjInv;

 // main procedure, the original name was ps
float4 main( in X1X cin) : SV_Target0
{

    float3 _screenPosition;
    float2 _screenPositionClip;
    float2 _texCoord2;
    float4 _positionScreen;
    float3 _positionWorld;
    float3 _pixelToLight;
    float _lightDirectionDot;
    float _lightOuterCos;
    float _lightInnerCos;

    _screenPosition = cin._TEXCOORD0;
    _screenPositionClip = _screenPosition.xy/_screenPosition.z;
    _TMP5 = float2(_screenPositionClip.x, -_screenPositionClip.y);
    _texCoord2 =  5.00000000000000000E-001f*(_TMP5 + float2(  1.00000000000000000E000f,  1.00000000000000000E000f));
    _TMP6 = _TMP33.Sample(_DepthMap, _texCoord2);
    _positionScreen = float4(_screenPositionClip.x, _screenPositionClip.y, _TMP6.x,  1.00000000000000000E000f);
    _r0024.x = dot(_ViewProjInv._11_12_13_14, _positionScreen);
    _r0024.y = dot(_ViewProjInv._21_22_23_24, _positionScreen);
    _r0024.z = dot(_ViewProjInv._31_32_33_34, _positionScreen);
    _r0024.w = dot(_ViewProjInv._41_42_43_44, _positionScreen);
    _positionWorld = _r0024.xyz/_r0024.w;
    _v0026 = _positionWorld - _LightPosition;
    _TMP7 = dot(_v0026, _v0026);
    _TMP8 = rsqrt(_TMP7);
    _pixelToLight = _TMP8*_v0026;
    _lightDirectionDot = dot(_LightDirection, _pixelToLight);
    _lightOuterCos = cos(_LightOuterAngle);
    _lightInnerCos = cos(_LightInnerAngle);
    if (_lightDirectionDot > _lightOuterCos) { // if begin
    } // end if
    if (_lightDirectionDot > _lightInnerCos) { // if begin
    } // end if
    return float4(_TMP6.x, _TMP6.x, _TMP6.x,  1.00000000000000000E000f);
} // main end
