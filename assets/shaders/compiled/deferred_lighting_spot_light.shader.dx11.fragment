// ps_4_0 output by Cg compiler
// cgc version 3.1.0013, build date Apr 18 2012
// command line args: -DDX11=1 -q -unroll all -profile ps_5_0
// source file: deferred_lighting_spot_light.cg
//vendor NVIDIA Corporation
//version 3.1.0.13
//profile ps_5_0
//program ps
//semantic DepthMap : TEXUNIT0
//semantic NormalMap : TEXUNIT1
//semantic ShadowMap : TEXUNIT2
//semantic LightInnerAngle
//semantic LightOuterAngle
//semantic LightDecay
//semantic LightDistance
//semantic ShadowMapSize
//semantic LightDirection
//semantic LightPosition
//semantic LightColor
//semantic DirectionToLight
//semantic ViewerPosition
//semantic ViewProjInv
//semantic LightViewProj
//semantic LightViewProjInv
//semantic WorldViewProj
//semantic NormalMatrix
//var sampler2D DepthMap : TEXUNIT0 : _DepthMap 0 : -1 : 1
//var sampler2D NormalMap : TEXUNIT1 : _NormalMap 1 : -1 : 1
//var sampler2D ShadowMap : TEXUNIT2 : _ShadowMap 2 : -1 : 1
//var half LightInnerAngle :  : _LightInnerAngle : -1 : 1
//var half LightOuterAngle :  : _LightOuterAngle : -1 : 1
//var half LightDistance :  : _LightDistance : -1 : 1
//var half2 ShadowMapSize :  : _ShadowMapSize : -1 : 1
//var half3 LightDirection :  : _LightDirection : -1 : 1
//var half3 LightPosition :  : _LightPosition : -1 : 1
//var half3 LightColor :  : _LightColor : -1 : 1
//var half3 DirectionToLight :  : _DirectionToLight : -1 : 1
//var half3 ViewerPosition :  : _ViewerPosition : -1 : 1
//var half4x4 ViewProjInv :  : _ViewProjInv[0], 4 : -1 : 1
//var half4x4 LightViewProj :  : _LightViewProj[0], 4 : -1 : 1
//var float3 screenPosition : $vin.TEXCOORD0 :  : 1 : 1
//var float4 ps : $vout.COLOR0 : COLOR0 : -1 : 1

#pragma pack_matrix(row_major)

struct VOutput {
    float4 _position1 : SV_Position;
    float3 _screenPosition1 : TEXCOORD0;
};

struct X1X {
    float4 _POSITION : SV_Position;
    float3 _TEXCOORD0 : TEXCOORD0;
};

static float4 _TMP13;
static float _TMP7;
static float _TMP6;
static float _TMP12;
static float _TMP11;
static float _TMP5;
static float _TMP4;
static float _TMP3;
static float4 _TMP10;
static float2 _TMP0;
static float2 _TMP9;
static float2 _vec0018;
static float2 _texCoord0022;
static float4 _unPackedNormal0024;
static float4 _normalData0024;
static float2 _texCoord0024;
static float4 _r0028;
static float3 _v0030;
static float _y0032;
static float4 _r0036;
static float4 _v0036;
static float2 _shadowCoordOffset10038;
static float _sum0038;
static float _shadowFactor0038;
static float2 _shadowCoord0038;
static float2 _shadowMapSize0038;
static float _zToCompare0038;
static float4 _t0040;
Texture2D<float4> _TMP41 : register(t0);
Texture2D<float4> _TMP42 : register(t1);
Texture2D<float4> _TMP43 : register(t2);
SamplerState _DepthMap : TEXUNIT0;
SamplerState _NormalMap : TEXUNIT1;
SamplerComparisonState _ShadowMap : TEXUNIT2;
uniform float _LightInnerAngle;
uniform float _LightOuterAngle;
uniform float _LightDistance;
uniform float2 _ShadowMapSize;
uniform float3 _LightDirection;
uniform float3 _LightPosition;
uniform float3 _LightColor;
uniform float3 _DirectionToLight;
uniform float3 _ViewerPosition;
uniform float4x4 _ViewProjInv;
uniform float4x4 _LightViewProj;

 // main procedure, the original name was ps
float4 main( in X1X cin) : SV_Target0
{

    float3 _screenPosition;
    float2 _screenPositionClip;
    float2 _texCoord2;
    float _depth;
    float3 _normalData1;
    float3 _normal;
    float4 _positionScreen;
    float3 _positionWorld;
    float4 _lightContribution;
    float3 _pixelToLight;
    float _lightDirectionDot;
    float _diffuseStrength;
    float _lightOuterCos;
    float _lightInnerCos;
    float3 _viewerDirectionUnNormalized1;
    float3 _viewDirection1;
    float3 _halfVectorRaw1;
    float3 _pixelPositionFromLight;
    float2 _shadowCoord1;
    float _shadowFactor1;

    _screenPosition = (float3) cin._TEXCOORD0;
    _screenPositionClip = _screenPosition.xy/_screenPosition.z;
    _vec0018 = (float2) _screenPositionClip;
    _TMP9 = float2(_vec0018.x, -_vec0018.y);
    _TMP0 =  5.00000000000000000E-001f*(_TMP9 + float2(  1.00000000000000000E000f,  1.00000000000000000E000f));
    _texCoord2 = (float2) _TMP0;
    _texCoord0022 = (float2) _texCoord2;
    _TMP10 = _TMP41.Sample(_DepthMap, _texCoord0022);
    _depth = (float) _TMP10.x;
    _texCoord0024 = (float2) _texCoord2;
    _normalData0024 = _TMP42.Sample(_NormalMap, _texCoord0024);
    _unPackedNormal0024 = _normalData0024* 2.00000000000000000E000f -  1.00000000000000000E000f;
    _normalData1 = (float3) _unPackedNormal0024.xyz;
    _TMP11 = dot(_normalData1, _normalData1);
    _TMP12 = rsqrt(_TMP11);
    _normal = _TMP12*_normalData1;
    _positionScreen = float4(_screenPositionClip.x, _screenPositionClip.y, _depth,  1.00000000000000000E000h);
    _r0028.x = dot(_ViewProjInv._11_12_13_14, _positionScreen);
    _r0028.y = dot(_ViewProjInv._21_22_23_24, _positionScreen);
    _r0028.z = dot(_ViewProjInv._31_32_33_34, _positionScreen);
    _r0028.w = dot(_ViewProjInv._41_42_43_44, _positionScreen);
    _positionWorld = _r0028.xyz/_r0028.w;
    _lightContribution = float4(  0.00000000000000000E000h,  0.00000000000000000E000h,  0.00000000000000000E000h,  0.00000000000000000E000h);
    _v0030 = _positionWorld - _LightPosition;
    _TMP11 = dot(_v0030, _v0030);
    _TMP12 = rsqrt(_TMP11);
    _pixelToLight = _TMP12*_v0030;
    _lightDirectionDot = dot(_LightDirection, _pixelToLight);
    _diffuseStrength =  0.00000000000000000E000h;
    _lightOuterCos = cos(_LightOuterAngle);
    _lightInnerCos = cos(_LightInnerAngle);
    if (_lightDirectionDot > _lightOuterCos) { // if begin
        _TMP3 = dot(_normal, _DirectionToLight);
        _diffuseStrength = saturate(_TMP3);
        _y0032 = saturate((_lightDirectionDot - _lightOuterCos)/(_lightInnerCos - _lightOuterCos));
        _TMP4 = _y0032*_y0032*( 3.00000000000000000E000h -  2.00000000000000000E000h*_y0032);
        _diffuseStrength = _diffuseStrength*_TMP4;
    } // end if
    if (_lightDirectionDot > _lightInnerCos) { // if begin
        _TMP5 = dot(_normal, _DirectionToLight);
        _diffuseStrength = saturate(_TMP5);
    } // end if
    _lightContribution.xyz = _LightColor*_diffuseStrength* 2.55078125000000000E000h*_LightDistance;
    if (_diffuseStrength >  0.00000000000000000E000h) { // if begin
        _viewerDirectionUnNormalized1 = _ViewerPosition - _positionWorld;
        _TMP11 = dot(_viewerDirectionUnNormalized1, _viewerDirectionUnNormalized1);
        _TMP12 = rsqrt(_TMP11);
        _viewDirection1 = _TMP12*_viewerDirectionUnNormalized1;
        _halfVectorRaw1 = _DirectionToLight + _viewDirection1;
        _TMP6 = dot(_normal, _halfVectorRaw1);
        _TMP7 = saturate(_TMP6);
        _lightContribution.w = _TMP7*_LightDistance;
    } // end if
    _v0036 = (float4) float4((float) _positionWorld.x, (float) _positionWorld.y, (float) _positionWorld.z,  1.00000000000000000E000f);
    _r0036.x = dot(_LightViewProj._11_12_13_14, _v0036);
    _r0036.y = dot(_LightViewProj._21_22_23_24, _v0036);
    _r0036.z = dot(_LightViewProj._31_32_33_34, _v0036);
    _r0036.w = dot(_LightViewProj._41_42_43_44, _v0036);
    _pixelPositionFromLight = _r0036.xyz/_r0036.w;
    _shadowCoord1 = (float2) ( 5.00000000000000000E-001f + (float2) _pixelPositionFromLight.xy* 5.00000000000000000E-001f);
    _shadowCoord1.y = (float) ( 1.00000000000000000E000f - (float) _shadowCoord1.y);
    _shadowCoord0038 = (float2) _shadowCoord1;
    _zToCompare0038 = (float) _pixelPositionFromLight.z;
    _shadowMapSize0038 = (float2) _ShadowMapSize;
    _shadowCoordOffset10038 = _shadowCoord0038 + float2(-1.50000000000000000E000f*_shadowMapSize0038.x, -1.50000000000000000E000f*_shadowMapSize0038.y);
    _t0040 = float4(_shadowCoordOffset10038.x, _shadowCoordOffset10038.y, _zToCompare0038 -  4.99999987368937580E-005f,  1.00000000000000000E000f);
    _TMP13 = _TMP43.SampleCmp(_ShadowMap, (_t0040.xyz/_t0040.w).xy, (_t0040.xyz/_t0040.w).z);
    _sum0038 = _TMP13.x;
    _shadowCoordOffset10038 = _shadowCoord0038 + float2(-5.00000000000000000E-001f*_shadowMapSize0038.x, -1.50000000000000000E000f*_shadowMapSize0038.y);
    _t0040 = float4(_shadowCoordOffset10038.x, _shadowCoordOffset10038.y, _zToCompare0038 -  4.99999987368937580E-005f,  1.00000000000000000E000f);
    _TMP13 = _TMP43.SampleCmp(_ShadowMap, (_t0040.xyz/_t0040.w).xy, (_t0040.xyz/_t0040.w).z);
    _sum0038 = _sum0038 + _TMP13.x;
    _shadowCoordOffset10038 = _shadowCoord0038 + float2( 5.00000000000000000E-001f*_shadowMapSize0038.x, -1.50000000000000000E000f*_shadowMapSize0038.y);
    _t0040 = float4(_shadowCoordOffset10038.x, _shadowCoordOffset10038.y, _zToCompare0038 -  4.99999987368937580E-005f,  1.00000000000000000E000f);
    _TMP13 = _TMP43.SampleCmp(_ShadowMap, (_t0040.xyz/_t0040.w).xy, (_t0040.xyz/_t0040.w).z);
    _sum0038 = _sum0038 + _TMP13.x;
    _shadowCoordOffset10038 = _shadowCoord0038 + float2( 1.50000000000000000E000f*_shadowMapSize0038.x, -1.50000000000000000E000f*_shadowMapSize0038.y);
    _t0040 = float4(_shadowCoordOffset10038.x, _shadowCoordOffset10038.y, _zToCompare0038 -  4.99999987368937580E-005f,  1.00000000000000000E000f);
    _TMP13 = _TMP43.SampleCmp(_ShadowMap, (_t0040.xyz/_t0040.w).xy, (_t0040.xyz/_t0040.w).z);
    _sum0038 = _sum0038 + _TMP13.x;
    _shadowCoordOffset10038 = _shadowCoord0038 + float2(-1.50000000000000000E000f*_shadowMapSize0038.x, -5.00000000000000000E-001f*_shadowMapSize0038.y);
    _t0040 = float4(_shadowCoordOffset10038.x, _shadowCoordOffset10038.y, _zToCompare0038 -  4.99999987368937580E-005f,  1.00000000000000000E000f);
    _TMP13 = _TMP43.SampleCmp(_ShadowMap, (_t0040.xyz/_t0040.w).xy, (_t0040.xyz/_t0040.w).z);
    _sum0038 = _sum0038 + _TMP13.x;
    _shadowCoordOffset10038 = _shadowCoord0038 + float2(-5.00000000000000000E-001f*_shadowMapSize0038.x, -5.00000000000000000E-001f*_shadowMapSize0038.y);
    _t0040 = float4(_shadowCoordOffset10038.x, _shadowCoordOffset10038.y, _zToCompare0038 -  4.99999987368937580E-005f,  1.00000000000000000E000f);
    _TMP13 = _TMP43.SampleCmp(_ShadowMap, (_t0040.xyz/_t0040.w).xy, (_t0040.xyz/_t0040.w).z);
    _sum0038 = _sum0038 + _TMP13.x;
    _shadowCoordOffset10038 = _shadowCoord0038 + float2( 5.00000000000000000E-001f*_shadowMapSize0038.x, -5.00000000000000000E-001f*_shadowMapSize0038.y);
    _t0040 = float4(_shadowCoordOffset10038.x, _shadowCoordOffset10038.y, _zToCompare0038 -  4.99999987368937580E-005f,  1.00000000000000000E000f);
    _TMP13 = _TMP43.SampleCmp(_ShadowMap, (_t0040.xyz/_t0040.w).xy, (_t0040.xyz/_t0040.w).z);
    _sum0038 = _sum0038 + _TMP13.x;
    _shadowCoordOffset10038 = _shadowCoord0038 + float2( 1.50000000000000000E000f*_shadowMapSize0038.x, -5.00000000000000000E-001f*_shadowMapSize0038.y);
    _t0040 = float4(_shadowCoordOffset10038.x, _shadowCoordOffset10038.y, _zToCompare0038 -  4.99999987368937580E-005f,  1.00000000000000000E000f);
    _TMP13 = _TMP43.SampleCmp(_ShadowMap, (_t0040.xyz/_t0040.w).xy, (_t0040.xyz/_t0040.w).z);
    _sum0038 = _sum0038 + _TMP13.x;
    _shadowCoordOffset10038 = _shadowCoord0038 + float2(-1.50000000000000000E000f*_shadowMapSize0038.x,  5.00000000000000000E-001f*_shadowMapSize0038.y);
    _t0040 = float4(_shadowCoordOffset10038.x, _shadowCoordOffset10038.y, _zToCompare0038 -  4.99999987368937580E-005f,  1.00000000000000000E000f);
    _TMP13 = _TMP43.SampleCmp(_ShadowMap, (_t0040.xyz/_t0040.w).xy, (_t0040.xyz/_t0040.w).z);
    _sum0038 = _sum0038 + _TMP13.x;
    _shadowCoordOffset10038 = _shadowCoord0038 + float2(-5.00000000000000000E-001f*_shadowMapSize0038.x,  5.00000000000000000E-001f*_shadowMapSize0038.y);
    _t0040 = float4(_shadowCoordOffset10038.x, _shadowCoordOffset10038.y, _zToCompare0038 -  4.99999987368937580E-005f,  1.00000000000000000E000f);
    _TMP13 = _TMP43.SampleCmp(_ShadowMap, (_t0040.xyz/_t0040.w).xy, (_t0040.xyz/_t0040.w).z);
    _sum0038 = _sum0038 + _TMP13.x;
    _shadowCoordOffset10038 = _shadowCoord0038 + float2( 5.00000000000000000E-001f*_shadowMapSize0038.x,  5.00000000000000000E-001f*_shadowMapSize0038.y);
    _t0040 = float4(_shadowCoordOffset10038.x, _shadowCoordOffset10038.y, _zToCompare0038 -  4.99999987368937580E-005f,  1.00000000000000000E000f);
    _TMP13 = _TMP43.SampleCmp(_ShadowMap, (_t0040.xyz/_t0040.w).xy, (_t0040.xyz/_t0040.w).z);
    _sum0038 = _sum0038 + _TMP13.x;
    _shadowCoordOffset10038 = _shadowCoord0038 + float2( 1.50000000000000000E000f*_shadowMapSize0038.x,  5.00000000000000000E-001f*_shadowMapSize0038.y);
    _t0040 = float4(_shadowCoordOffset10038.x, _shadowCoordOffset10038.y, _zToCompare0038 -  4.99999987368937580E-005f,  1.00000000000000000E000f);
    _TMP13 = _TMP43.SampleCmp(_ShadowMap, (_t0040.xyz/_t0040.w).xy, (_t0040.xyz/_t0040.w).z);
    _sum0038 = _sum0038 + _TMP13.x;
    _shadowCoordOffset10038 = _shadowCoord0038 + float2(-1.50000000000000000E000f*_shadowMapSize0038.x,  1.50000000000000000E000f*_shadowMapSize0038.y);
    _t0040 = float4(_shadowCoordOffset10038.x, _shadowCoordOffset10038.y, _zToCompare0038 -  4.99999987368937580E-005f,  1.00000000000000000E000f);
    _TMP13 = _TMP43.SampleCmp(_ShadowMap, (_t0040.xyz/_t0040.w).xy, (_t0040.xyz/_t0040.w).z);
    _sum0038 = _sum0038 + _TMP13.x;
    _shadowCoordOffset10038 = _shadowCoord0038 + float2(-5.00000000000000000E-001f*_shadowMapSize0038.x,  1.50000000000000000E000f*_shadowMapSize0038.y);
    _t0040 = float4(_shadowCoordOffset10038.x, _shadowCoordOffset10038.y, _zToCompare0038 -  4.99999987368937580E-005f,  1.00000000000000000E000f);
    _TMP13 = _TMP43.SampleCmp(_ShadowMap, (_t0040.xyz/_t0040.w).xy, (_t0040.xyz/_t0040.w).z);
    _sum0038 = _sum0038 + _TMP13.x;
    _shadowCoordOffset10038 = _shadowCoord0038 + float2( 5.00000000000000000E-001f*_shadowMapSize0038.x,  1.50000000000000000E000f*_shadowMapSize0038.y);
    _t0040 = float4(_shadowCoordOffset10038.x, _shadowCoordOffset10038.y, _zToCompare0038 -  4.99999987368937580E-005f,  1.00000000000000000E000f);
    _TMP13 = _TMP43.SampleCmp(_ShadowMap, (_t0040.xyz/_t0040.w).xy, (_t0040.xyz/_t0040.w).z);
    _sum0038 = _sum0038 + _TMP13.x;
    _shadowCoordOffset10038 = _shadowCoord0038 + float2( 1.50000000000000000E000f*_shadowMapSize0038.x,  1.50000000000000000E000f*_shadowMapSize0038.y);
    _t0040 = float4(_shadowCoordOffset10038.x, _shadowCoordOffset10038.y, _zToCompare0038 -  4.99999987368937580E-005f,  1.00000000000000000E000f);
    _TMP13 = _TMP43.SampleCmp(_ShadowMap, (_t0040.xyz/_t0040.w).xy, (_t0040.xyz/_t0040.w).z);
    _sum0038 = _sum0038 + _TMP13.x;
    _shadowFactor0038 = _sum0038/ 1.60000000000000000E001f;
    _shadowFactor1 = (float) _shadowFactor0038;
    _lightContribution = _lightContribution*_shadowFactor1;
    return _lightContribution;
} // main end
