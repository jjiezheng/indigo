// ps_4_0 output by Cg compiler
// cgc version 3.1.0013, build date Apr 18 2012
// command line args: -q -profile ps_5_0
// source file: deferred_lighting_spot_light.cg
//vendor NVIDIA Corporation
//version 3.1.0.13
//profile ps_5_0
//program ps
//semantic DepthMap : TEXUNIT0
//semantic NormalMap : TEXUNIT1
//semantic ShadowMap : TEXUNIT2
//semantic ViewPosition
//semantic LightDirection
//semantic LightPosition
//semantic LightColor
//semantic LightInnerAngle
//semantic LightOuterAngle
//semantic LightDecay
//semantic View
//semantic ViewProjInv
//semantic ProjInv
//semantic LightViewProj
//semantic WorldViewProj
//semantic NormalMatrix
//var sampler2D DepthMap : TEXUNIT0 : _DepthMap 0 : -1 : 1
//var float4 screenPosition : $vin.TEXCOORD0 :  : 1 : 1
//var float4 ps : $vout.COLOR0 : COLOR0 : -1 : 1

#pragma pack_matrix(row_major)

struct VOutput {
    float4 _position1 : SV_Position;
    float4 _screenPosition1 : TEXCOORD0;
};

struct X1X {
    float4 _POSITION : SV_Position;
    float4 _TEXCOORD0 : TEXCOORD0;
};

static float4 _TMP4;
static float3 _TMP0;
static float3 _TMP1;
Texture2D<float4> _TMP22 : register(t0);
SamplerState _DepthMap : TEXUNIT0;

 // main procedure, the original name was ps
float4 main( in X1X cin) : SV_Target0
{

    float4 _screenPosition;
    float4 _screenPositionHom;

    _screenPosition = cin._TEXCOORD0;
    _screenPositionHom = _screenPosition/_screenPosition.w;
    _TMP1 = float3(_screenPositionHom.x, -_screenPositionHom.y, _screenPositionHom.z);
    _TMP0 =  5.00000000000000000E-001f*(_TMP1 + float3(  1.00000000000000000E000f,  1.00000000000000000E000f,  0.00000000000000000E000f));
    _TMP4 = _TMP22.Sample(_DepthMap, _TMP0.xy);
    return float4(_TMP4.x, _TMP4.x, _TMP4.x,  1.00000000000000000E000f);
} // main end
