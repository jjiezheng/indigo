// ps_4_0 output by Cg compiler
// cgc version 3.1.0013, build date Apr 18 2012
// command line args: -q -unroll all -profile ps_5_0
// source file: deferred_lighting_spot_light.cg
//vendor NVIDIA Corporation
//version 3.1.0.13
//profile ps_5_0
//program ps
//semantic DepthMap : TEXUNIT0
//semantic NormalMap : TEXUNIT1
//semantic ShadowMap : TEXUNIT2
//semantic DepthMap2 : TEXUNIT3
//semantic LightInnerAngle
//semantic LightOuterAngle
//semantic LightDecay
//semantic ViewPosition
//semantic LightDirection
//semantic LightPosition
//semantic LightColor
//semantic ViewProjInv
//semantic LightViewProj
//semantic WorldViewProj
//semantic NormalMatrix
//semantic ShadowsEnabled
//var sampler2D DepthMap : TEXUNIT0 : _DepthMap 0 : -1 : 1
//var sampler2D NormalMap : TEXUNIT1 : _NormalMap 1 : -1 : 1
//var sampler2D ShadowMap : TEXUNIT2 : _ShadowMap 2 : -1 : 1
//var float LightInnerAngle :  : _LightInnerAngle : -1 : 1
//var float LightOuterAngle :  : _LightOuterAngle : -1 : 1
//var float4 LightDirection :  : _LightDirection : -1 : 1
//var float4 LightPosition :  : _LightPosition : -1 : 1
//var float3 LightColor :  : _LightColor : -1 : 1
//var float4x4 ViewProjInv :  : _ViewProjInv[0], 4 : -1 : 1
//var float4x4 LightViewProj :  : _LightViewProj[0], 4 : -1 : 1
//var int ShadowsEnabled :  : _ShadowsEnabled : -1 : 1
//var float4 screenPosition : $vin.TEXCOORD0 :  : 1 : 1
//var float4 ps : $vout.COLOR0 : COLOR0 : -1 : 1

#pragma pack_matrix(row_major)

struct VOutput {
    float4 _position1 : SV_Position;
    float4 _screenPosition1 : TEXCOORD0;
};

struct X1X {
    float4 _POSITION : SV_Position;
    float4 _TEXCOORD0 : TEXCOORD0;
};

static float4 _TMP12;
static float _TMP14;
static float _TMP13;
static float _TMP8;
static float _TMP7;
static float3 _TMP6;
static float _TMP5;
static float _TMP4;
static float _TMP3;
static float3 _TMP2;
static float3 _TMP1;
static float _TMP15;
static float _TMP16;
static float3 _TMP0;
static float3 _TMP11;
static float4 _unPackedNormal0026;
static float4 _normalData0026;
static float4 _r0030;
static float _TMP31;
static float3 _v0036;
static float3 _v0040;
static float _y0044;
static float4 _r0050;
Texture2D<float4> _TMP53 : register(t0);
Texture2D<float4> _TMP54 : register(t1);
Texture2D<float4> _TMP55 : register(t2);
SamplerState _DepthMap : TEXUNIT0;
SamplerState _NormalMap : TEXUNIT1;
SamplerState _ShadowMap : TEXUNIT2;
uniform float _LightInnerAngle;
uniform float _LightOuterAngle;
uniform float4 _LightDirection;
uniform float4 _LightPosition;
uniform float3 _LightColor;
uniform float4x4 _ViewProjInv;
uniform float4x4 _LightViewProj;
uniform int _ShadowsEnabled;

 // main procedure, the original name was ps
float4 main( in X1X cin) : SV_Target0
{

    float4 _screenPosition;
    float4 _screenPositionHom;
    float3 _normal;
    float _diffusePower;
    float4 _positionScreen;
    float4 _positionWorld;
    float3 _directionToLight;
    float _lightDirectionDot;
    float _diffuseStrength;
    float3 _lightVector;
    float _lightOuterCos;
    float _lightInnerCos;
    float3 _diffuseContribution;
    float3 _pixelPositionFromLight1;
    float2 _shadowCoord1;

    _screenPosition = cin._TEXCOORD0;
    _screenPositionHom = _screenPosition/_screenPosition.w;
    _TMP11 = float3(_screenPositionHom.x, -_screenPositionHom.y, _screenPositionHom.z);
    _TMP0 =  5.00000000000000000E-001f*(_TMP11 + float3(  1.00000000000000000E000f,  1.00000000000000000E000f,  0.00000000000000000E000f));
    _TMP12 = _TMP53.Sample(_DepthMap, _TMP0.xy);
    _normalData0026 = _TMP54.Sample(_NormalMap, _TMP0.xy);
    _unPackedNormal0026 = _normalData0026* 2.00000000000000000E000f -  1.00000000000000000E000f;
    _TMP13 = dot(_unPackedNormal0026.xyz, _unPackedNormal0026.xyz);
    _TMP14 = rsqrt(_TMP13);
    _normal = _TMP14*_unPackedNormal0026.xyz;
    _diffusePower = _unPackedNormal0026.w* 2.55000000000000000E002f;
    _positionScreen = float4(_screenPositionHom.x, _screenPositionHom.y, _TMP12.x,  1.00000000000000000E000f);
    _r0030.x = dot(_ViewProjInv._11_12_13_14, _positionScreen);
    _r0030.y = dot(_ViewProjInv._21_22_23_24, _positionScreen);
    _r0030.z = dot(_ViewProjInv._31_32_33_34, _positionScreen);
    _r0030.w = dot(_ViewProjInv._41_42_43_44, _positionScreen);
    _positionWorld = _r0030/_r0030.w;
    _TMP15 = dot(_LightDirection, _LightDirection);
    _TMP16 = rsqrt(_TMP15);
    _TMP31 =  1.00000000000000000E000f/_TMP16;
    _v0036 = _LightPosition.xyz - _positionWorld.xyz;
    _TMP13 = dot(_v0036, _v0036);
    _TMP14 = rsqrt(_TMP13);
    _directionToLight = _TMP14*_v0036;
    _TMP13 = dot(_LightDirection.xyz, _LightDirection.xyz);
    _TMP14 = rsqrt(_TMP13);
    _TMP1 = _TMP14*_LightDirection.xyz;
    _lightDirectionDot = dot(_TMP1, -_directionToLight);
    _diffuseStrength =  0.00000000000000000E000f;
    _v0040 = -_LightDirection.xyz;
    _TMP13 = dot(_v0040, _v0040);
    _TMP14 = rsqrt(_TMP13);
    _lightVector = _TMP14*_v0040;
    _lightOuterCos = cos(_LightOuterAngle);
    _lightInnerCos = cos(_LightInnerAngle);
    if (_lightDirectionDot > _lightOuterCos) { // if begin
        _TMP13 = dot(_lightVector, _lightVector);
        _TMP14 = rsqrt(_TMP13);
        _TMP2 = _TMP14*_lightVector;
        _TMP3 = dot(_normal, _TMP2);
        _TMP4 = saturate(_TMP3);
        _diffuseStrength = max( 0.00000000000000000E000f, _TMP4);
        _y0044 = saturate((_lightDirectionDot - _lightOuterCos)/(_lightInnerCos - _lightOuterCos));
        _TMP5 = _y0044*_y0044*( 3.00000000000000000E000f -  2.00000000000000000E000f*_y0044);
        _diffuseStrength = _diffuseStrength*_TMP5;
    } // end if
    if (_lightDirectionDot > _lightInnerCos) { // if begin
        _TMP13 = dot(_lightVector, _lightVector);
        _TMP14 = rsqrt(_TMP13);
        _TMP6 = _TMP14*_lightVector;
        _TMP7 = dot(_normal, _TMP6);
        _TMP8 = saturate(_TMP7);
        _diffuseStrength = max( 0.00000000000000000E000f, _TMP8);
    } // end if
    _diffuseContribution = (_LightColor*_diffuseStrength*_diffusePower)/_TMP31;
    if ((bool) _ShadowsEnabled) { // if begin
        _r0050.x = dot(_LightViewProj._11_12_13_14, _positionWorld);
        _r0050.y = dot(_LightViewProj._21_22_23_24, _positionWorld);
        _r0050.z = dot(_LightViewProj._31_32_33_34, _positionWorld);
        _r0050.w = dot(_LightViewProj._41_42_43_44, _positionWorld);
        _pixelPositionFromLight1 = _r0050.xyz/_r0050.w;
        _shadowCoord1 = _pixelPositionFromLight1.xy* 5.00000000000000000E-001f +  5.00000000000000000E-001f;
        _shadowCoord1.y =  1.00000000000000000E000f - _shadowCoord1.y;
        _TMP12 = _TMP55.Sample(_ShadowMap, _shadowCoord1);
        if (_TMP12.x +  5.00000023748725650E-004f < _pixelPositionFromLight1.z) { // if begin
            _diffuseContribution = float3(  0.00000000000000000E000f,  0.00000000000000000E000f,  0.00000000000000000E000f);
        } // end if
    } // end if
    return float4(_diffuseContribution.x, _diffuseContribution.y, _diffuseContribution.z,  0.00000000000000000E000f);
} // main end
