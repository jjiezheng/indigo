// ps_4_0 output by Cg compiler
// cgc version 3.1.0013, build date Apr 18 2012
// command line args: -q -unroll all -profile ps_5_0
// source file: deferred_lighting_spot_light.cg
//vendor NVIDIA Corporation
//version 3.1.0.13
//profile ps_5_0
//program ps
//semantic DepthMap : TEXUNIT0
//semantic NormalMap : TEXUNIT1
//semantic ShadowMap : TEXUNIT2
//semantic ViewPosition
//semantic LightDirection
//semantic LightPosition
//semantic LightColor
//semantic LightInnerAngle
//semantic LightOuterAngle
//semantic LightDecay
//semantic View
//semantic ViewProjInv
//semantic ProjInv
//semantic LightViewProj
//semantic WorldViewProj
//semantic NormalMatrix
//var sampler2D DepthMap : TEXUNIT0 : _DepthMap 0 : -1 : 1
//var sampler2D NormalMap : TEXUNIT1 : _NormalMap 1 : -1 : 1
//var sampler2D ShadowMap : TEXUNIT2 : _ShadowMap 2 : -1 : 1
//var float4 LightDirection :  : _LightDirection : -1 : 1
//var float4 LightPosition :  : _LightPosition : -1 : 1
//var float3 LightColor :  : _LightColor : -1 : 1
//var float LightInnerAngle :  : _LightInnerAngle : -1 : 1
//var float LightOuterAngle :  : _LightOuterAngle : -1 : 1
//var float4x4 ViewProjInv :  : _ViewProjInv[0], 4 : -1 : 1
//var float4x4 LightViewProj :  : _LightViewProj[0], 4 : -1 : 1
//var float4 screenPosition : $vin.TEXCOORD0 :  : 1 : 1
//var float4 ps : $vout.COLOR0 : COLOR0 : -1 : 1

#pragma pack_matrix(row_major)

struct VOutput {
    float4 _position1 : SV_Position;
    float4 _screenPosition1 : TEXCOORD0;
};

struct X1X {
    float4 _POSITION : SV_Position;
    float4 _TEXCOORD0 : TEXCOORD0;
};

static float4 _TMP12;
static float4 _TMP16;
static float _TMP15;
static float _TMP14;
static float _TMP8;
static float _TMP7;
static float3 _TMP6;
static float _TMP5;
static float _TMP4;
static float _TMP3;
static float3 _TMP2;
static float3 _TMP1;
static float _TMP17;
static float _TMP18;
static float3 _TMP0;
static float3 _TMP13;
static float4 _unPackedNormal0026;
static float4 _normalData0026;
static float4 _r0032;
static float _TMP33;
static float3 _v0038;
static float3 _v0042;
static float _y0046;
static float4 _r0052;
Texture2D<float4> _TMP57 : register(t1);
Texture2D<float4> _TMP58 : register(t0);
Texture2D<float4> _TMP59 : register(t2);
SamplerState _DepthMap : TEXUNIT0;
SamplerState _NormalMap : TEXUNIT1;
SamplerState _ShadowMap : TEXUNIT2;
uniform float4 _LightDirection;
uniform float4 _LightPosition;
uniform float3 _LightColor;
uniform float _LightInnerAngle;
uniform float _LightOuterAngle;
uniform float4x4 _ViewProjInv;
uniform float4x4 _LightViewProj;

 // main procedure, the original name was ps
float4 main( in X1X cin) : SV_Target0
{

    float4 _screenPosition;
    float4 _screenPositionHom;
    float3 _normal;
    float _diffusePower;
    float4 _positionScreen;
    float4 _positionWorld;
    float _distance;
    float3 _directionToLight;
    float _lightDirectionDot;
    float _diffuseStrength;
    float3 _lightVector;
    float _lightOuterCos;
    float _lightInnerCos;
    float3 _diffuseContribution;
    float3 _pixelPositionFromLight;
    float2 _shadowCoord;
    float _sum1;
    float _shadowFactor1;

    _screenPosition = cin._TEXCOORD0;
    _screenPositionHom = _screenPosition/_screenPosition.w;
    _TMP13 = float3(_screenPositionHom.x, -_screenPositionHom.y, _screenPositionHom.z);
    _TMP0 =  5.00000000000000000E-001f*(_TMP13 + float3(  1.00000000000000000E000f,  1.00000000000000000E000f,  0.00000000000000000E000f));
    _normalData0026 = _TMP57.Sample(_NormalMap, _TMP0.xy);
    _unPackedNormal0026 = _normalData0026* 2.00000000000000000E000f -  1.00000000000000000E000f;
    _TMP14 = dot(_unPackedNormal0026.xyz, _unPackedNormal0026.xyz);
    _TMP15 = rsqrt(_TMP14);
    _normal = _TMP15*_unPackedNormal0026.xyz;
    _diffusePower = _unPackedNormal0026.w* 2.55000000000000000E002f;
    _TMP16 = _TMP58.Sample(_DepthMap, _TMP0.xy);
    _positionScreen = float4(_screenPositionHom.x, _screenPositionHom.y, _TMP16.x,  1.00000000000000000E000f);
    _r0032.x = dot(_ViewProjInv._11_12_13_14, _positionScreen);
    _r0032.y = dot(_ViewProjInv._21_22_23_24, _positionScreen);
    _r0032.z = dot(_ViewProjInv._31_32_33_34, _positionScreen);
    _r0032.w = dot(_ViewProjInv._41_42_43_44, _positionScreen);
    _positionWorld = _r0032/_r0032.w;
    _TMP17 = dot(_LightDirection, _LightDirection);
    _TMP18 = rsqrt(_TMP17);
    _TMP33 =  1.00000000000000000E000f/_TMP18;
    _distance = _TMP33*_TMP33;
    _v0038 = _LightPosition.xyz - _positionWorld.xyz;
    _TMP14 = dot(_v0038, _v0038);
    _TMP15 = rsqrt(_TMP14);
    _directionToLight = _TMP15*_v0038;
    _TMP14 = dot(_LightDirection.xyz, _LightDirection.xyz);
    _TMP15 = rsqrt(_TMP14);
    _TMP1 = _TMP15*_LightDirection.xyz;
    _lightDirectionDot = dot(_TMP1, -_directionToLight);
    _diffuseStrength =  0.00000000000000000E000f;
    _v0042 = -_LightDirection.xyz;
    _TMP14 = dot(_v0042, _v0042);
    _TMP15 = rsqrt(_TMP14);
    _lightVector = _TMP15*_v0042;
    _lightOuterCos = cos(_LightOuterAngle);
    _lightInnerCos = cos(_LightInnerAngle);
    if (_lightDirectionDot > _lightOuterCos) { // if begin
        _TMP14 = dot(_lightVector, _lightVector);
        _TMP15 = rsqrt(_TMP14);
        _TMP2 = _TMP15*_lightVector;
        _TMP3 = dot(_normal, _TMP2);
        _TMP4 = saturate(_TMP3);
        _diffuseStrength = max( 0.00000000000000000E000f, _TMP4);
        _y0046 = saturate((_lightDirectionDot - _lightOuterCos)/(_lightInnerCos - _lightOuterCos));
        _TMP5 = _y0046*_y0046*( 3.00000000000000000E000f -  2.00000000000000000E000f*_y0046);
        _diffuseStrength = _diffuseStrength*_TMP5;
    } // end if
    if (_lightDirectionDot > _lightInnerCos) { // if begin
        _TMP14 = dot(_lightVector, _lightVector);
        _TMP15 = rsqrt(_TMP14);
        _TMP6 = _TMP15*_lightVector;
        _TMP7 = dot(_normal, _TMP6);
        _TMP8 = saturate(_TMP7);
        _diffuseStrength = max( 0.00000000000000000E000f, _TMP8);
    } // end if
    _diffuseContribution = (_LightColor*_diffusePower*_diffuseStrength)/_distance;
    _r0052.x = dot(_LightViewProj._11_12_13_14, _positionWorld);
    _r0052.y = dot(_LightViewProj._21_22_23_24, _positionWorld);
    _r0052.z = dot(_LightViewProj._31_32_33_34, _positionWorld);
    _r0052.w = dot(_LightViewProj._41_42_43_44, _positionWorld);
    _pixelPositionFromLight = _r0052.xyz/_r0052.w;
    _shadowCoord = _pixelPositionFromLight.xy* 5.00000000000000000E-001f +  5.00000000000000000E-001f;
    _shadowCoord.y =  1.00000000000000000E000f - _shadowCoord.y;
    _TMP16 = _TMP59.Sample(_ShadowMap, _shadowCoord);
    if (_TMP16.x +  5.00000023748725650E-004f < _pixelPositionFromLight.z) { // if begin
        _TMP12 = _TMP59.Sample(_ShadowMap, _shadowCoord + float2( -9.76562500000000000E-004f, -1.30208337213844060E-003f));
        _sum1 = _TMP12.x;
        _TMP12 = _TMP59.Sample(_ShadowMap, _shadowCoord + float2(  0.00000000000000000E000f, -1.30208337213844060E-003f));
        _sum1 = _sum1 + _TMP12.x;
        _TMP12 = _TMP59.Sample(_ShadowMap, _shadowCoord + float2(  0.00000000000000000E000f, -1.30208337213844060E-003f));
        _sum1 = _sum1 + _TMP12.x;
        _TMP12 = _TMP59.Sample(_ShadowMap, _shadowCoord + float2(  9.76562500000000000E-004f, -1.30208337213844060E-003f));
        _sum1 = _sum1 + _TMP12.x;
        _TMP12 = _TMP59.Sample(_ShadowMap, _shadowCoord + float2( -9.76562500000000000E-004f,  0.00000000000000000E000f));
        _sum1 = _sum1 + _TMP12.x;
        _TMP12 = _TMP59.Sample(_ShadowMap, _shadowCoord);
        _sum1 = _sum1 + _TMP12.x;
        _TMP12 = _TMP59.Sample(_ShadowMap, _shadowCoord);
        _sum1 = _sum1 + _TMP12.x;
        _TMP12 = _TMP59.Sample(_ShadowMap, _shadowCoord + float2(  9.76562500000000000E-004f,  0.00000000000000000E000f));
        _sum1 = _sum1 + _TMP12.x;
        _TMP12 = _TMP59.Sample(_ShadowMap, _shadowCoord + float2( -9.76562500000000000E-004f,  0.00000000000000000E000f));
        _sum1 = _sum1 + _TMP12.x;
        _TMP12 = _TMP59.Sample(_ShadowMap, _shadowCoord);
        _sum1 = _sum1 + _TMP12.x;
        _TMP12 = _TMP59.Sample(_ShadowMap, _shadowCoord);
        _sum1 = _sum1 + _TMP12.x;
        _TMP12 = _TMP59.Sample(_ShadowMap, _shadowCoord + float2(  9.76562500000000000E-004f,  0.00000000000000000E000f));
        _sum1 = _sum1 + _TMP12.x;
        _TMP12 = _TMP59.Sample(_ShadowMap, _shadowCoord + float2( -9.76562500000000000E-004f,  1.30208337213844060E-003f));
        _sum1 = _sum1 + _TMP12.x;
        _TMP12 = _TMP59.Sample(_ShadowMap, _shadowCoord + float2(  0.00000000000000000E000f,  1.30208337213844060E-003f));
        _sum1 = _sum1 + _TMP12.x;
        _TMP12 = _TMP59.Sample(_ShadowMap, _shadowCoord + float2(  0.00000000000000000E000f,  1.30208337213844060E-003f));
        _sum1 = _sum1 + _TMP12.x;
        _TMP12 = _TMP59.Sample(_ShadowMap, _shadowCoord + float2(  9.76562500000000000E-004f,  1.30208337213844060E-003f));
        _sum1 = _sum1 + _TMP12.x;
        _shadowFactor1 = _sum1/ 1.60000000000000000E001f;
        _diffuseContribution = _diffuseContribution*(_shadowFactor1 -  1.00000001490116120E-001f);
    } // end if
    return float4(_diffuseContribution.x, _diffuseContribution.y, _diffuseContribution.z,  0.00000000000000000E000f);
} // main end
