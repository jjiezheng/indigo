// glslf output by Cg compiler
// cgc version 3.1.0013, build date Apr 18 2012
// command line args: -DGL=1 -DGL21=1 -q -profile glslf
// source file: deferred_ssao.cg
//vendor NVIDIA Corporation
//version 3.1.0.13
//profile glslf
//program ps
//semantic HalfPixel
//semantic Radius
//semantic NoiseScale
//semantic Kernel
//semantic Far
//semantic Near
//semantic ProjInv
//semantic Projection
//semantic LinearDepthMap : TEXUNIT0
//semantic NormalMap : TEXUNIT1
//semantic NoiseMap : TEXUNIT2
//var float Radius :  : _Radius : -1 : 1
//var float2 NoiseScale :  : _NoiseScale : -1 : 1
//var float Far :  : _Far : -1 : 1
//var float4x4 ProjInv :  : _ProjInv[0], 4 : -1 : 1
//var float4x4 Projection :  : _Projection[0], 4 : -1 : 1
//var sampler2D LinearDepthMap : TEXUNIT0 : _LinearDepthMap 0 : -1 : 1
//var sampler2D NormalMap : TEXUNIT1 : _NormalMap 1 : -1 : 1
//var sampler2D NoiseMap : TEXUNIT2 : _NoiseMap 2 : -1 : 1
//var float2 texCoord : $vin.TEXCOORD0 : TEX0 : 1 : 1
//var float4 frustumCorner : $vin.TEXCOORD1 : TEX1 : 2 : 1
//var float4 ps : $vout.COLOR0 : COL : -1 : 1

#version 110

struct VOutput {
    vec2 _texCoord6;
    vec4 _frustumCorners;
};

vec4 _ret_0;
float _TMP10;
float _TMP12;
float _TMP11;
vec2 _TMP4;
float _TMP9;
float _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _packedDepth0028;
float _TMP31;
vec4 _r0036;
vec2 _texCoord0046;
vec2 _c0050;
float _TMP57;
vec2 _sampleTexCoord0058;
vec2 _sampleOffset0058;
vec4 _frustumCorner0058;
vec4 _viewRay0058;
vec2 _TMP240058;
vec4 _samplePositionVS0058;
vec3 _diff0058;
vec3 _v0058;
float _d0058;
float _occlusion10058;
vec4 _positionScreen0060;
vec4 _r0062;
vec4 _packedDepth0072;
float _TMP75;
float _b0090;
float _TMP91;
vec2 _sampleTexCoord0092;
vec2 _sampleOffset0092;
vec4 _frustumCorner0092;
vec4 _viewRay0092;
vec2 _TMP240092;
vec4 _samplePositionVS0092;
vec3 _diff0092;
vec3 _v0092;
float _d0092;
float _occlusion10092;
vec4 _positionScreen0094;
vec4 _r0096;
vec4 _packedDepth0106;
float _TMP109;
float _b0124;
float _TMP125;
vec2 _sampleTexCoord0126;
vec2 _sampleOffset0126;
vec4 _frustumCorner0126;
vec4 _viewRay0126;
vec2 _TMP240126;
vec4 _samplePositionVS0126;
vec3 _diff0126;
vec3 _v0126;
float _d0126;
float _occlusion10126;
vec4 _positionScreen0128;
vec4 _r0130;
vec4 _packedDepth0140;
float _TMP143;
float _b0158;
float _TMP159;
vec2 _sampleTexCoord0160;
vec4 _frustumCorner0160;
vec4 _viewRay0160;
vec2 _TMP240160;
vec4 _samplePositionVS0160;
vec3 _diff0160;
vec3 _v0160;
float _d0160;
float _occlusion10160;
vec4 _positionScreen0162;
vec4 _r0164;
vec4 _packedDepth0174;
float _TMP177;
float _b0192;
uniform float _Radius;
uniform vec2 _NoiseScale;
uniform float _Far;
uniform vec4 _ProjInv[4];
uniform vec4 _Projection[4];
uniform sampler2D _LinearDepthMap;
uniform sampler2D _NormalMap;
uniform sampler2D _NoiseMap;

 // main procedure, the original name was ps
void main()
{

    vec4 _viewRay1;
    vec4 _positionVS1;
    vec4 _positionSS;
    vec3 _random;
    float _rad;
    float _occlusion;
    vec2 _sampleOffset1;
    vec2 _coord21;
    vec2 _TMP26;

    _TMP26 = gl_TexCoord[1].xy*(_Far/gl_TexCoord[1].z);
    _viewRay1 = vec4(_TMP26.x, _TMP26.y, _Far, 1.00000000E+000);
    _packedDepth0028 = texture2D(_LinearDepthMap, gl_TexCoord[0].xy);
    _TMP31 = dot(_packedDepth0028, vec4( 1.00000000E+000, 3.92156886E-003, 1.53787005E-005, 6.22737240E-009));
    _positionVS1 = _viewRay1*-_TMP31;
    _positionVS1.w = 1.00000000E+000;
    _r0036.x = dot(_Projection[0], _positionVS1);
    _r0036.y = dot(_Projection[1], _positionVS1);
    _r0036.z = dot(_Projection[2], _positionVS1);
    _r0036.w = dot(_Projection[3], _positionVS1);
    _positionSS = _r0036/_r0036.w;
    _texCoord0046 = _positionSS.xy*5.00000000E-001 + 5.00000000E-001;
    _TMP1 = texture2D(_NormalMap, gl_TexCoord[0].xy);
    _c0050 = gl_TexCoord[0].xy*_NoiseScale;
    _TMP2 = texture2D(_NoiseMap, _c0050);
    _random = _TMP2.xyz*2.00000000E+000 - 1.00000000E+000;
    _TMP3 = abs(_positionVS1.z);
    _rad = _Radius/_TMP3;
    _TMP9 = dot(_random.xy, vec2( 1.00000000E+000, 0.00000000E+000));
    _TMP4 = vec2( 1.00000000E+000, 0.00000000E+000) - (2.00000000E+000*_random.xy)*_TMP9;
    _sampleOffset1 = _TMP4*_rad;
    _coord21 = vec2(_sampleOffset1.x*7.07000017E-001 - _sampleOffset1.y*7.07000017E-001, _sampleOffset1.x*7.07000017E-001 + _sampleOffset1.y*7.07000017E-001);
    _sampleOffset0058 = _sampleOffset1*2.50000000E-001;
    _sampleTexCoord0058 = _texCoord0046 + _sampleOffset0058;
    _positionScreen0060.x = _sampleTexCoord0058.x*2.00000000E+000 - 1.00000000E+000;
    _positionScreen0060.y = _sampleTexCoord0058.y*2.00000000E+000 - 1.00000000E+000;
    _positionScreen0060.z = 0.00000000E+000;
    _positionScreen0060.w = 1.00000000E+000;
    _r0062.x = dot(_ProjInv[0], _positionScreen0060);
    _r0062.y = dot(_ProjInv[1], _positionScreen0060);
    _r0062.z = dot(_ProjInv[2], _positionScreen0060);
    _r0062.w = dot(_ProjInv[3], _positionScreen0060);
    _frustumCorner0058 = _r0062/_r0062.w;
    _TMP240058 = _frustumCorner0058.xy*(_Far/_frustumCorner0058.z);
    _viewRay0058 = vec4(_TMP240058.x, _TMP240058.y, _Far, 1.00000000E+000);
    _packedDepth0072 = texture2D(_LinearDepthMap, _sampleTexCoord0058);
    _TMP75 = dot(_packedDepth0072, vec4( 1.00000000E+000, 3.92156886E-003, 1.53787005E-005, 6.22737240E-009));
    _samplePositionVS0058 = _viewRay0058*-_TMP75;
    _diff0058 = _samplePositionVS0058.xyz - _positionVS1.xyz;
    _TMP11 = dot(_diff0058, _diff0058);
    _TMP12 = inversesqrt(_TMP11);
    _v0058 = _TMP12*_diff0058;
    _d0058 = length(_diff0058);
    if (_d0058 < 1.00000001E-001) { // if begin
        _TMP10 = dot(_TMP1.xyz, _v0058);
        _b0090 = _TMP10*(1.00000000E+000 + _d0058);
        _occlusion10058 = max(0.00000000E+000, _b0090);
        _TMP57 = _occlusion10058;
    } else {
        _TMP57 = 0.00000000E+000;
    } // end if
    _sampleOffset0092 = _coord21*5.00000000E-001;
    _sampleTexCoord0092 = _texCoord0046 + _sampleOffset0092;
    _positionScreen0094.x = _sampleTexCoord0092.x*2.00000000E+000 - 1.00000000E+000;
    _positionScreen0094.y = _sampleTexCoord0092.y*2.00000000E+000 - 1.00000000E+000;
    _positionScreen0094.z = 0.00000000E+000;
    _positionScreen0094.w = 1.00000000E+000;
    _r0096.x = dot(_ProjInv[0], _positionScreen0094);
    _r0096.y = dot(_ProjInv[1], _positionScreen0094);
    _r0096.z = dot(_ProjInv[2], _positionScreen0094);
    _r0096.w = dot(_ProjInv[3], _positionScreen0094);
    _frustumCorner0092 = _r0096/_r0096.w;
    _TMP240092 = _frustumCorner0092.xy*(_Far/_frustumCorner0092.z);
    _viewRay0092 = vec4(_TMP240092.x, _TMP240092.y, _Far, 1.00000000E+000);
    _packedDepth0106 = texture2D(_LinearDepthMap, _sampleTexCoord0092);
    _TMP109 = dot(_packedDepth0106, vec4( 1.00000000E+000, 3.92156886E-003, 1.53787005E-005, 6.22737240E-009));
    _samplePositionVS0092 = _viewRay0092*-_TMP109;
    _diff0092 = _samplePositionVS0092.xyz - _positionVS1.xyz;
    _TMP11 = dot(_diff0092, _diff0092);
    _TMP12 = inversesqrt(_TMP11);
    _v0092 = _TMP12*_diff0092;
    _d0092 = length(_diff0092);
    if (_d0092 < 1.00000001E-001) { // if begin
        _TMP10 = dot(_TMP1.xyz, _v0092);
        _b0124 = _TMP10*(1.00000000E+000 + _d0092);
        _occlusion10092 = max(0.00000000E+000, _b0124);
        _TMP91 = _occlusion10092;
    } else {
        _TMP91 = 0.00000000E+000;
    } // end if
    _occlusion = _TMP57 + _TMP91;
    _sampleOffset0126 = _sampleOffset1*7.50000000E-001;
    _sampleTexCoord0126 = _texCoord0046 + _sampleOffset0126;
    _positionScreen0128.x = _sampleTexCoord0126.x*2.00000000E+000 - 1.00000000E+000;
    _positionScreen0128.y = _sampleTexCoord0126.y*2.00000000E+000 - 1.00000000E+000;
    _positionScreen0128.z = 0.00000000E+000;
    _positionScreen0128.w = 1.00000000E+000;
    _r0130.x = dot(_ProjInv[0], _positionScreen0128);
    _r0130.y = dot(_ProjInv[1], _positionScreen0128);
    _r0130.z = dot(_ProjInv[2], _positionScreen0128);
    _r0130.w = dot(_ProjInv[3], _positionScreen0128);
    _frustumCorner0126 = _r0130/_r0130.w;
    _TMP240126 = _frustumCorner0126.xy*(_Far/_frustumCorner0126.z);
    _viewRay0126 = vec4(_TMP240126.x, _TMP240126.y, _Far, 1.00000000E+000);
    _packedDepth0140 = texture2D(_LinearDepthMap, _sampleTexCoord0126);
    _TMP143 = dot(_packedDepth0140, vec4( 1.00000000E+000, 3.92156886E-003, 1.53787005E-005, 6.22737240E-009));
    _samplePositionVS0126 = _viewRay0126*-_TMP143;
    _diff0126 = _samplePositionVS0126.xyz - _positionVS1.xyz;
    _TMP11 = dot(_diff0126, _diff0126);
    _TMP12 = inversesqrt(_TMP11);
    _v0126 = _TMP12*_diff0126;
    _d0126 = length(_diff0126);
    if (_d0126 < 1.00000001E-001) { // if begin
        _TMP10 = dot(_TMP1.xyz, _v0126);
        _b0158 = _TMP10*(1.00000000E+000 + _d0126);
        _occlusion10126 = max(0.00000000E+000, _b0158);
        _TMP125 = _occlusion10126;
    } else {
        _TMP125 = 0.00000000E+000;
    } // end if
    _occlusion = _occlusion + _TMP125;
    _sampleTexCoord0160 = _texCoord0046 + _coord21;
    _positionScreen0162.x = _sampleTexCoord0160.x*2.00000000E+000 - 1.00000000E+000;
    _positionScreen0162.y = _sampleTexCoord0160.y*2.00000000E+000 - 1.00000000E+000;
    _positionScreen0162.z = 0.00000000E+000;
    _positionScreen0162.w = 1.00000000E+000;
    _r0164.x = dot(_ProjInv[0], _positionScreen0162);
    _r0164.y = dot(_ProjInv[1], _positionScreen0162);
    _r0164.z = dot(_ProjInv[2], _positionScreen0162);
    _r0164.w = dot(_ProjInv[3], _positionScreen0162);
    _frustumCorner0160 = _r0164/_r0164.w;
    _TMP240160 = _frustumCorner0160.xy*(_Far/_frustumCorner0160.z);
    _viewRay0160 = vec4(_TMP240160.x, _TMP240160.y, _Far, 1.00000000E+000);
    _packedDepth0174 = texture2D(_LinearDepthMap, _sampleTexCoord0160);
    _TMP177 = dot(_packedDepth0174, vec4( 1.00000000E+000, 3.92156886E-003, 1.53787005E-005, 6.22737240E-009));
    _samplePositionVS0160 = _viewRay0160*-_TMP177;
    _diff0160 = _samplePositionVS0160.xyz - _positionVS1.xyz;
    _TMP11 = dot(_diff0160, _diff0160);
    _TMP12 = inversesqrt(_TMP11);
    _v0160 = _TMP12*_diff0160;
    _d0160 = length(_diff0160);
    if (_d0160 < 1.00000001E-001) { // if begin
        _TMP10 = dot(_TMP1.xyz, _v0160);
        _b0192 = _TMP10*(1.00000000E+000 + _d0160);
        _occlusion10160 = max(0.00000000E+000, _b0192);
        _TMP159 = _occlusion10160;
    } else {
        _TMP159 = 0.00000000E+000;
    } // end if
    _occlusion = _occlusion + _TMP159;
    _TMP9 = dot(_random.xy, vec2( -1.00000000E+000, 0.00000000E+000));
    _TMP4 = vec2( -1.00000000E+000, 0.00000000E+000) - (2.00000000E+000*_random.xy)*_TMP9;
    _sampleOffset1 = _TMP4*_rad;
    _coord21 = vec2(_sampleOffset1.x*7.07000017E-001 - _sampleOffset1.y*7.07000017E-001, _sampleOffset1.x*7.07000017E-001 + _sampleOffset1.y*7.07000017E-001);
    _sampleOffset0058 = _sampleOffset1*2.50000000E-001;
    _sampleTexCoord0058 = _texCoord0046 + _sampleOffset0058;
    _positionScreen0060.x = _sampleTexCoord0058.x*2.00000000E+000 - 1.00000000E+000;
    _positionScreen0060.y = _sampleTexCoord0058.y*2.00000000E+000 - 1.00000000E+000;
    _positionScreen0060.z = 0.00000000E+000;
    _positionScreen0060.w = 1.00000000E+000;
    _r0062.x = dot(_ProjInv[0], _positionScreen0060);
    _r0062.y = dot(_ProjInv[1], _positionScreen0060);
    _r0062.z = dot(_ProjInv[2], _positionScreen0060);
    _r0062.w = dot(_ProjInv[3], _positionScreen0060);
    _frustumCorner0058 = _r0062/_r0062.w;
    _TMP240058 = _frustumCorner0058.xy*(_Far/_frustumCorner0058.z);
    _viewRay0058 = vec4(_TMP240058.x, _TMP240058.y, _Far, 1.00000000E+000);
    _packedDepth0072 = texture2D(_LinearDepthMap, _sampleTexCoord0058);
    _TMP75 = dot(_packedDepth0072, vec4( 1.00000000E+000, 3.92156886E-003, 1.53787005E-005, 6.22737240E-009));
    _samplePositionVS0058 = _viewRay0058*-_TMP75;
    _diff0058 = _samplePositionVS0058.xyz - _positionVS1.xyz;
    _TMP11 = dot(_diff0058, _diff0058);
    _TMP12 = inversesqrt(_TMP11);
    _v0058 = _TMP12*_diff0058;
    _d0058 = length(_diff0058);
    if (_d0058 < 1.00000001E-001) { // if begin
        _TMP10 = dot(_TMP1.xyz, _v0058);
        _b0090 = _TMP10*(1.00000000E+000 + _d0058);
        _occlusion10058 = max(0.00000000E+000, _b0090);
        _TMP57 = _occlusion10058;
    } else {
        _TMP57 = 0.00000000E+000;
    } // end if
    _occlusion = _occlusion + _TMP57;
    _sampleOffset0092 = _coord21*5.00000000E-001;
    _sampleTexCoord0092 = _texCoord0046 + _sampleOffset0092;
    _positionScreen0094.x = _sampleTexCoord0092.x*2.00000000E+000 - 1.00000000E+000;
    _positionScreen0094.y = _sampleTexCoord0092.y*2.00000000E+000 - 1.00000000E+000;
    _positionScreen0094.z = 0.00000000E+000;
    _positionScreen0094.w = 1.00000000E+000;
    _r0096.x = dot(_ProjInv[0], _positionScreen0094);
    _r0096.y = dot(_ProjInv[1], _positionScreen0094);
    _r0096.z = dot(_ProjInv[2], _positionScreen0094);
    _r0096.w = dot(_ProjInv[3], _positionScreen0094);
    _frustumCorner0092 = _r0096/_r0096.w;
    _TMP240092 = _frustumCorner0092.xy*(_Far/_frustumCorner0092.z);
    _viewRay0092 = vec4(_TMP240092.x, _TMP240092.y, _Far, 1.00000000E+000);
    _packedDepth0106 = texture2D(_LinearDepthMap, _sampleTexCoord0092);
    _TMP109 = dot(_packedDepth0106, vec4( 1.00000000E+000, 3.92156886E-003, 1.53787005E-005, 6.22737240E-009));
    _samplePositionVS0092 = _viewRay0092*-_TMP109;
    _diff0092 = _samplePositionVS0092.xyz - _positionVS1.xyz;
    _TMP11 = dot(_diff0092, _diff0092);
    _TMP12 = inversesqrt(_TMP11);
    _v0092 = _TMP12*_diff0092;
    _d0092 = length(_diff0092);
    if (_d0092 < 1.00000001E-001) { // if begin
        _TMP10 = dot(_TMP1.xyz, _v0092);
        _b0124 = _TMP10*(1.00000000E+000 + _d0092);
        _occlusion10092 = max(0.00000000E+000, _b0124);
        _TMP91 = _occlusion10092;
    } else {
        _TMP91 = 0.00000000E+000;
    } // end if
    _occlusion = _occlusion + _TMP91;
    _sampleOffset0126 = _sampleOffset1*7.50000000E-001;
    _sampleTexCoord0126 = _texCoord0046 + _sampleOffset0126;
    _positionScreen0128.x = _sampleTexCoord0126.x*2.00000000E+000 - 1.00000000E+000;
    _positionScreen0128.y = _sampleTexCoord0126.y*2.00000000E+000 - 1.00000000E+000;
    _positionScreen0128.z = 0.00000000E+000;
    _positionScreen0128.w = 1.00000000E+000;
    _r0130.x = dot(_ProjInv[0], _positionScreen0128);
    _r0130.y = dot(_ProjInv[1], _positionScreen0128);
    _r0130.z = dot(_ProjInv[2], _positionScreen0128);
    _r0130.w = dot(_ProjInv[3], _positionScreen0128);
    _frustumCorner0126 = _r0130/_r0130.w;
    _TMP240126 = _frustumCorner0126.xy*(_Far/_frustumCorner0126.z);
    _viewRay0126 = vec4(_TMP240126.x, _TMP240126.y, _Far, 1.00000000E+000);
    _packedDepth0140 = texture2D(_LinearDepthMap, _sampleTexCoord0126);
    _TMP143 = dot(_packedDepth0140, vec4( 1.00000000E+000, 3.92156886E-003, 1.53787005E-005, 6.22737240E-009));
    _samplePositionVS0126 = _viewRay0126*-_TMP143;
    _diff0126 = _samplePositionVS0126.xyz - _positionVS1.xyz;
    _TMP11 = dot(_diff0126, _diff0126);
    _TMP12 = inversesqrt(_TMP11);
    _v0126 = _TMP12*_diff0126;
    _d0126 = length(_diff0126);
    if (_d0126 < 1.00000001E-001) { // if begin
        _TMP10 = dot(_TMP1.xyz, _v0126);
        _b0158 = _TMP10*(1.00000000E+000 + _d0126);
        _occlusion10126 = max(0.00000000E+000, _b0158);
        _TMP125 = _occlusion10126;
    } else {
        _TMP125 = 0.00000000E+000;
    } // end if
    _occlusion = _occlusion + _TMP125;
    _sampleTexCoord0160 = _texCoord0046 + _coord21;
    _positionScreen0162.x = _sampleTexCoord0160.x*2.00000000E+000 - 1.00000000E+000;
    _positionScreen0162.y = _sampleTexCoord0160.y*2.00000000E+000 - 1.00000000E+000;
    _positionScreen0162.z = 0.00000000E+000;
    _positionScreen0162.w = 1.00000000E+000;
    _r0164.x = dot(_ProjInv[0], _positionScreen0162);
    _r0164.y = dot(_ProjInv[1], _positionScreen0162);
    _r0164.z = dot(_ProjInv[2], _positionScreen0162);
    _r0164.w = dot(_ProjInv[3], _positionScreen0162);
    _frustumCorner0160 = _r0164/_r0164.w;
    _TMP240160 = _frustumCorner0160.xy*(_Far/_frustumCorner0160.z);
    _viewRay0160 = vec4(_TMP240160.x, _TMP240160.y, _Far, 1.00000000E+000);
    _packedDepth0174 = texture2D(_LinearDepthMap, _sampleTexCoord0160);
    _TMP177 = dot(_packedDepth0174, vec4( 1.00000000E+000, 3.92156886E-003, 1.53787005E-005, 6.22737240E-009));
    _samplePositionVS0160 = _viewRay0160*-_TMP177;
    _diff0160 = _samplePositionVS0160.xyz - _positionVS1.xyz;
    _TMP11 = dot(_diff0160, _diff0160);
    _TMP12 = inversesqrt(_TMP11);
    _v0160 = _TMP12*_diff0160;
    _d0160 = length(_diff0160);
    if (_d0160 < 1.00000001E-001) { // if begin
        _TMP10 = dot(_TMP1.xyz, _v0160);
        _b0192 = _TMP10*(1.00000000E+000 + _d0160);
        _occlusion10160 = max(0.00000000E+000, _b0192);
        _TMP159 = _occlusion10160;
    } else {
        _TMP159 = 0.00000000E+000;
    } // end if
    _occlusion = _occlusion + _TMP159;
    _TMP9 = dot(_random.xy, vec2( 0.00000000E+000, 1.00000000E+000));
    _TMP4 = vec2( 0.00000000E+000, 1.00000000E+000) - (2.00000000E+000*_random.xy)*_TMP9;
    _sampleOffset1 = _TMP4*_rad;
    _coord21 = vec2(_sampleOffset1.x*7.07000017E-001 - _sampleOffset1.y*7.07000017E-001, _sampleOffset1.x*7.07000017E-001 + _sampleOffset1.y*7.07000017E-001);
    _sampleOffset0058 = _sampleOffset1*2.50000000E-001;
    _sampleTexCoord0058 = _texCoord0046 + _sampleOffset0058;
    _positionScreen0060.x = _sampleTexCoord0058.x*2.00000000E+000 - 1.00000000E+000;
    _positionScreen0060.y = _sampleTexCoord0058.y*2.00000000E+000 - 1.00000000E+000;
    _positionScreen0060.z = 0.00000000E+000;
    _positionScreen0060.w = 1.00000000E+000;
    _r0062.x = dot(_ProjInv[0], _positionScreen0060);
    _r0062.y = dot(_ProjInv[1], _positionScreen0060);
    _r0062.z = dot(_ProjInv[2], _positionScreen0060);
    _r0062.w = dot(_ProjInv[3], _positionScreen0060);
    _frustumCorner0058 = _r0062/_r0062.w;
    _TMP240058 = _frustumCorner0058.xy*(_Far/_frustumCorner0058.z);
    _viewRay0058 = vec4(_TMP240058.x, _TMP240058.y, _Far, 1.00000000E+000);
    _packedDepth0072 = texture2D(_LinearDepthMap, _sampleTexCoord0058);
    _TMP75 = dot(_packedDepth0072, vec4( 1.00000000E+000, 3.92156886E-003, 1.53787005E-005, 6.22737240E-009));
    _samplePositionVS0058 = _viewRay0058*-_TMP75;
    _diff0058 = _samplePositionVS0058.xyz - _positionVS1.xyz;
    _TMP11 = dot(_diff0058, _diff0058);
    _TMP12 = inversesqrt(_TMP11);
    _v0058 = _TMP12*_diff0058;
    _d0058 = length(_diff0058);
    if (_d0058 < 1.00000001E-001) { // if begin
        _TMP10 = dot(_TMP1.xyz, _v0058);
        _b0090 = _TMP10*(1.00000000E+000 + _d0058);
        _occlusion10058 = max(0.00000000E+000, _b0090);
        _TMP57 = _occlusion10058;
    } else {
        _TMP57 = 0.00000000E+000;
    } // end if
    _occlusion = _occlusion + _TMP57;
    _sampleOffset0092 = _coord21*5.00000000E-001;
    _sampleTexCoord0092 = _texCoord0046 + _sampleOffset0092;
    _positionScreen0094.x = _sampleTexCoord0092.x*2.00000000E+000 - 1.00000000E+000;
    _positionScreen0094.y = _sampleTexCoord0092.y*2.00000000E+000 - 1.00000000E+000;
    _positionScreen0094.z = 0.00000000E+000;
    _positionScreen0094.w = 1.00000000E+000;
    _r0096.x = dot(_ProjInv[0], _positionScreen0094);
    _r0096.y = dot(_ProjInv[1], _positionScreen0094);
    _r0096.z = dot(_ProjInv[2], _positionScreen0094);
    _r0096.w = dot(_ProjInv[3], _positionScreen0094);
    _frustumCorner0092 = _r0096/_r0096.w;
    _TMP240092 = _frustumCorner0092.xy*(_Far/_frustumCorner0092.z);
    _viewRay0092 = vec4(_TMP240092.x, _TMP240092.y, _Far, 1.00000000E+000);
    _packedDepth0106 = texture2D(_LinearDepthMap, _sampleTexCoord0092);
    _TMP109 = dot(_packedDepth0106, vec4( 1.00000000E+000, 3.92156886E-003, 1.53787005E-005, 6.22737240E-009));
    _samplePositionVS0092 = _viewRay0092*-_TMP109;
    _diff0092 = _samplePositionVS0092.xyz - _positionVS1.xyz;
    _TMP11 = dot(_diff0092, _diff0092);
    _TMP12 = inversesqrt(_TMP11);
    _v0092 = _TMP12*_diff0092;
    _d0092 = length(_diff0092);
    if (_d0092 < 1.00000001E-001) { // if begin
        _TMP10 = dot(_TMP1.xyz, _v0092);
        _b0124 = _TMP10*(1.00000000E+000 + _d0092);
        _occlusion10092 = max(0.00000000E+000, _b0124);
        _TMP91 = _occlusion10092;
    } else {
        _TMP91 = 0.00000000E+000;
    } // end if
    _occlusion = _occlusion + _TMP91;
    _sampleOffset0126 = _sampleOffset1*7.50000000E-001;
    _sampleTexCoord0126 = _texCoord0046 + _sampleOffset0126;
    _positionScreen0128.x = _sampleTexCoord0126.x*2.00000000E+000 - 1.00000000E+000;
    _positionScreen0128.y = _sampleTexCoord0126.y*2.00000000E+000 - 1.00000000E+000;
    _positionScreen0128.z = 0.00000000E+000;
    _positionScreen0128.w = 1.00000000E+000;
    _r0130.x = dot(_ProjInv[0], _positionScreen0128);
    _r0130.y = dot(_ProjInv[1], _positionScreen0128);
    _r0130.z = dot(_ProjInv[2], _positionScreen0128);
    _r0130.w = dot(_ProjInv[3], _positionScreen0128);
    _frustumCorner0126 = _r0130/_r0130.w;
    _TMP240126 = _frustumCorner0126.xy*(_Far/_frustumCorner0126.z);
    _viewRay0126 = vec4(_TMP240126.x, _TMP240126.y, _Far, 1.00000000E+000);
    _packedDepth0140 = texture2D(_LinearDepthMap, _sampleTexCoord0126);
    _TMP143 = dot(_packedDepth0140, vec4( 1.00000000E+000, 3.92156886E-003, 1.53787005E-005, 6.22737240E-009));
    _samplePositionVS0126 = _viewRay0126*-_TMP143;
    _diff0126 = _samplePositionVS0126.xyz - _positionVS1.xyz;
    _TMP11 = dot(_diff0126, _diff0126);
    _TMP12 = inversesqrt(_TMP11);
    _v0126 = _TMP12*_diff0126;
    _d0126 = length(_diff0126);
    if (_d0126 < 1.00000001E-001) { // if begin
        _TMP10 = dot(_TMP1.xyz, _v0126);
        _b0158 = _TMP10*(1.00000000E+000 + _d0126);
        _occlusion10126 = max(0.00000000E+000, _b0158);
        _TMP125 = _occlusion10126;
    } else {
        _TMP125 = 0.00000000E+000;
    } // end if
    _occlusion = _occlusion + _TMP125;
    _sampleTexCoord0160 = _texCoord0046 + _coord21;
    _positionScreen0162.x = _sampleTexCoord0160.x*2.00000000E+000 - 1.00000000E+000;
    _positionScreen0162.y = _sampleTexCoord0160.y*2.00000000E+000 - 1.00000000E+000;
    _positionScreen0162.z = 0.00000000E+000;
    _positionScreen0162.w = 1.00000000E+000;
    _r0164.x = dot(_ProjInv[0], _positionScreen0162);
    _r0164.y = dot(_ProjInv[1], _positionScreen0162);
    _r0164.z = dot(_ProjInv[2], _positionScreen0162);
    _r0164.w = dot(_ProjInv[3], _positionScreen0162);
    _frustumCorner0160 = _r0164/_r0164.w;
    _TMP240160 = _frustumCorner0160.xy*(_Far/_frustumCorner0160.z);
    _viewRay0160 = vec4(_TMP240160.x, _TMP240160.y, _Far, 1.00000000E+000);
    _packedDepth0174 = texture2D(_LinearDepthMap, _sampleTexCoord0160);
    _TMP177 = dot(_packedDepth0174, vec4( 1.00000000E+000, 3.92156886E-003, 1.53787005E-005, 6.22737240E-009));
    _samplePositionVS0160 = _viewRay0160*-_TMP177;
    _diff0160 = _samplePositionVS0160.xyz - _positionVS1.xyz;
    _TMP11 = dot(_diff0160, _diff0160);
    _TMP12 = inversesqrt(_TMP11);
    _v0160 = _TMP12*_diff0160;
    _d0160 = length(_diff0160);
    if (_d0160 < 1.00000001E-001) { // if begin
        _TMP10 = dot(_TMP1.xyz, _v0160);
        _b0192 = _TMP10*(1.00000000E+000 + _d0160);
        _occlusion10160 = max(0.00000000E+000, _b0192);
        _TMP159 = _occlusion10160;
    } else {
        _TMP159 = 0.00000000E+000;
    } // end if
    _occlusion = _occlusion + _TMP159;
    _TMP9 = dot(_random.xy, vec2( 0.00000000E+000, -1.00000000E+000));
    _TMP4 = vec2( 0.00000000E+000, -1.00000000E+000) - (2.00000000E+000*_random.xy)*_TMP9;
    _sampleOffset1 = _TMP4*_rad;
    _coord21 = vec2(_sampleOffset1.x*7.07000017E-001 - _sampleOffset1.y*7.07000017E-001, _sampleOffset1.x*7.07000017E-001 + _sampleOffset1.y*7.07000017E-001);
    _sampleOffset0058 = _sampleOffset1*2.50000000E-001;
    _sampleTexCoord0058 = _texCoord0046 + _sampleOffset0058;
    _positionScreen0060.x = _sampleTexCoord0058.x*2.00000000E+000 - 1.00000000E+000;
    _positionScreen0060.y = _sampleTexCoord0058.y*2.00000000E+000 - 1.00000000E+000;
    _positionScreen0060.z = 0.00000000E+000;
    _positionScreen0060.w = 1.00000000E+000;
    _r0062.x = dot(_ProjInv[0], _positionScreen0060);
    _r0062.y = dot(_ProjInv[1], _positionScreen0060);
    _r0062.z = dot(_ProjInv[2], _positionScreen0060);
    _r0062.w = dot(_ProjInv[3], _positionScreen0060);
    _frustumCorner0058 = _r0062/_r0062.w;
    _TMP240058 = _frustumCorner0058.xy*(_Far/_frustumCorner0058.z);
    _viewRay0058 = vec4(_TMP240058.x, _TMP240058.y, _Far, 1.00000000E+000);
    _packedDepth0072 = texture2D(_LinearDepthMap, _sampleTexCoord0058);
    _TMP75 = dot(_packedDepth0072, vec4( 1.00000000E+000, 3.92156886E-003, 1.53787005E-005, 6.22737240E-009));
    _samplePositionVS0058 = _viewRay0058*-_TMP75;
    _diff0058 = _samplePositionVS0058.xyz - _positionVS1.xyz;
    _TMP11 = dot(_diff0058, _diff0058);
    _TMP12 = inversesqrt(_TMP11);
    _v0058 = _TMP12*_diff0058;
    _d0058 = length(_diff0058);
    if (_d0058 < 1.00000001E-001) { // if begin
        _TMP10 = dot(_TMP1.xyz, _v0058);
        _b0090 = _TMP10*(1.00000000E+000 + _d0058);
        _occlusion10058 = max(0.00000000E+000, _b0090);
        _TMP57 = _occlusion10058;
    } else {
        _TMP57 = 0.00000000E+000;
    } // end if
    _occlusion = _occlusion + _TMP57;
    _sampleOffset0092 = _coord21*5.00000000E-001;
    _sampleTexCoord0092 = _texCoord0046 + _sampleOffset0092;
    _positionScreen0094.x = _sampleTexCoord0092.x*2.00000000E+000 - 1.00000000E+000;
    _positionScreen0094.y = _sampleTexCoord0092.y*2.00000000E+000 - 1.00000000E+000;
    _positionScreen0094.z = 0.00000000E+000;
    _positionScreen0094.w = 1.00000000E+000;
    _r0096.x = dot(_ProjInv[0], _positionScreen0094);
    _r0096.y = dot(_ProjInv[1], _positionScreen0094);
    _r0096.z = dot(_ProjInv[2], _positionScreen0094);
    _r0096.w = dot(_ProjInv[3], _positionScreen0094);
    _frustumCorner0092 = _r0096/_r0096.w;
    _TMP240092 = _frustumCorner0092.xy*(_Far/_frustumCorner0092.z);
    _viewRay0092 = vec4(_TMP240092.x, _TMP240092.y, _Far, 1.00000000E+000);
    _packedDepth0106 = texture2D(_LinearDepthMap, _sampleTexCoord0092);
    _TMP109 = dot(_packedDepth0106, vec4( 1.00000000E+000, 3.92156886E-003, 1.53787005E-005, 6.22737240E-009));
    _samplePositionVS0092 = _viewRay0092*-_TMP109;
    _diff0092 = _samplePositionVS0092.xyz - _positionVS1.xyz;
    _TMP11 = dot(_diff0092, _diff0092);
    _TMP12 = inversesqrt(_TMP11);
    _v0092 = _TMP12*_diff0092;
    _d0092 = length(_diff0092);
    if (_d0092 < 1.00000001E-001) { // if begin
        _TMP10 = dot(_TMP1.xyz, _v0092);
        _b0124 = _TMP10*(1.00000000E+000 + _d0092);
        _occlusion10092 = max(0.00000000E+000, _b0124);
        _TMP91 = _occlusion10092;
    } else {
        _TMP91 = 0.00000000E+000;
    } // end if
    _occlusion = _occlusion + _TMP91;
    _sampleOffset0126 = _sampleOffset1*7.50000000E-001;
    _sampleTexCoord0126 = _texCoord0046 + _sampleOffset0126;
    _positionScreen0128.x = _sampleTexCoord0126.x*2.00000000E+000 - 1.00000000E+000;
    _positionScreen0128.y = _sampleTexCoord0126.y*2.00000000E+000 - 1.00000000E+000;
    _positionScreen0128.z = 0.00000000E+000;
    _positionScreen0128.w = 1.00000000E+000;
    _r0130.x = dot(_ProjInv[0], _positionScreen0128);
    _r0130.y = dot(_ProjInv[1], _positionScreen0128);
    _r0130.z = dot(_ProjInv[2], _positionScreen0128);
    _r0130.w = dot(_ProjInv[3], _positionScreen0128);
    _frustumCorner0126 = _r0130/_r0130.w;
    _TMP240126 = _frustumCorner0126.xy*(_Far/_frustumCorner0126.z);
    _viewRay0126 = vec4(_TMP240126.x, _TMP240126.y, _Far, 1.00000000E+000);
    _packedDepth0140 = texture2D(_LinearDepthMap, _sampleTexCoord0126);
    _TMP143 = dot(_packedDepth0140, vec4( 1.00000000E+000, 3.92156886E-003, 1.53787005E-005, 6.22737240E-009));
    _samplePositionVS0126 = _viewRay0126*-_TMP143;
    _diff0126 = _samplePositionVS0126.xyz - _positionVS1.xyz;
    _TMP11 = dot(_diff0126, _diff0126);
    _TMP12 = inversesqrt(_TMP11);
    _v0126 = _TMP12*_diff0126;
    _d0126 = length(_diff0126);
    if (_d0126 < 1.00000001E-001) { // if begin
        _TMP10 = dot(_TMP1.xyz, _v0126);
        _b0158 = _TMP10*(1.00000000E+000 + _d0126);
        _occlusion10126 = max(0.00000000E+000, _b0158);
        _TMP125 = _occlusion10126;
    } else {
        _TMP125 = 0.00000000E+000;
    } // end if
    _occlusion = _occlusion + _TMP125;
    _sampleTexCoord0160 = _texCoord0046 + _coord21;
    _positionScreen0162.x = _sampleTexCoord0160.x*2.00000000E+000 - 1.00000000E+000;
    _positionScreen0162.y = _sampleTexCoord0160.y*2.00000000E+000 - 1.00000000E+000;
    _positionScreen0162.z = 0.00000000E+000;
    _positionScreen0162.w = 1.00000000E+000;
    _r0164.x = dot(_ProjInv[0], _positionScreen0162);
    _r0164.y = dot(_ProjInv[1], _positionScreen0162);
    _r0164.z = dot(_ProjInv[2], _positionScreen0162);
    _r0164.w = dot(_ProjInv[3], _positionScreen0162);
    _frustumCorner0160 = _r0164/_r0164.w;
    _TMP240160 = _frustumCorner0160.xy*(_Far/_frustumCorner0160.z);
    _viewRay0160 = vec4(_TMP240160.x, _TMP240160.y, _Far, 1.00000000E+000);
    _packedDepth0174 = texture2D(_LinearDepthMap, _sampleTexCoord0160);
    _TMP177 = dot(_packedDepth0174, vec4( 1.00000000E+000, 3.92156886E-003, 1.53787005E-005, 6.22737240E-009));
    _samplePositionVS0160 = _viewRay0160*-_TMP177;
    _diff0160 = _samplePositionVS0160.xyz - _positionVS1.xyz;
    _TMP11 = dot(_diff0160, _diff0160);
    _TMP12 = inversesqrt(_TMP11);
    _v0160 = _TMP12*_diff0160;
    _d0160 = length(_diff0160);
    if (_d0160 < 1.00000001E-001) { // if begin
        _TMP10 = dot(_TMP1.xyz, _v0160);
        _b0192 = _TMP10*(1.00000000E+000 + _d0160);
        _occlusion10160 = max(0.00000000E+000, _b0192);
        _TMP159 = _occlusion10160;
    } else {
        _TMP159 = 0.00000000E+000;
    } // end if
    _occlusion = _occlusion + _TMP159;
    _occlusion = _occlusion/1.60000000E+001;
    _occlusion = 1.00000000E+000 - _occlusion;
    _ret_0 = vec4(_occlusion, _occlusion, _occlusion, 1.00000000E+000);
    gl_FragColor = _ret_0;
    return;
} // main end
