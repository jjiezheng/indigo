// glslf output by Cg compiler
// cgc version 3.1.0013, build date Apr 18 2012
// command line args: -q -profile glslf
// source file: deferred_ssao.shader
//vendor NVIDIA Corporation
//version 3.1.0.13
//profile glslf
//program ps
//semantic Radius
//semantic NoiseScale
//semantic Kernel
//semantic Far
//semantic Near
//semantic NormalMap : TEXUNIT0
//semantic DepthMap : TEXUNIT1
//semantic NoiseMap : TEXUNIT2
//semantic Projection
//semantic ProjInv
//semantic NormalMatrix
//var float Radius :  : _Radius : -1 : 1
//var float2 NoiseScale :  : _NoiseScale : -1 : 1
//var float4 Kernel[0] :  : _Kernel[0] : -1 : 1
//var float4 Kernel[1] :  : _Kernel[1] : -1 : 1
//var float4 Kernel[2] :  : _Kernel[2] : -1 : 1
//var float4 Kernel[3] :  : _Kernel[3] : -1 : 1
//var float4 Kernel[4] :  : _Kernel[4] : -1 : 1
//var float4 Kernel[5] :  : _Kernel[5] : -1 : 1
//var float4 Kernel[6] :  : _Kernel[6] : -1 : 1
//var float4 Kernel[7] :  : _Kernel[7] : -1 : 1
//var float4 Kernel[8] :  : _Kernel[8] : -1 : 1
//var float4 Kernel[9] :  : _Kernel[9] : -1 : 1
//var float4 Kernel[10] :  : _Kernel[10] : -1 : 1
//var float4 Kernel[11] :  : _Kernel[11] : -1 : 1
//var float4 Kernel[12] :  : _Kernel[12] : -1 : 1
//var float4 Kernel[13] :  : _Kernel[13] : -1 : 1
//var float4 Kernel[14] :  : _Kernel[14] : -1 : 1
//var float4 Kernel[15] :  : _Kernel[15] : -1 : 1
//var float Far :  : _Far : -1 : 1
//var float Near :  : _Near : -1 : 1
//var sampler2D NormalMap : TEXUNIT0 : _NormalMap 0 : -1 : 1
//var sampler2D DepthMap : TEXUNIT1 : _DepthMap 1 : -1 : 1
//var sampler2D NoiseMap : TEXUNIT2 : _NoiseMap 2 : -1 : 1
//var float4x4 Projection :  : _Projection[0], 4 : -1 : 1
//var float4x4 ProjInv :  : _ProjInv[0], 4 : -1 : 1
//var float3x3 NormalMatrix :  : _NormalMatrix[0], 3 : -1 : 1
//var float2 texCoord : $vin.TEXCOORD0 : TEX0 : 1 : 1
//var float4 ps : $vout.COLOR0 : COL : -1 : 1

#version 110

struct VOutput {
    vec2 _texCoord3;
};

vec4 _ret_0;
float _TMP7;
float _TMP5;
float _TMP6;
vec4 _TMP4;
float _TMP3;
float _TMP9;
float _TMP8;
vec4 _TMP2;
vec4 _TMP1;
vec4 _normalData0024;
vec4 _unPackedNormal0024;
vec3 _r0028;
vec4 _r0044;
vec3 _v0058;
vec3 _r0066;
vec4 _r0068;
vec4 _v0068;
float _a0080;
uniform float _Radius;
uniform vec2 _NoiseScale;
uniform vec4 _Kernel[16];
uniform float _Far;
uniform float _Near;
uniform sampler2D _NormalMap;
uniform sampler2D _DepthMap;
uniform sampler2D _NoiseMap;
uniform vec4 _Projection[4];
uniform vec4 _ProjInv[4];
uniform vec3 _NormalMatrix[3];

 // main procedure, the original name was ps
void main()
{

    vec3 _normal;
    vec4 _positionScreen;
    vec4 _positionView;
    vec2 _noiseTexCoords;
    vec3 _tangent;
    vec3 _bitangent;
    float _occlusionContribution;
    vec3 _sample1;
    vec3 _sampleAtViewPosition1;
    float _sampleAtViewPositionZ1;
    vec4 _sampleScreen1;
    vec2 _sampleTexCoord1;
    float _rangeCheck1;
    float _occlusion;

    _normalData0024 = texture2D(_NormalMap, gl_TexCoord[0].xy);
    _unPackedNormal0024 = _normalData0024*2.00000000E+000 - 1.00000000E+000;
    _r0028.x = dot(_NormalMatrix[0], _unPackedNormal0024.xyz);
    _r0028.y = dot(_NormalMatrix[1], _unPackedNormal0024.xyz);
    _r0028.z = dot(_NormalMatrix[2], _unPackedNormal0024.xyz);
    _TMP8 = dot(_r0028, _r0028);
    _TMP9 = inversesqrt(_TMP8);
    _normal = _TMP9*_r0028;
    _TMP1 = texture2D(_DepthMap, gl_TexCoord[0].xy);
    _positionScreen.xy = gl_TexCoord[0].xy*2.00000000E+000 - 1.00000000E+000;
    _positionScreen.y = -_positionScreen.y;
    _positionScreen.z = _TMP1.x;
    _positionScreen.w = 1.00000000E+000;
    _r0044.x = dot(_ProjInv[0], _positionScreen);
    _r0044.y = dot(_ProjInv[1], _positionScreen);
    _r0044.z = dot(_ProjInv[2], _positionScreen);
    _r0044.w = dot(_ProjInv[3], _positionScreen);
    _positionView = _r0044/_r0044.w;
    _noiseTexCoords = gl_TexCoord[0].xy*_NoiseScale;
    _TMP2 = texture2D(_NoiseMap, _noiseTexCoords);
    _TMP3 = dot(_TMP2.xyz, _normal);
    _v0058 = _TMP2.xyz - _normal*_TMP3;
    _TMP8 = dot(_v0058, _v0058);
    _TMP9 = inversesqrt(_TMP8);
    _tangent = _TMP9*_v0058;
    _bitangent = _tangent.yzx*_normal.zxy - _tangent.zxy*_normal.yzx;
    _sample1 = _Kernel[0].xyz*_Radius;
    _r0066 = _sample1.x*_tangent;
    _r0066 = _r0066 + _sample1.y*_bitangent;
    _r0066 = _r0066 + _sample1.z*_normal;
    _sampleAtViewPosition1 = _positionView.xyz + _r0066;
    _sampleAtViewPositionZ1 = (-_sampleAtViewPosition1.z - _Near)/(_Far - _Near);
    _v0068 = vec4(_sampleAtViewPosition1.x, _sampleAtViewPosition1.y, _sampleAtViewPosition1.z, 1.00000000E+000);
    _r0068.x = dot(_Projection[0], _v0068);
    _r0068.y = dot(_Projection[1], _v0068);
    _r0068.z = dot(_Projection[2], _v0068);
    _r0068.w = dot(_Projection[3], _v0068);
    _sampleScreen1 = _r0068/_r0068.w;
    _sampleTexCoord1 = _sampleScreen1.xy*5.00000000E-001 + 5.00000000E-001;
    _sampleTexCoord1.y = 1.00000000E+000 - _sampleTexCoord1.y;
    _TMP4 = texture2D(_DepthMap, _sampleTexCoord1);
    _a0080 = _TMP1.y - _TMP4.y;
    _TMP6 = abs(_a0080);
    if (_TMP6 < _Radius*1.00000005E-003) { // if begin
        _TMP5 = 1.00000000E+000;
    } else {
        _TMP5 = 0.00000000E+000;
    } // end if
    _rangeCheck1 = float(_TMP5);
    if (_TMP4.y <= _sampleAtViewPositionZ1) { // if begin
        _TMP7 = 1.00000000E+000;
    } else {
        _TMP7 = 0.00000000E+000;
    } // end if
    _occlusionContribution = float(_TMP7)*_rangeCheck1;
    _sample1 = _Kernel[1].xyz*_Radius;
    _r0066 = _sample1.x*_tangent;
    _r0066 = _r0066 + _sample1.y*_bitangent;
    _r0066 = _r0066 + _sample1.z*_normal;
    _sampleAtViewPosition1 = _positionView.xyz + _r0066;
    _sampleAtViewPositionZ1 = (-_sampleAtViewPosition1.z - _Near)/(_Far - _Near);
    _v0068 = vec4(_sampleAtViewPosition1.x, _sampleAtViewPosition1.y, _sampleAtViewPosition1.z, 1.00000000E+000);
    _r0068.x = dot(_Projection[0], _v0068);
    _r0068.y = dot(_Projection[1], _v0068);
    _r0068.z = dot(_Projection[2], _v0068);
    _r0068.w = dot(_Projection[3], _v0068);
    _sampleScreen1 = _r0068/_r0068.w;
    _sampleTexCoord1 = _sampleScreen1.xy*5.00000000E-001 + 5.00000000E-001;
    _sampleTexCoord1.y = 1.00000000E+000 - _sampleTexCoord1.y;
    _TMP4 = texture2D(_DepthMap, _sampleTexCoord1);
    _a0080 = _TMP1.y - _TMP4.y;
    _TMP6 = abs(_a0080);
    if (_TMP6 < _Radius*1.00000005E-003) { // if begin
        _TMP5 = 1.00000000E+000;
    } else {
        _TMP5 = 0.00000000E+000;
    } // end if
    _rangeCheck1 = float(_TMP5);
    if (_TMP4.y <= _sampleAtViewPositionZ1) { // if begin
        _TMP7 = 1.00000000E+000;
    } else {
        _TMP7 = 0.00000000E+000;
    } // end if
    _occlusionContribution = _occlusionContribution + float(_TMP7)*_rangeCheck1;
    _sample1 = _Kernel[2].xyz*_Radius;
    _r0066 = _sample1.x*_tangent;
    _r0066 = _r0066 + _sample1.y*_bitangent;
    _r0066 = _r0066 + _sample1.z*_normal;
    _sampleAtViewPosition1 = _positionView.xyz + _r0066;
    _sampleAtViewPositionZ1 = (-_sampleAtViewPosition1.z - _Near)/(_Far - _Near);
    _v0068 = vec4(_sampleAtViewPosition1.x, _sampleAtViewPosition1.y, _sampleAtViewPosition1.z, 1.00000000E+000);
    _r0068.x = dot(_Projection[0], _v0068);
    _r0068.y = dot(_Projection[1], _v0068);
    _r0068.z = dot(_Projection[2], _v0068);
    _r0068.w = dot(_Projection[3], _v0068);
    _sampleScreen1 = _r0068/_r0068.w;
    _sampleTexCoord1 = _sampleScreen1.xy*5.00000000E-001 + 5.00000000E-001;
    _sampleTexCoord1.y = 1.00000000E+000 - _sampleTexCoord1.y;
    _TMP4 = texture2D(_DepthMap, _sampleTexCoord1);
    _a0080 = _TMP1.y - _TMP4.y;
    _TMP6 = abs(_a0080);
    if (_TMP6 < _Radius*1.00000005E-003) { // if begin
        _TMP5 = 1.00000000E+000;
    } else {
        _TMP5 = 0.00000000E+000;
    } // end if
    _rangeCheck1 = float(_TMP5);
    if (_TMP4.y <= _sampleAtViewPositionZ1) { // if begin
        _TMP7 = 1.00000000E+000;
    } else {
        _TMP7 = 0.00000000E+000;
    } // end if
    _occlusionContribution = _occlusionContribution + float(_TMP7)*_rangeCheck1;
    _sample1 = _Kernel[3].xyz*_Radius;
    _r0066 = _sample1.x*_tangent;
    _r0066 = _r0066 + _sample1.y*_bitangent;
    _r0066 = _r0066 + _sample1.z*_normal;
    _sampleAtViewPosition1 = _positionView.xyz + _r0066;
    _sampleAtViewPositionZ1 = (-_sampleAtViewPosition1.z - _Near)/(_Far - _Near);
    _v0068 = vec4(_sampleAtViewPosition1.x, _sampleAtViewPosition1.y, _sampleAtViewPosition1.z, 1.00000000E+000);
    _r0068.x = dot(_Projection[0], _v0068);
    _r0068.y = dot(_Projection[1], _v0068);
    _r0068.z = dot(_Projection[2], _v0068);
    _r0068.w = dot(_Projection[3], _v0068);
    _sampleScreen1 = _r0068/_r0068.w;
    _sampleTexCoord1 = _sampleScreen1.xy*5.00000000E-001 + 5.00000000E-001;
    _sampleTexCoord1.y = 1.00000000E+000 - _sampleTexCoord1.y;
    _TMP4 = texture2D(_DepthMap, _sampleTexCoord1);
    _a0080 = _TMP1.y - _TMP4.y;
    _TMP6 = abs(_a0080);
    if (_TMP6 < _Radius*1.00000005E-003) { // if begin
        _TMP5 = 1.00000000E+000;
    } else {
        _TMP5 = 0.00000000E+000;
    } // end if
    _rangeCheck1 = float(_TMP5);
    if (_TMP4.y <= _sampleAtViewPositionZ1) { // if begin
        _TMP7 = 1.00000000E+000;
    } else {
        _TMP7 = 0.00000000E+000;
    } // end if
    _occlusionContribution = _occlusionContribution + float(_TMP7)*_rangeCheck1;
    _sample1 = _Kernel[4].xyz*_Radius;
    _r0066 = _sample1.x*_tangent;
    _r0066 = _r0066 + _sample1.y*_bitangent;
    _r0066 = _r0066 + _sample1.z*_normal;
    _sampleAtViewPosition1 = _positionView.xyz + _r0066;
    _sampleAtViewPositionZ1 = (-_sampleAtViewPosition1.z - _Near)/(_Far - _Near);
    _v0068 = vec4(_sampleAtViewPosition1.x, _sampleAtViewPosition1.y, _sampleAtViewPosition1.z, 1.00000000E+000);
    _r0068.x = dot(_Projection[0], _v0068);
    _r0068.y = dot(_Projection[1], _v0068);
    _r0068.z = dot(_Projection[2], _v0068);
    _r0068.w = dot(_Projection[3], _v0068);
    _sampleScreen1 = _r0068/_r0068.w;
    _sampleTexCoord1 = _sampleScreen1.xy*5.00000000E-001 + 5.00000000E-001;
    _sampleTexCoord1.y = 1.00000000E+000 - _sampleTexCoord1.y;
    _TMP4 = texture2D(_DepthMap, _sampleTexCoord1);
    _a0080 = _TMP1.y - _TMP4.y;
    _TMP6 = abs(_a0080);
    if (_TMP6 < _Radius*1.00000005E-003) { // if begin
        _TMP5 = 1.00000000E+000;
    } else {
        _TMP5 = 0.00000000E+000;
    } // end if
    _rangeCheck1 = float(_TMP5);
    if (_TMP4.y <= _sampleAtViewPositionZ1) { // if begin
        _TMP7 = 1.00000000E+000;
    } else {
        _TMP7 = 0.00000000E+000;
    } // end if
    _occlusionContribution = _occlusionContribution + float(_TMP7)*_rangeCheck1;
    _sample1 = _Kernel[5].xyz*_Radius;
    _r0066 = _sample1.x*_tangent;
    _r0066 = _r0066 + _sample1.y*_bitangent;
    _r0066 = _r0066 + _sample1.z*_normal;
    _sampleAtViewPosition1 = _positionView.xyz + _r0066;
    _sampleAtViewPositionZ1 = (-_sampleAtViewPosition1.z - _Near)/(_Far - _Near);
    _v0068 = vec4(_sampleAtViewPosition1.x, _sampleAtViewPosition1.y, _sampleAtViewPosition1.z, 1.00000000E+000);
    _r0068.x = dot(_Projection[0], _v0068);
    _r0068.y = dot(_Projection[1], _v0068);
    _r0068.z = dot(_Projection[2], _v0068);
    _r0068.w = dot(_Projection[3], _v0068);
    _sampleScreen1 = _r0068/_r0068.w;
    _sampleTexCoord1 = _sampleScreen1.xy*5.00000000E-001 + 5.00000000E-001;
    _sampleTexCoord1.y = 1.00000000E+000 - _sampleTexCoord1.y;
    _TMP4 = texture2D(_DepthMap, _sampleTexCoord1);
    _a0080 = _TMP1.y - _TMP4.y;
    _TMP6 = abs(_a0080);
    if (_TMP6 < _Radius*1.00000005E-003) { // if begin
        _TMP5 = 1.00000000E+000;
    } else {
        _TMP5 = 0.00000000E+000;
    } // end if
    _rangeCheck1 = float(_TMP5);
    if (_TMP4.y <= _sampleAtViewPositionZ1) { // if begin
        _TMP7 = 1.00000000E+000;
    } else {
        _TMP7 = 0.00000000E+000;
    } // end if
    _occlusionContribution = _occlusionContribution + float(_TMP7)*_rangeCheck1;
    _sample1 = _Kernel[6].xyz*_Radius;
    _r0066 = _sample1.x*_tangent;
    _r0066 = _r0066 + _sample1.y*_bitangent;
    _r0066 = _r0066 + _sample1.z*_normal;
    _sampleAtViewPosition1 = _positionView.xyz + _r0066;
    _sampleAtViewPositionZ1 = (-_sampleAtViewPosition1.z - _Near)/(_Far - _Near);
    _v0068 = vec4(_sampleAtViewPosition1.x, _sampleAtViewPosition1.y, _sampleAtViewPosition1.z, 1.00000000E+000);
    _r0068.x = dot(_Projection[0], _v0068);
    _r0068.y = dot(_Projection[1], _v0068);
    _r0068.z = dot(_Projection[2], _v0068);
    _r0068.w = dot(_Projection[3], _v0068);
    _sampleScreen1 = _r0068/_r0068.w;
    _sampleTexCoord1 = _sampleScreen1.xy*5.00000000E-001 + 5.00000000E-001;
    _sampleTexCoord1.y = 1.00000000E+000 - _sampleTexCoord1.y;
    _TMP4 = texture2D(_DepthMap, _sampleTexCoord1);
    _a0080 = _TMP1.y - _TMP4.y;
    _TMP6 = abs(_a0080);
    if (_TMP6 < _Radius*1.00000005E-003) { // if begin
        _TMP5 = 1.00000000E+000;
    } else {
        _TMP5 = 0.00000000E+000;
    } // end if
    _rangeCheck1 = float(_TMP5);
    if (_TMP4.y <= _sampleAtViewPositionZ1) { // if begin
        _TMP7 = 1.00000000E+000;
    } else {
        _TMP7 = 0.00000000E+000;
    } // end if
    _occlusionContribution = _occlusionContribution + float(_TMP7)*_rangeCheck1;
    _sample1 = _Kernel[7].xyz*_Radius;
    _r0066 = _sample1.x*_tangent;
    _r0066 = _r0066 + _sample1.y*_bitangent;
    _r0066 = _r0066 + _sample1.z*_normal;
    _sampleAtViewPosition1 = _positionView.xyz + _r0066;
    _sampleAtViewPositionZ1 = (-_sampleAtViewPosition1.z - _Near)/(_Far - _Near);
    _v0068 = vec4(_sampleAtViewPosition1.x, _sampleAtViewPosition1.y, _sampleAtViewPosition1.z, 1.00000000E+000);
    _r0068.x = dot(_Projection[0], _v0068);
    _r0068.y = dot(_Projection[1], _v0068);
    _r0068.z = dot(_Projection[2], _v0068);
    _r0068.w = dot(_Projection[3], _v0068);
    _sampleScreen1 = _r0068/_r0068.w;
    _sampleTexCoord1 = _sampleScreen1.xy*5.00000000E-001 + 5.00000000E-001;
    _sampleTexCoord1.y = 1.00000000E+000 - _sampleTexCoord1.y;
    _TMP4 = texture2D(_DepthMap, _sampleTexCoord1);
    _a0080 = _TMP1.y - _TMP4.y;
    _TMP6 = abs(_a0080);
    if (_TMP6 < _Radius*1.00000005E-003) { // if begin
        _TMP5 = 1.00000000E+000;
    } else {
        _TMP5 = 0.00000000E+000;
    } // end if
    _rangeCheck1 = float(_TMP5);
    if (_TMP4.y <= _sampleAtViewPositionZ1) { // if begin
        _TMP7 = 1.00000000E+000;
    } else {
        _TMP7 = 0.00000000E+000;
    } // end if
    _occlusionContribution = _occlusionContribution + float(_TMP7)*_rangeCheck1;
    _sample1 = _Kernel[8].xyz*_Radius;
    _r0066 = _sample1.x*_tangent;
    _r0066 = _r0066 + _sample1.y*_bitangent;
    _r0066 = _r0066 + _sample1.z*_normal;
    _sampleAtViewPosition1 = _positionView.xyz + _r0066;
    _sampleAtViewPositionZ1 = (-_sampleAtViewPosition1.z - _Near)/(_Far - _Near);
    _v0068 = vec4(_sampleAtViewPosition1.x, _sampleAtViewPosition1.y, _sampleAtViewPosition1.z, 1.00000000E+000);
    _r0068.x = dot(_Projection[0], _v0068);
    _r0068.y = dot(_Projection[1], _v0068);
    _r0068.z = dot(_Projection[2], _v0068);
    _r0068.w = dot(_Projection[3], _v0068);
    _sampleScreen1 = _r0068/_r0068.w;
    _sampleTexCoord1 = _sampleScreen1.xy*5.00000000E-001 + 5.00000000E-001;
    _sampleTexCoord1.y = 1.00000000E+000 - _sampleTexCoord1.y;
    _TMP4 = texture2D(_DepthMap, _sampleTexCoord1);
    _a0080 = _TMP1.y - _TMP4.y;
    _TMP6 = abs(_a0080);
    if (_TMP6 < _Radius*1.00000005E-003) { // if begin
        _TMP5 = 1.00000000E+000;
    } else {
        _TMP5 = 0.00000000E+000;
    } // end if
    _rangeCheck1 = float(_TMP5);
    if (_TMP4.y <= _sampleAtViewPositionZ1) { // if begin
        _TMP7 = 1.00000000E+000;
    } else {
        _TMP7 = 0.00000000E+000;
    } // end if
    _occlusionContribution = _occlusionContribution + float(_TMP7)*_rangeCheck1;
    _sample1 = _Kernel[9].xyz*_Radius;
    _r0066 = _sample1.x*_tangent;
    _r0066 = _r0066 + _sample1.y*_bitangent;
    _r0066 = _r0066 + _sample1.z*_normal;
    _sampleAtViewPosition1 = _positionView.xyz + _r0066;
    _sampleAtViewPositionZ1 = (-_sampleAtViewPosition1.z - _Near)/(_Far - _Near);
    _v0068 = vec4(_sampleAtViewPosition1.x, _sampleAtViewPosition1.y, _sampleAtViewPosition1.z, 1.00000000E+000);
    _r0068.x = dot(_Projection[0], _v0068);
    _r0068.y = dot(_Projection[1], _v0068);
    _r0068.z = dot(_Projection[2], _v0068);
    _r0068.w = dot(_Projection[3], _v0068);
    _sampleScreen1 = _r0068/_r0068.w;
    _sampleTexCoord1 = _sampleScreen1.xy*5.00000000E-001 + 5.00000000E-001;
    _sampleTexCoord1.y = 1.00000000E+000 - _sampleTexCoord1.y;
    _TMP4 = texture2D(_DepthMap, _sampleTexCoord1);
    _a0080 = _TMP1.y - _TMP4.y;
    _TMP6 = abs(_a0080);
    if (_TMP6 < _Radius*1.00000005E-003) { // if begin
        _TMP5 = 1.00000000E+000;
    } else {
        _TMP5 = 0.00000000E+000;
    } // end if
    _rangeCheck1 = float(_TMP5);
    if (_TMP4.y <= _sampleAtViewPositionZ1) { // if begin
        _TMP7 = 1.00000000E+000;
    } else {
        _TMP7 = 0.00000000E+000;
    } // end if
    _occlusionContribution = _occlusionContribution + float(_TMP7)*_rangeCheck1;
    _sample1 = _Kernel[10].xyz*_Radius;
    _r0066 = _sample1.x*_tangent;
    _r0066 = _r0066 + _sample1.y*_bitangent;
    _r0066 = _r0066 + _sample1.z*_normal;
    _sampleAtViewPosition1 = _positionView.xyz + _r0066;
    _sampleAtViewPositionZ1 = (-_sampleAtViewPosition1.z - _Near)/(_Far - _Near);
    _v0068 = vec4(_sampleAtViewPosition1.x, _sampleAtViewPosition1.y, _sampleAtViewPosition1.z, 1.00000000E+000);
    _r0068.x = dot(_Projection[0], _v0068);
    _r0068.y = dot(_Projection[1], _v0068);
    _r0068.z = dot(_Projection[2], _v0068);
    _r0068.w = dot(_Projection[3], _v0068);
    _sampleScreen1 = _r0068/_r0068.w;
    _sampleTexCoord1 = _sampleScreen1.xy*5.00000000E-001 + 5.00000000E-001;
    _sampleTexCoord1.y = 1.00000000E+000 - _sampleTexCoord1.y;
    _TMP4 = texture2D(_DepthMap, _sampleTexCoord1);
    _a0080 = _TMP1.y - _TMP4.y;
    _TMP6 = abs(_a0080);
    if (_TMP6 < _Radius*1.00000005E-003) { // if begin
        _TMP5 = 1.00000000E+000;
    } else {
        _TMP5 = 0.00000000E+000;
    } // end if
    _rangeCheck1 = float(_TMP5);
    if (_TMP4.y <= _sampleAtViewPositionZ1) { // if begin
        _TMP7 = 1.00000000E+000;
    } else {
        _TMP7 = 0.00000000E+000;
    } // end if
    _occlusionContribution = _occlusionContribution + float(_TMP7)*_rangeCheck1;
    _sample1 = _Kernel[11].xyz*_Radius;
    _r0066 = _sample1.x*_tangent;
    _r0066 = _r0066 + _sample1.y*_bitangent;
    _r0066 = _r0066 + _sample1.z*_normal;
    _sampleAtViewPosition1 = _positionView.xyz + _r0066;
    _sampleAtViewPositionZ1 = (-_sampleAtViewPosition1.z - _Near)/(_Far - _Near);
    _v0068 = vec4(_sampleAtViewPosition1.x, _sampleAtViewPosition1.y, _sampleAtViewPosition1.z, 1.00000000E+000);
    _r0068.x = dot(_Projection[0], _v0068);
    _r0068.y = dot(_Projection[1], _v0068);
    _r0068.z = dot(_Projection[2], _v0068);
    _r0068.w = dot(_Projection[3], _v0068);
    _sampleScreen1 = _r0068/_r0068.w;
    _sampleTexCoord1 = _sampleScreen1.xy*5.00000000E-001 + 5.00000000E-001;
    _sampleTexCoord1.y = 1.00000000E+000 - _sampleTexCoord1.y;
    _TMP4 = texture2D(_DepthMap, _sampleTexCoord1);
    _a0080 = _TMP1.y - _TMP4.y;
    _TMP6 = abs(_a0080);
    if (_TMP6 < _Radius*1.00000005E-003) { // if begin
        _TMP5 = 1.00000000E+000;
    } else {
        _TMP5 = 0.00000000E+000;
    } // end if
    _rangeCheck1 = float(_TMP5);
    if (_TMP4.y <= _sampleAtViewPositionZ1) { // if begin
        _TMP7 = 1.00000000E+000;
    } else {
        _TMP7 = 0.00000000E+000;
    } // end if
    _occlusionContribution = _occlusionContribution + float(_TMP7)*_rangeCheck1;
    _sample1 = _Kernel[12].xyz*_Radius;
    _r0066 = _sample1.x*_tangent;
    _r0066 = _r0066 + _sample1.y*_bitangent;
    _r0066 = _r0066 + _sample1.z*_normal;
    _sampleAtViewPosition1 = _positionView.xyz + _r0066;
    _sampleAtViewPositionZ1 = (-_sampleAtViewPosition1.z - _Near)/(_Far - _Near);
    _v0068 = vec4(_sampleAtViewPosition1.x, _sampleAtViewPosition1.y, _sampleAtViewPosition1.z, 1.00000000E+000);
    _r0068.x = dot(_Projection[0], _v0068);
    _r0068.y = dot(_Projection[1], _v0068);
    _r0068.z = dot(_Projection[2], _v0068);
    _r0068.w = dot(_Projection[3], _v0068);
    _sampleScreen1 = _r0068/_r0068.w;
    _sampleTexCoord1 = _sampleScreen1.xy*5.00000000E-001 + 5.00000000E-001;
    _sampleTexCoord1.y = 1.00000000E+000 - _sampleTexCoord1.y;
    _TMP4 = texture2D(_DepthMap, _sampleTexCoord1);
    _a0080 = _TMP1.y - _TMP4.y;
    _TMP6 = abs(_a0080);
    if (_TMP6 < _Radius*1.00000005E-003) { // if begin
        _TMP5 = 1.00000000E+000;
    } else {
        _TMP5 = 0.00000000E+000;
    } // end if
    _rangeCheck1 = float(_TMP5);
    if (_TMP4.y <= _sampleAtViewPositionZ1) { // if begin
        _TMP7 = 1.00000000E+000;
    } else {
        _TMP7 = 0.00000000E+000;
    } // end if
    _occlusionContribution = _occlusionContribution + float(_TMP7)*_rangeCheck1;
    _sample1 = _Kernel[13].xyz*_Radius;
    _r0066 = _sample1.x*_tangent;
    _r0066 = _r0066 + _sample1.y*_bitangent;
    _r0066 = _r0066 + _sample1.z*_normal;
    _sampleAtViewPosition1 = _positionView.xyz + _r0066;
    _sampleAtViewPositionZ1 = (-_sampleAtViewPosition1.z - _Near)/(_Far - _Near);
    _v0068 = vec4(_sampleAtViewPosition1.x, _sampleAtViewPosition1.y, _sampleAtViewPosition1.z, 1.00000000E+000);
    _r0068.x = dot(_Projection[0], _v0068);
    _r0068.y = dot(_Projection[1], _v0068);
    _r0068.z = dot(_Projection[2], _v0068);
    _r0068.w = dot(_Projection[3], _v0068);
    _sampleScreen1 = _r0068/_r0068.w;
    _sampleTexCoord1 = _sampleScreen1.xy*5.00000000E-001 + 5.00000000E-001;
    _sampleTexCoord1.y = 1.00000000E+000 - _sampleTexCoord1.y;
    _TMP4 = texture2D(_DepthMap, _sampleTexCoord1);
    _a0080 = _TMP1.y - _TMP4.y;
    _TMP6 = abs(_a0080);
    if (_TMP6 < _Radius*1.00000005E-003) { // if begin
        _TMP5 = 1.00000000E+000;
    } else {
        _TMP5 = 0.00000000E+000;
    } // end if
    _rangeCheck1 = float(_TMP5);
    if (_TMP4.y <= _sampleAtViewPositionZ1) { // if begin
        _TMP7 = 1.00000000E+000;
    } else {
        _TMP7 = 0.00000000E+000;
    } // end if
    _occlusionContribution = _occlusionContribution + float(_TMP7)*_rangeCheck1;
    _sample1 = _Kernel[14].xyz*_Radius;
    _r0066 = _sample1.x*_tangent;
    _r0066 = _r0066 + _sample1.y*_bitangent;
    _r0066 = _r0066 + _sample1.z*_normal;
    _sampleAtViewPosition1 = _positionView.xyz + _r0066;
    _sampleAtViewPositionZ1 = (-_sampleAtViewPosition1.z - _Near)/(_Far - _Near);
    _v0068 = vec4(_sampleAtViewPosition1.x, _sampleAtViewPosition1.y, _sampleAtViewPosition1.z, 1.00000000E+000);
    _r0068.x = dot(_Projection[0], _v0068);
    _r0068.y = dot(_Projection[1], _v0068);
    _r0068.z = dot(_Projection[2], _v0068);
    _r0068.w = dot(_Projection[3], _v0068);
    _sampleScreen1 = _r0068/_r0068.w;
    _sampleTexCoord1 = _sampleScreen1.xy*5.00000000E-001 + 5.00000000E-001;
    _sampleTexCoord1.y = 1.00000000E+000 - _sampleTexCoord1.y;
    _TMP4 = texture2D(_DepthMap, _sampleTexCoord1);
    _a0080 = _TMP1.y - _TMP4.y;
    _TMP6 = abs(_a0080);
    if (_TMP6 < _Radius*1.00000005E-003) { // if begin
        _TMP5 = 1.00000000E+000;
    } else {
        _TMP5 = 0.00000000E+000;
    } // end if
    _rangeCheck1 = float(_TMP5);
    if (_TMP4.y <= _sampleAtViewPositionZ1) { // if begin
        _TMP7 = 1.00000000E+000;
    } else {
        _TMP7 = 0.00000000E+000;
    } // end if
    _occlusionContribution = _occlusionContribution + float(_TMP7)*_rangeCheck1;
    _sample1 = _Kernel[15].xyz*_Radius;
    _r0066 = _sample1.x*_tangent;
    _r0066 = _r0066 + _sample1.y*_bitangent;
    _r0066 = _r0066 + _sample1.z*_normal;
    _sampleAtViewPosition1 = _positionView.xyz + _r0066;
    _sampleAtViewPositionZ1 = (-_sampleAtViewPosition1.z - _Near)/(_Far - _Near);
    _v0068 = vec4(_sampleAtViewPosition1.x, _sampleAtViewPosition1.y, _sampleAtViewPosition1.z, 1.00000000E+000);
    _r0068.x = dot(_Projection[0], _v0068);
    _r0068.y = dot(_Projection[1], _v0068);
    _r0068.z = dot(_Projection[2], _v0068);
    _r0068.w = dot(_Projection[3], _v0068);
    _sampleScreen1 = _r0068/_r0068.w;
    _sampleTexCoord1 = _sampleScreen1.xy*5.00000000E-001 + 5.00000000E-001;
    _sampleTexCoord1.y = 1.00000000E+000 - _sampleTexCoord1.y;
    _TMP4 = texture2D(_DepthMap, _sampleTexCoord1);
    _a0080 = _TMP1.y - _TMP4.y;
    _TMP6 = abs(_a0080);
    if (_TMP6 < _Radius*1.00000005E-003) { // if begin
        _TMP5 = 1.00000000E+000;
    } else {
        _TMP5 = 0.00000000E+000;
    } // end if
    _rangeCheck1 = float(_TMP5);
    if (_TMP4.y <= _sampleAtViewPositionZ1) { // if begin
        _TMP7 = 1.00000000E+000;
    } else {
        _TMP7 = 0.00000000E+000;
    } // end if
    _occlusionContribution = _occlusionContribution + float(_TMP7)*_rangeCheck1;
    _occlusion = 1.00000000E+000 - _occlusionContribution/1.60000000E+001;
    _ret_0 = vec4(_occlusion, _occlusion, _occlusion, 1.00000000E+000);
    gl_FragColor = _ret_0;
    return;
} // main end
