// glslf output by Cg compiler
// cgc version 3.1.0013, build date Apr 18 2012
// command line args: -DGL=1 -DGL32=1 -q -profileopts version=130 -profile glslf
// source file: deferred_lighting_spot_light_shadow.cg
//vendor NVIDIA Corporation
//version 3.1.0.13
//profile glslf
//program ps
//semantic DepthMap : TEXUNIT0
//semantic NormalMap : TEXUNIT1
//semantic ShadowMap : TEXUNIT2
//semantic LightInnerAngle
//semantic LightOuterAngle
//semantic LightDecay
//semantic LightDistance
//semantic ShadowMapSize
//semantic LightDirection
//semantic LightPosition
//semantic LightColor
//semantic DirectionToLight
//semantic ViewerPosition
//semantic ViewProjInv
//semantic LightViewProj
//semantic LightViewProjInv
//semantic WorldViewProj
//semantic NormalMatrix
//var sampler2D DepthMap : TEXUNIT0 : _DepthMap 0 : -1 : 1
//var sampler2D NormalMap : TEXUNIT1 : _NormalMap 1 : -1 : 1
//var sampler2D ShadowMap : TEXUNIT2 : _ShadowMap 2 : -1 : 1
//var float LightInnerAngle :  : _LightInnerAngle : -1 : 1
//var float LightOuterAngle :  : _LightOuterAngle : -1 : 1
//var float LightDistance :  : _LightDistance : -1 : 1
//var float2 ShadowMapSize :  : _ShadowMapSize : -1 : 1
//var float3 LightDirection :  : _LightDirection : -1 : 1
//var float3 LightPosition :  : _LightPosition : -1 : 1
//var float3 LightColor :  : _LightColor : -1 : 1
//var float3 DirectionToLight :  : _DirectionToLight : -1 : 1
//var float3 ViewerPosition :  : _ViewerPosition : -1 : 1
//var float4x4 ViewProjInv :  : _ViewProjInv[0], 4 : -1 : 1
//var float4x4 LightViewProj :  : _LightViewProj[0], 4 : -1 : 1
//var float3 screenPosition : $vin.TEXCOORD0 : TEXCOORD0 : 1 : 1
//var float4 ps : $vout.COLOR0 : COLOR0 : -1 : 1

#version 130

struct VOutput {
    vec3 _screenPosition2;
};

float _TMP3;
float _TMP8;
float _TMP7;
float _TMP6;
float _TMP2;
float _TMP1;
float _TMP0;
vec4 _TMP5;
vec2 _tex0031;
vec4 _normalData0039;
vec4 _unPackedNormal0039;
vec4 _r0049;
vec3 _v0059;
float _TMP74;
float _x0083;
float _TMP84;
float _TMP94;
float _TMP110;
vec4 _r0117;
vec4 _v0117;
vec2 _tex0127;
float _shadowFactor0131;
float _sum0131;
float _y0131;
vec2 _shadowCoordOffset10131;
float _TMP132;
vec4 _coord0135;
vec4 _c0135;
uniform sampler2D _DepthMap;
uniform sampler2D _NormalMap;
uniform sampler2DShadow _ShadowMap;
uniform float _LightInnerAngle;
uniform float _LightOuterAngle;
uniform float _LightDistance;
uniform vec2 _ShadowMapSize;
uniform vec3 _LightDirection;
uniform vec3 _LightPosition;
uniform vec3 _LightColor;
uniform vec3 _DirectionToLight;
uniform vec3 _ViewerPosition;
uniform vec4 _ViewProjInv[4];
uniform vec4 _LightViewProj[4];
in vec4 cg_TexCoord0;
out vec4 cg_FragColor;

 // main procedure, the original name was ps
void main()
{

    vec2 _screenPositionClip;
    float _depth;
    vec3 _normal;
    vec4 _positionScreen;
    vec3 _positionWorld;
    vec4 _lightContribution;
    vec3 _pixelToLight;
    float _lightDirectionDot;
    float _diffuseStrength;
    float _lightOuterCos;
    float _lightInnerCos;
    vec3 _viewerDirectionUnNormalized1;
    vec3 _viewDirection1;
    vec3 _floatVectorRaw1;
    vec3 _pixelPositionFromLightNDC;

    _screenPositionClip = cg_TexCoord0.xy/cg_TexCoord0.z;
    _tex0031 = _screenPositionClip*5.00000000E-001 + 5.00000000E-001;
    _TMP5 = texture(_DepthMap, _tex0031);
    _depth = _TMP5.x*2.00000000E+000 - 1.00000000E+000;
    _normalData0039 = texture(_NormalMap, _tex0031);
    _unPackedNormal0039 = _normalData0039*2.00000000E+000 - 1.00000000E+000;
    _TMP6 = dot(_unPackedNormal0039.xyz, _unPackedNormal0039.xyz);
    _TMP7 = inversesqrt(_TMP6);
    _normal = _TMP7*_unPackedNormal0039.xyz;
    _positionScreen = vec4(_screenPositionClip.x, _screenPositionClip.y, _depth, 1.00000000E+000);
    _r0049.x = dot(_ViewProjInv[0], _positionScreen);
    _r0049.y = dot(_ViewProjInv[1], _positionScreen);
    _r0049.z = dot(_ViewProjInv[2], _positionScreen);
    _r0049.w = dot(_ViewProjInv[3], _positionScreen);
    _positionWorld = _r0049.xyz/_r0049.w;
    _lightContribution = vec4( 0.00000000E+000, 0.00000000E+000, 0.00000000E+000, 1.00000000E+000);
    _v0059 = _positionWorld - _LightPosition;
    _TMP6 = dot(_v0059, _v0059);
    _TMP7 = inversesqrt(_TMP6);
    _pixelToLight = _TMP7*_v0059;
    _lightDirectionDot = dot(_LightDirection, _pixelToLight);
    _diffuseStrength = 0.00000000E+000;
    _lightOuterCos = cos(_LightOuterAngle);
    _lightInnerCos = cos(_LightInnerAngle);
    if (_lightDirectionDot > _lightOuterCos) { // if begin
        _TMP0 = dot(_normal, _DirectionToLight);
        _TMP8 = min(1.00000000E+000, _TMP0);
        _TMP74 = max(0.00000000E+000, _TMP8);
        _x0083 = (_lightDirectionDot - _lightOuterCos)/(_lightInnerCos - _lightOuterCos);
        _TMP8 = min(1.00000000E+000, _x0083);
        _TMP84 = max(0.00000000E+000, _TMP8);
        _TMP1 = _TMP84*_TMP84*(3.00000000E+000 - 2.00000000E+000*_TMP84);
        _diffuseStrength = _TMP74*_TMP1;
    } // end if
    if (_lightDirectionDot > _lightInnerCos) { // if begin
        _TMP2 = dot(_normal, _DirectionToLight);
        _TMP8 = min(1.00000000E+000, _TMP2);
        _TMP94 = max(0.00000000E+000, _TMP8);
        _diffuseStrength = _TMP94;
    } // end if
    _lightContribution.xyz = _LightColor*_diffuseStrength*2.54999995E+000*_LightDistance;
    if (_diffuseStrength > 0.00000000E+000) { // if begin
        _viewerDirectionUnNormalized1 = _ViewerPosition - _positionWorld;
        _TMP6 = dot(_viewerDirectionUnNormalized1, _viewerDirectionUnNormalized1);
        _TMP7 = inversesqrt(_TMP6);
        _viewDirection1 = _TMP7*_viewerDirectionUnNormalized1;
        _floatVectorRaw1 = _DirectionToLight + _viewDirection1;
        _TMP3 = dot(_normal, _floatVectorRaw1);
        _TMP8 = min(1.00000000E+000, _TMP3);
        _TMP110 = max(0.00000000E+000, _TMP8);
        _lightContribution.w = _TMP110*_LightDistance;
    } // end if
    _v0117 = vec4(_positionWorld.x, _positionWorld.y, _positionWorld.z, 1.00000000E+000);
    _r0117.x = dot(_LightViewProj[0], _v0117);
    _r0117.y = dot(_LightViewProj[1], _v0117);
    _r0117.z = dot(_LightViewProj[2], _v0117);
    _r0117.w = dot(_LightViewProj[3], _v0117);
    _pixelPositionFromLightNDC = _r0117.xyz/_r0117.w;
    _tex0127 = _pixelPositionFromLightNDC.xy*5.00000000E-001 + 5.00000000E-001;
    _sum0131 = 0.00000000E+000;
    _y0131 = -1.50000000E+000;
    for (; _y0131 <= 1.50000000E+000; _y0131 = _y0131 + 1.00000000E+000) { // for begin
        _shadowCoordOffset10131 = _tex0127 + vec2(-1.50000000E+000*_ShadowMapSize.x, _y0131*_ShadowMapSize.y);
        _c0135 = vec4(_shadowCoordOffset10131.x, _shadowCoordOffset10131.y, _pixelPositionFromLightNDC.z*5.00000000E-001 + 5.00000000E-001, 1.00000000E+000);
        _coord0135.xy = _c0135.xy;
        _coord0135.z = _c0135.z;
        _coord0135.w = _c0135.w;
        _TMP132 = textureProj(_ShadowMap, _coord0135);
        _sum0131 = _sum0131 + _TMP132;
        _shadowCoordOffset10131 = _tex0127 + vec2(-5.00000000E-001*_ShadowMapSize.x, _y0131*_ShadowMapSize.y);
        _c0135 = vec4(_shadowCoordOffset10131.x, _shadowCoordOffset10131.y, _pixelPositionFromLightNDC.z*5.00000000E-001 + 5.00000000E-001, 1.00000000E+000);
        _coord0135.xy = _c0135.xy;
        _coord0135.z = _c0135.z;
        _coord0135.w = _c0135.w;
        _TMP132 = textureProj(_ShadowMap, _coord0135);
        _sum0131 = _sum0131 + _TMP132;
        _shadowCoordOffset10131 = _tex0127 + vec2(5.00000000E-001*_ShadowMapSize.x, _y0131*_ShadowMapSize.y);
        _c0135 = vec4(_shadowCoordOffset10131.x, _shadowCoordOffset10131.y, _pixelPositionFromLightNDC.z*5.00000000E-001 + 5.00000000E-001, 1.00000000E+000);
        _coord0135.xy = _c0135.xy;
        _coord0135.z = _c0135.z;
        _coord0135.w = _c0135.w;
        _TMP132 = textureProj(_ShadowMap, _coord0135);
        _sum0131 = _sum0131 + _TMP132;
        _shadowCoordOffset10131 = _tex0127 + vec2(1.50000000E+000*_ShadowMapSize.x, _y0131*_ShadowMapSize.y);
        _c0135 = vec4(_shadowCoordOffset10131.x, _shadowCoordOffset10131.y, _pixelPositionFromLightNDC.z*5.00000000E-001 + 5.00000000E-001, 1.00000000E+000);
        _coord0135.xy = _c0135.xy;
        _coord0135.z = _c0135.z;
        _coord0135.w = _c0135.w;
        _TMP132 = textureProj(_ShadowMap, _coord0135);
        _sum0131 = _sum0131 + _TMP132;
    } // end for
    _shadowFactor0131 = _sum0131/1.60000000E+001;
    _lightContribution = _lightContribution*_shadowFactor0131;
    cg_FragColor = _lightContribution;
    return;
} // main end
