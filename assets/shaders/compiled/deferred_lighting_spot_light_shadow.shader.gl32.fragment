// glslf output by Cg compiler
// cgc version 3.1.0013, build date Apr 18 2012
// command line args: -DGL=1 -DGL32=1 -q -profileopts version=130 -profile glslf
// source file: deferred_lighting_spot_light_shadow.cg
//vendor NVIDIA Corporation
//version 3.1.0.13
//profile glslf
//program ps
//semantic DepthMap : TEXUNIT0
//semantic NormalMap : TEXUNIT1
//semantic ShadowMap : TEXUNIT2
//semantic LightInnerAngle
//semantic LightOuterAngle
//semantic LightDecay
//semantic LightDistance
//semantic ShadowMapSize
//semantic LightDirection
//semantic LightPosition
//semantic LightColor
//semantic DirectionToLight
//semantic ViewerPosition
//semantic ViewProjInv
//semantic LightViewProj
//semantic LightViewProjInv
//semantic WorldViewProj
//semantic NormalMatrix
//var sampler2D DepthMap : TEXUNIT0 : _DepthMap 0 : -1 : 1
//var sampler2D NormalMap : TEXUNIT1 : _NormalMap 1 : -1 : 1
//var sampler2D ShadowMap : TEXUNIT2 : _ShadowMap 2 : -1 : 1
//var float LightInnerAngle :  : _LightInnerAngle : -1 : 1
//var float LightOuterAngle :  : _LightOuterAngle : -1 : 1
//var float LightDistance :  : _LightDistance : -1 : 1
//var float3 LightDirection :  : _LightDirection : -1 : 1
//var float3 LightPosition :  : _LightPosition : -1 : 1
//var float3 LightColor :  : _LightColor : -1 : 1
//var float3 DirectionToLight :  : _DirectionToLight : -1 : 1
//var float4x4 ViewProjInv :  : _ViewProjInv[0], 4 : -1 : 1
//var float4x4 LightViewProj :  : _LightViewProj[0], 4 : -1 : 1
//var float3 screenPosition : $vin.TEXCOORD0 : TEXCOORD0 : 1 : 1
//var float4 ps : $vout.COLOR0 : COLOR0 : -1 : 1

#version 130

struct VOutput {
    vec3 _screenPosition2;
};

vec4 _ret_0;
float _TMP9;
float _TMP8;
float _TMP7;
float _TMP2;
float _TMP1;
float _TMP0;
vec4 _TMP6;
vec4 _TMP5;
vec2 _texCoord0032;
vec3 _unPackedNormal0038;
vec4 _r0048;
vec3 _v0058;
float _TMP73;
float _x0082;
float _TMP83;
float _TMP93;
vec4 _r0116;
vec4 _v0116;
vec2 _texCoord0126;
uniform sampler2D _DepthMap;
uniform sampler2D _NormalMap;
uniform sampler2D _ShadowMap;
uniform float _LightInnerAngle;
uniform float _LightOuterAngle;
uniform float _LightDistance;
uniform vec3 _LightDirection;
uniform vec3 _LightPosition;
uniform vec3 _LightColor;
uniform vec3 _DirectionToLight;
uniform vec4 _ViewProjInv[4];
uniform vec4 _LightViewProj[4];
in vec4 cg_TexCoord0;
out vec4 cg_FragColor;

 // main procedure, the original name was ps
void main()
{

    vec2 _screenPositionClip;
    float _depth;
    vec3 _normal;
    vec4 _positionScreen;
    vec3 _positionWorld;
    vec4 _lightContribution;
    vec3 _pixelToLight;
    float _lightDirectionDot;
    float _diffuseStrength;
    float _lightOuterCos;
    float _lightInnerCos;
    vec3 _pixelPositionFromLightNDC;
    vec4 _moments;

    _screenPositionClip = cg_TexCoord0.xy/cg_TexCoord0.z;
    _texCoord0032 = _screenPositionClip*5.00000000E-001 + 5.00000000E-001;
    _TMP5 = texture(_DepthMap, _texCoord0032);
    _depth = _TMP5.x*2.00000000E+000 - 1.00000000E+000;
    _TMP6 = texture(_NormalMap, _texCoord0032);
    _unPackedNormal0038 = _TMP6.xyz*2.00000000E+000 - 1.00000000E+000;
    _TMP7 = dot(_unPackedNormal0038.xyz, _unPackedNormal0038.xyz);
    _TMP8 = inversesqrt(_TMP7);
    _normal = _TMP8*_unPackedNormal0038.xyz;
    _positionScreen = vec4(_screenPositionClip.x, _screenPositionClip.y, _depth, 1.00000000E+000);
    _r0048.x = dot(_ViewProjInv[0], _positionScreen);
    _r0048.y = dot(_ViewProjInv[1], _positionScreen);
    _r0048.z = dot(_ViewProjInv[2], _positionScreen);
    _r0048.w = dot(_ViewProjInv[3], _positionScreen);
    _positionWorld = _r0048.xyz/_r0048.w;
    _v0058 = _positionWorld - _LightPosition;
    _TMP7 = dot(_v0058, _v0058);
    _TMP8 = inversesqrt(_TMP7);
    _pixelToLight = _TMP8*_v0058;
    _lightDirectionDot = dot(_LightDirection, _pixelToLight);
    _diffuseStrength = 0.00000000E+000;
    _lightOuterCos = cos(_LightOuterAngle);
    _lightInnerCos = cos(_LightInnerAngle);
    if (_lightDirectionDot > _lightOuterCos) { // if begin
        _TMP0 = dot(_normal, _DirectionToLight);
        _TMP9 = min(1.00000000E+000, _TMP0);
        _TMP73 = max(0.00000000E+000, _TMP9);
        _x0082 = (_lightDirectionDot - _lightOuterCos)/(_lightInnerCos - _lightOuterCos);
        _TMP9 = min(1.00000000E+000, _x0082);
        _TMP83 = max(0.00000000E+000, _TMP9);
        _TMP1 = _TMP83*_TMP83*(3.00000000E+000 - 2.00000000E+000*_TMP83);
        _diffuseStrength = _TMP73*_TMP1;
    } // end if
    if (_lightDirectionDot > _lightInnerCos) { // if begin
        _TMP2 = dot(_normal, _DirectionToLight);
        _TMP9 = min(1.00000000E+000, _TMP2);
        _TMP93 = max(0.00000000E+000, _TMP9);
        _diffuseStrength = _TMP93;
    } // end if
    _lightContribution.xyz = _LightColor*_diffuseStrength*2.54999995E+000*_LightDistance;
    _v0116 = vec4(_positionWorld.x, _positionWorld.y, _positionWorld.z, 1.00000000E+000);
    _r0116.x = dot(_LightViewProj[0], _v0116);
    _r0116.y = dot(_LightViewProj[1], _v0116);
    _r0116.z = dot(_LightViewProj[2], _v0116);
    _r0116.w = dot(_LightViewProj[3], _v0116);
    _pixelPositionFromLightNDC = _r0116.xyz/_r0116.w;
    _texCoord0126 = _pixelPositionFromLightNDC.xy*5.00000000E-001 + 5.00000000E-001;
    _moments = texture(_ShadowMap, _texCoord0126);
    _ret_0 = vec4(_lightContribution.x, _moments.x, _moments.y, _pixelPositionFromLightNDC.z);
    cg_FragColor = _ret_0;
    return;
} // main end
