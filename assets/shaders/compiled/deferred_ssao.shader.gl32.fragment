// glslf output by Cg compiler
// cgc version 3.1.0013, build date Apr 18 2012
// command line args: -DGL=1 -DGL32=1 -q -profileopts version=130 -profile glslf
// source file: deferred_ssao.cg
//vendor NVIDIA Corporation
//version 3.1.0.13
//profile glslf
//program ps
//semantic HalfPixel
//semantic Radius
//semantic NoiseScale
//semantic Kernel
//semantic Far
//semantic Near
//semantic PositionMap : TEXUNIT0
//semantic NormalMap : TEXUNIT1
//semantic DepthMap : TEXUNIT2
//semantic NoiseMap : TEXUNIT3
//semantic Projection
//semantic ProjInv
//semantic ModelView
//semantic View
//semantic ViewInv
//semantic ViewProjInv
//var float Radius :  : _Radius : -1 : 1
//var float2 NoiseScale :  : _NoiseScale : -1 : 1
//var sampler2D PositionMap : TEXUNIT0 : _PositionMap 0 : -1 : 1
//var sampler2D NormalMap : TEXUNIT1 : _NormalMap 1 : -1 : 1
//var sampler2D NoiseMap : TEXUNIT3 : _NoiseMap 3 : -1 : 1
//var float2 texCoord : $vin.TEXCOORD0 : TEXCOORD0 : 1 : 1
//var float4 ps : $vout.COLOR0 : COLOR0 : -1 : 1

#version 130

struct VOutput {
    vec2 _texCoord3;
};

vec4 _ret_0;
float _TMP11;
float _TMP10;
float _TMP13;
float _TMP12;
vec2 _TMP4;
float _TMP9;
float _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec2 _c0036;
float _TMP43;
vec4 _samplePositionVS0044;
vec2 _sampleOffset0044;
vec3 _diff0044;
vec3 _v0044;
float _d0044;
float _occlusion10044;
vec2 _c0046;
float _b0058;
float _TMP61;
vec4 _samplePositionVS0062;
vec2 _sampleOffset0062;
vec3 _diff0062;
vec3 _v0062;
float _d0062;
float _occlusion10062;
vec2 _c0064;
float _b0076;
float _TMP79;
vec4 _samplePositionVS0080;
vec2 _sampleOffset0080;
vec3 _diff0080;
vec3 _v0080;
float _d0080;
float _occlusion10080;
vec2 _c0082;
float _b0094;
float _TMP97;
vec4 _samplePositionVS0098;
vec3 _diff0098;
vec3 _v0098;
float _d0098;
float _occlusion10098;
vec2 _c0100;
float _b0112;
uniform float _Radius;
uniform vec2 _NoiseScale;
uniform sampler2D _PositionMap;
uniform sampler2D _NormalMap;
uniform sampler2D _NoiseMap;
in vec4 cg_TexCoord0;
out vec4 cg_FragColor;

 // main procedure, the original name was ps
void main()
{

    vec4 _positionVS1;
    vec3 _random;
    float _rad;
    float _occlusion;
    vec2 _sampleOffset1;
    vec2 _coord21;

    _positionVS1 = texture(_PositionMap, cg_TexCoord0.xy);
    _TMP1 = texture(_NormalMap, cg_TexCoord0.xy);
    _c0036 = cg_TexCoord0.xy*_NoiseScale;
    _TMP2 = texture(_NoiseMap, _c0036);
    _random = _TMP2.xyz*2.00000000E+000 - 1.00000000E+000;
    _TMP3 = abs(_positionVS1.z);
    _rad = _Radius/_TMP3;
    _TMP9 = dot(_random.xy, vec2( 1.00000000E+000, 0.00000000E+000));
    _TMP4 = vec2( 1.00000000E+000, 0.00000000E+000) - (2.00000000E+000*_random.xy)*_TMP9;
    _sampleOffset1 = _TMP4*_rad;
    _coord21 = vec2(_sampleOffset1.x*7.07000017E-001 - _sampleOffset1.y*7.07000017E-001, _sampleOffset1.x*7.07000017E-001 + _sampleOffset1.y*7.07000017E-001);
    _sampleOffset0044 = _sampleOffset1*2.50000000E-001;
    _c0046 = cg_TexCoord0.xy + _sampleOffset0044;
    _samplePositionVS0044 = texture(_PositionMap, _c0046);
    _diff0044 = _samplePositionVS0044.xyz - _positionVS1.xyz;
    _TMP12 = dot(_diff0044, _diff0044);
    _TMP13 = inversesqrt(_TMP12);
    _v0044 = _TMP13*_diff0044;
    _d0044 = length(_diff0044);
    if (_d0044 < 1.00000001E-001) { // if begin
        _TMP10 = dot(_TMP1.xyz, _v0044);
        _b0058 = _TMP10*(1.00000000E+000 + _d0044);
        _TMP11 = max(0.00000000E+000, _b0058);
        _occlusion10044 = min(1.00000000E+000, _TMP11);
        _TMP43 = _occlusion10044;
    } else {
        _TMP43 = 0.00000000E+000;
    } // end if
    _sampleOffset0062 = _coord21*5.00000000E-001;
    _c0064 = cg_TexCoord0.xy + _sampleOffset0062;
    _samplePositionVS0062 = texture(_PositionMap, _c0064);
    _diff0062 = _samplePositionVS0062.xyz - _positionVS1.xyz;
    _TMP12 = dot(_diff0062, _diff0062);
    _TMP13 = inversesqrt(_TMP12);
    _v0062 = _TMP13*_diff0062;
    _d0062 = length(_diff0062);
    if (_d0062 < 1.00000001E-001) { // if begin
        _TMP10 = dot(_TMP1.xyz, _v0062);
        _b0076 = _TMP10*(1.00000000E+000 + _d0062);
        _TMP11 = max(0.00000000E+000, _b0076);
        _occlusion10062 = min(1.00000000E+000, _TMP11);
        _TMP61 = _occlusion10062;
    } else {
        _TMP61 = 0.00000000E+000;
    } // end if
    _occlusion = _TMP43 + _TMP61;
    _sampleOffset0080 = _sampleOffset1*7.50000000E-001;
    _c0082 = cg_TexCoord0.xy + _sampleOffset0080;
    _samplePositionVS0080 = texture(_PositionMap, _c0082);
    _diff0080 = _samplePositionVS0080.xyz - _positionVS1.xyz;
    _TMP12 = dot(_diff0080, _diff0080);
    _TMP13 = inversesqrt(_TMP12);
    _v0080 = _TMP13*_diff0080;
    _d0080 = length(_diff0080);
    if (_d0080 < 1.00000001E-001) { // if begin
        _TMP10 = dot(_TMP1.xyz, _v0080);
        _b0094 = _TMP10*(1.00000000E+000 + _d0080);
        _TMP11 = max(0.00000000E+000, _b0094);
        _occlusion10080 = min(1.00000000E+000, _TMP11);
        _TMP79 = _occlusion10080;
    } else {
        _TMP79 = 0.00000000E+000;
    } // end if
    _occlusion = _occlusion + _TMP79;
    _c0100 = cg_TexCoord0.xy + _coord21;
    _samplePositionVS0098 = texture(_PositionMap, _c0100);
    _diff0098 = _samplePositionVS0098.xyz - _positionVS1.xyz;
    _TMP12 = dot(_diff0098, _diff0098);
    _TMP13 = inversesqrt(_TMP12);
    _v0098 = _TMP13*_diff0098;
    _d0098 = length(_diff0098);
    if (_d0098 < 1.00000001E-001) { // if begin
        _TMP10 = dot(_TMP1.xyz, _v0098);
        _b0112 = _TMP10*(1.00000000E+000 + _d0098);
        _TMP11 = max(0.00000000E+000, _b0112);
        _occlusion10098 = min(1.00000000E+000, _TMP11);
        _TMP97 = _occlusion10098;
    } else {
        _TMP97 = 0.00000000E+000;
    } // end if
    _occlusion = _occlusion + _TMP97;
    _TMP9 = dot(_random.xy, vec2( -1.00000000E+000, 0.00000000E+000));
    _TMP4 = vec2( -1.00000000E+000, 0.00000000E+000) - (2.00000000E+000*_random.xy)*_TMP9;
    _sampleOffset1 = _TMP4*_rad;
    _coord21 = vec2(_sampleOffset1.x*7.07000017E-001 - _sampleOffset1.y*7.07000017E-001, _sampleOffset1.x*7.07000017E-001 + _sampleOffset1.y*7.07000017E-001);
    _sampleOffset0044 = _sampleOffset1*2.50000000E-001;
    _c0046 = cg_TexCoord0.xy + _sampleOffset0044;
    _samplePositionVS0044 = texture(_PositionMap, _c0046);
    _diff0044 = _samplePositionVS0044.xyz - _positionVS1.xyz;
    _TMP12 = dot(_diff0044, _diff0044);
    _TMP13 = inversesqrt(_TMP12);
    _v0044 = _TMP13*_diff0044;
    _d0044 = length(_diff0044);
    if (_d0044 < 1.00000001E-001) { // if begin
        _TMP10 = dot(_TMP1.xyz, _v0044);
        _b0058 = _TMP10*(1.00000000E+000 + _d0044);
        _TMP11 = max(0.00000000E+000, _b0058);
        _occlusion10044 = min(1.00000000E+000, _TMP11);
        _TMP43 = _occlusion10044;
    } else {
        _TMP43 = 0.00000000E+000;
    } // end if
    _occlusion = _occlusion + _TMP43;
    _sampleOffset0062 = _coord21*5.00000000E-001;
    _c0064 = cg_TexCoord0.xy + _sampleOffset0062;
    _samplePositionVS0062 = texture(_PositionMap, _c0064);
    _diff0062 = _samplePositionVS0062.xyz - _positionVS1.xyz;
    _TMP12 = dot(_diff0062, _diff0062);
    _TMP13 = inversesqrt(_TMP12);
    _v0062 = _TMP13*_diff0062;
    _d0062 = length(_diff0062);
    if (_d0062 < 1.00000001E-001) { // if begin
        _TMP10 = dot(_TMP1.xyz, _v0062);
        _b0076 = _TMP10*(1.00000000E+000 + _d0062);
        _TMP11 = max(0.00000000E+000, _b0076);
        _occlusion10062 = min(1.00000000E+000, _TMP11);
        _TMP61 = _occlusion10062;
    } else {
        _TMP61 = 0.00000000E+000;
    } // end if
    _occlusion = _occlusion + _TMP61;
    _sampleOffset0080 = _sampleOffset1*7.50000000E-001;
    _c0082 = cg_TexCoord0.xy + _sampleOffset0080;
    _samplePositionVS0080 = texture(_PositionMap, _c0082);
    _diff0080 = _samplePositionVS0080.xyz - _positionVS1.xyz;
    _TMP12 = dot(_diff0080, _diff0080);
    _TMP13 = inversesqrt(_TMP12);
    _v0080 = _TMP13*_diff0080;
    _d0080 = length(_diff0080);
    if (_d0080 < 1.00000001E-001) { // if begin
        _TMP10 = dot(_TMP1.xyz, _v0080);
        _b0094 = _TMP10*(1.00000000E+000 + _d0080);
        _TMP11 = max(0.00000000E+000, _b0094);
        _occlusion10080 = min(1.00000000E+000, _TMP11);
        _TMP79 = _occlusion10080;
    } else {
        _TMP79 = 0.00000000E+000;
    } // end if
    _occlusion = _occlusion + _TMP79;
    _c0100 = cg_TexCoord0.xy + _coord21;
    _samplePositionVS0098 = texture(_PositionMap, _c0100);
    _diff0098 = _samplePositionVS0098.xyz - _positionVS1.xyz;
    _TMP12 = dot(_diff0098, _diff0098);
    _TMP13 = inversesqrt(_TMP12);
    _v0098 = _TMP13*_diff0098;
    _d0098 = length(_diff0098);
    if (_d0098 < 1.00000001E-001) { // if begin
        _TMP10 = dot(_TMP1.xyz, _v0098);
        _b0112 = _TMP10*(1.00000000E+000 + _d0098);
        _TMP11 = max(0.00000000E+000, _b0112);
        _occlusion10098 = min(1.00000000E+000, _TMP11);
        _TMP97 = _occlusion10098;
    } else {
        _TMP97 = 0.00000000E+000;
    } // end if
    _occlusion = _occlusion + _TMP97;
    _TMP9 = dot(_random.xy, vec2( 0.00000000E+000, 1.00000000E+000));
    _TMP4 = vec2( 0.00000000E+000, 1.00000000E+000) - (2.00000000E+000*_random.xy)*_TMP9;
    _sampleOffset1 = _TMP4*_rad;
    _coord21 = vec2(_sampleOffset1.x*7.07000017E-001 - _sampleOffset1.y*7.07000017E-001, _sampleOffset1.x*7.07000017E-001 + _sampleOffset1.y*7.07000017E-001);
    _sampleOffset0044 = _sampleOffset1*2.50000000E-001;
    _c0046 = cg_TexCoord0.xy + _sampleOffset0044;
    _samplePositionVS0044 = texture(_PositionMap, _c0046);
    _diff0044 = _samplePositionVS0044.xyz - _positionVS1.xyz;
    _TMP12 = dot(_diff0044, _diff0044);
    _TMP13 = inversesqrt(_TMP12);
    _v0044 = _TMP13*_diff0044;
    _d0044 = length(_diff0044);
    if (_d0044 < 1.00000001E-001) { // if begin
        _TMP10 = dot(_TMP1.xyz, _v0044);
        _b0058 = _TMP10*(1.00000000E+000 + _d0044);
        _TMP11 = max(0.00000000E+000, _b0058);
        _occlusion10044 = min(1.00000000E+000, _TMP11);
        _TMP43 = _occlusion10044;
    } else {
        _TMP43 = 0.00000000E+000;
    } // end if
    _occlusion = _occlusion + _TMP43;
    _sampleOffset0062 = _coord21*5.00000000E-001;
    _c0064 = cg_TexCoord0.xy + _sampleOffset0062;
    _samplePositionVS0062 = texture(_PositionMap, _c0064);
    _diff0062 = _samplePositionVS0062.xyz - _positionVS1.xyz;
    _TMP12 = dot(_diff0062, _diff0062);
    _TMP13 = inversesqrt(_TMP12);
    _v0062 = _TMP13*_diff0062;
    _d0062 = length(_diff0062);
    if (_d0062 < 1.00000001E-001) { // if begin
        _TMP10 = dot(_TMP1.xyz, _v0062);
        _b0076 = _TMP10*(1.00000000E+000 + _d0062);
        _TMP11 = max(0.00000000E+000, _b0076);
        _occlusion10062 = min(1.00000000E+000, _TMP11);
        _TMP61 = _occlusion10062;
    } else {
        _TMP61 = 0.00000000E+000;
    } // end if
    _occlusion = _occlusion + _TMP61;
    _sampleOffset0080 = _sampleOffset1*7.50000000E-001;
    _c0082 = cg_TexCoord0.xy + _sampleOffset0080;
    _samplePositionVS0080 = texture(_PositionMap, _c0082);
    _diff0080 = _samplePositionVS0080.xyz - _positionVS1.xyz;
    _TMP12 = dot(_diff0080, _diff0080);
    _TMP13 = inversesqrt(_TMP12);
    _v0080 = _TMP13*_diff0080;
    _d0080 = length(_diff0080);
    if (_d0080 < 1.00000001E-001) { // if begin
        _TMP10 = dot(_TMP1.xyz, _v0080);
        _b0094 = _TMP10*(1.00000000E+000 + _d0080);
        _TMP11 = max(0.00000000E+000, _b0094);
        _occlusion10080 = min(1.00000000E+000, _TMP11);
        _TMP79 = _occlusion10080;
    } else {
        _TMP79 = 0.00000000E+000;
    } // end if
    _occlusion = _occlusion + _TMP79;
    _c0100 = cg_TexCoord0.xy + _coord21;
    _samplePositionVS0098 = texture(_PositionMap, _c0100);
    _diff0098 = _samplePositionVS0098.xyz - _positionVS1.xyz;
    _TMP12 = dot(_diff0098, _diff0098);
    _TMP13 = inversesqrt(_TMP12);
    _v0098 = _TMP13*_diff0098;
    _d0098 = length(_diff0098);
    if (_d0098 < 1.00000001E-001) { // if begin
        _TMP10 = dot(_TMP1.xyz, _v0098);
        _b0112 = _TMP10*(1.00000000E+000 + _d0098);
        _TMP11 = max(0.00000000E+000, _b0112);
        _occlusion10098 = min(1.00000000E+000, _TMP11);
        _TMP97 = _occlusion10098;
    } else {
        _TMP97 = 0.00000000E+000;
    } // end if
    _occlusion = _occlusion + _TMP97;
    _TMP9 = dot(_random.xy, vec2( 0.00000000E+000, -1.00000000E+000));
    _TMP4 = vec2( 0.00000000E+000, -1.00000000E+000) - (2.00000000E+000*_random.xy)*_TMP9;
    _sampleOffset1 = _TMP4*_rad;
    _coord21 = vec2(_sampleOffset1.x*7.07000017E-001 - _sampleOffset1.y*7.07000017E-001, _sampleOffset1.x*7.07000017E-001 + _sampleOffset1.y*7.07000017E-001);
    _sampleOffset0044 = _sampleOffset1*2.50000000E-001;
    _c0046 = cg_TexCoord0.xy + _sampleOffset0044;
    _samplePositionVS0044 = texture(_PositionMap, _c0046);
    _diff0044 = _samplePositionVS0044.xyz - _positionVS1.xyz;
    _TMP12 = dot(_diff0044, _diff0044);
    _TMP13 = inversesqrt(_TMP12);
    _v0044 = _TMP13*_diff0044;
    _d0044 = length(_diff0044);
    if (_d0044 < 1.00000001E-001) { // if begin
        _TMP10 = dot(_TMP1.xyz, _v0044);
        _b0058 = _TMP10*(1.00000000E+000 + _d0044);
        _TMP11 = max(0.00000000E+000, _b0058);
        _occlusion10044 = min(1.00000000E+000, _TMP11);
        _TMP43 = _occlusion10044;
    } else {
        _TMP43 = 0.00000000E+000;
    } // end if
    _occlusion = _occlusion + _TMP43;
    _sampleOffset0062 = _coord21*5.00000000E-001;
    _c0064 = cg_TexCoord0.xy + _sampleOffset0062;
    _samplePositionVS0062 = texture(_PositionMap, _c0064);
    _diff0062 = _samplePositionVS0062.xyz - _positionVS1.xyz;
    _TMP12 = dot(_diff0062, _diff0062);
    _TMP13 = inversesqrt(_TMP12);
    _v0062 = _TMP13*_diff0062;
    _d0062 = length(_diff0062);
    if (_d0062 < 1.00000001E-001) { // if begin
        _TMP10 = dot(_TMP1.xyz, _v0062);
        _b0076 = _TMP10*(1.00000000E+000 + _d0062);
        _TMP11 = max(0.00000000E+000, _b0076);
        _occlusion10062 = min(1.00000000E+000, _TMP11);
        _TMP61 = _occlusion10062;
    } else {
        _TMP61 = 0.00000000E+000;
    } // end if
    _occlusion = _occlusion + _TMP61;
    _sampleOffset0080 = _sampleOffset1*7.50000000E-001;
    _c0082 = cg_TexCoord0.xy + _sampleOffset0080;
    _samplePositionVS0080 = texture(_PositionMap, _c0082);
    _diff0080 = _samplePositionVS0080.xyz - _positionVS1.xyz;
    _TMP12 = dot(_diff0080, _diff0080);
    _TMP13 = inversesqrt(_TMP12);
    _v0080 = _TMP13*_diff0080;
    _d0080 = length(_diff0080);
    if (_d0080 < 1.00000001E-001) { // if begin
        _TMP10 = dot(_TMP1.xyz, _v0080);
        _b0094 = _TMP10*(1.00000000E+000 + _d0080);
        _TMP11 = max(0.00000000E+000, _b0094);
        _occlusion10080 = min(1.00000000E+000, _TMP11);
        _TMP79 = _occlusion10080;
    } else {
        _TMP79 = 0.00000000E+000;
    } // end if
    _occlusion = _occlusion + _TMP79;
    _c0100 = cg_TexCoord0.xy + _coord21;
    _samplePositionVS0098 = texture(_PositionMap, _c0100);
    _diff0098 = _samplePositionVS0098.xyz - _positionVS1.xyz;
    _TMP12 = dot(_diff0098, _diff0098);
    _TMP13 = inversesqrt(_TMP12);
    _v0098 = _TMP13*_diff0098;
    _d0098 = length(_diff0098);
    if (_d0098 < 1.00000001E-001) { // if begin
        _TMP10 = dot(_TMP1.xyz, _v0098);
        _b0112 = _TMP10*(1.00000000E+000 + _d0098);
        _TMP11 = max(0.00000000E+000, _b0112);
        _occlusion10098 = min(1.00000000E+000, _TMP11);
        _TMP97 = _occlusion10098;
    } else {
        _TMP97 = 0.00000000E+000;
    } // end if
    _occlusion = _occlusion + _TMP97;
    _occlusion = _occlusion/1.60000000E+001;
    _occlusion = 1.00000000E+000 - _occlusion;
    _ret_0 = vec4(_occlusion, _occlusion, _occlusion, 1.00000000E+000);
    cg_FragColor = _ret_0;
    return;
} // main end
