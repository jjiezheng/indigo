// glslf output by Cg compiler
// cgc version 3.1.0013, build date Apr 18 2012
// command line args: -DGL=1 -DGL32=1 -q -profileopts version=130 -profile glslf
// source file: deferred_ssao.cg
//vendor NVIDIA Corporation
//version 3.1.0.13
//profile glslf
//program ps
//semantic HalfPixel
//semantic Radius
//semantic NoiseScale
//semantic Kernel
//semantic Far
//semantic Near
//semantic NormalViewSpaceMap : TEXUNIT0
//semantic DepthMap : TEXUNIT1
//semantic NoiseMap : TEXUNIT2
//semantic Projection
//semantic ProjInv
//semantic ModelView
//semantic View
//var float Radius :  : _Radius : -1 : 1
//var float2 NoiseScale :  : _NoiseScale : -1 : 1
//var float4 Kernel[0] :  : _Kernel[0] : -1 : 1
//var float4 Kernel[1] :  : _Kernel[1] : -1 : 1
//var float4 Kernel[2] :  : _Kernel[2] : -1 : 1
//var float4 Kernel[3] :  : _Kernel[3] : -1 : 1
//var float4 Kernel[4] :  : _Kernel[4] : -1 : 1
//var float4 Kernel[5] :  : _Kernel[5] : -1 : 1
//var float4 Kernel[6] :  : _Kernel[6] : -1 : 1
//var float4 Kernel[7] :  : _Kernel[7] : -1 : 1
//var float4 Kernel[8] :  : _Kernel[8] : -1 : 1
//var float4 Kernel[9] :  : _Kernel[9] : -1 : 1
//var float4 Kernel[10] :  : _Kernel[10] : -1 : 1
//var float4 Kernel[11] :  : _Kernel[11] : -1 : 1
//var float4 Kernel[12] :  : _Kernel[12] : -1 : 1
//var float4 Kernel[13] :  : _Kernel[13] : -1 : 1
//var float4 Kernel[14] :  : _Kernel[14] : -1 : 1
//var float4 Kernel[15] :  : _Kernel[15] : -1 : 1
//var sampler2D NormalViewSpaceMap : TEXUNIT0 : _NormalViewSpaceMap 0 : -1 : 1
//var sampler2D DepthMap : TEXUNIT1 : _DepthMap 1 : -1 : 1
//var sampler2D NoiseMap : TEXUNIT2 : _NoiseMap 2 : -1 : 1
//var float4x4 Projection :  : _Projection[0], 4 : -1 : 1
//var float4x4 ProjInv :  : _ProjInv[0], 4 : -1 : 1
//var float2 texCoord : $vin.TEXCOORD0 : TEXCOORD0 : 1 : 1
//var float4 ps : $vout.COLOR0 : COLOR0 : -1 : 1

#version 130

struct VOutput {
    vec2 _texCoord6;
};

vec4 _ret_0;
vec4 _TMP5;
float _TMP2;
float _TMP4;
float _TMP3;
vec4 _TMP1;
vec4 _normalData0022;
vec4 _unPackedNormal0022;
vec4 _positionScreen0036;
vec4 _r0038;
vec3 _v0052;
vec3 _r0060;
vec4 _r0068;
vec4 _v0068;
vec2 _texCoord0078;
uniform float _Radius;
uniform vec2 _NoiseScale;
uniform vec4 _Kernel[16];
uniform sampler2D _NormalViewSpaceMap;
uniform sampler2D _DepthMap;
uniform sampler2D _NoiseMap;
uniform vec4 _Projection[4];
uniform vec4 _ProjInv[4];
in vec4 cg_TexCoord0;
out vec4 cg_FragColor;

 // main procedure, the original name was ps
void main()
{

    vec3 _normal;
    float _depth1;
    vec4 _positionView;
    vec2 _noiseTexCoords;
    vec3 _tangent;
    vec3 _bitangent;
    float _occlusionContribution;
    vec3 _sample1;
    vec3 _sampleAtViewPosition1;
    vec4 _sampleNDC1;
    float _sampleDepth1;
    float _occlusionFactor1;
    float _occlusion;

    _normalData0022 = texture(_NormalViewSpaceMap, cg_TexCoord0.xy);
    _unPackedNormal0022 = _normalData0022*2.00000000E+000 - 1.00000000E+000;
    _TMP3 = dot(_unPackedNormal0022.xyz, _unPackedNormal0022.xyz);
    _TMP4 = inversesqrt(_TMP3);
    _normal = _TMP4*_unPackedNormal0022.xyz;
    _TMP5 = texture(_DepthMap, cg_TexCoord0.xy);
    _depth1 = _TMP5.x*2.00000000E+000 - 1.00000000E+000;
    _positionScreen0036.xy = cg_TexCoord0.xy*2.00000000E+000 - 1.00000000E+000;
    _positionScreen0036.z = _depth1;
    _positionScreen0036.w = 1.00000000E+000;
    _r0038.x = dot(_ProjInv[0], _positionScreen0036);
    _r0038.y = dot(_ProjInv[1], _positionScreen0036);
    _r0038.z = dot(_ProjInv[2], _positionScreen0036);
    _r0038.w = dot(_ProjInv[3], _positionScreen0036);
    _positionView = _r0038/_r0038.w;
    _noiseTexCoords = cg_TexCoord0.xy*_NoiseScale;
    _TMP1 = texture(_NoiseMap, _noiseTexCoords);
    _TMP2 = dot(_TMP1.xyz, _normal);
    _v0052 = _TMP1.xyz - _normal*_TMP2;
    _TMP3 = dot(_v0052, _v0052);
    _TMP4 = inversesqrt(_TMP3);
    _tangent = _TMP4*_v0052;
    _bitangent = _tangent.yzx*_normal.zxy - _tangent.zxy*_normal.yzx;
    _r0060.x = dot(_tangent, _Kernel[0].xyz);
    _r0060.y = dot(_bitangent, _Kernel[0].xyz);
    _r0060.z = dot(_normal, _Kernel[0].xyz);
    _sample1 = _r0060*_Radius;
    _sampleAtViewPosition1 = _sample1 + _positionView.xyz;
    _v0068 = vec4(_sampleAtViewPosition1.x, _sampleAtViewPosition1.y, _sampleAtViewPosition1.z, 1.00000000E+000);
    _r0068.x = dot(_Projection[0], _v0068);
    _r0068.y = dot(_Projection[1], _v0068);
    _r0068.z = dot(_Projection[2], _v0068);
    _r0068.w = dot(_Projection[3], _v0068);
    _sampleNDC1 = _r0068/_r0068.w;
    _texCoord0078 = _sampleNDC1.xy*5.00000000E-001 + 5.00000000E-001;
    _TMP5 = texture(_DepthMap, _texCoord0078);
    _sampleDepth1 = _TMP5.x*2.00000000E+000 - 1.00000000E+000;
    _occlusionFactor1 = 1.00000000E+000;
    if (_sampleDepth1 < _depth1 && _positionView.z - _sampleDepth1 < _Radius) { // if begin
        _occlusionFactor1 = 5.00000000E-001;
    } // end if
    _occlusionContribution = _occlusionFactor1;
    _r0060.x = dot(_tangent, _Kernel[1].xyz);
    _r0060.y = dot(_bitangent, _Kernel[1].xyz);
    _r0060.z = dot(_normal, _Kernel[1].xyz);
    _sample1 = _r0060*_Radius;
    _sampleAtViewPosition1 = _sample1 + _positionView.xyz;
    _v0068 = vec4(_sampleAtViewPosition1.x, _sampleAtViewPosition1.y, _sampleAtViewPosition1.z, 1.00000000E+000);
    _r0068.x = dot(_Projection[0], _v0068);
    _r0068.y = dot(_Projection[1], _v0068);
    _r0068.z = dot(_Projection[2], _v0068);
    _r0068.w = dot(_Projection[3], _v0068);
    _sampleNDC1 = _r0068/_r0068.w;
    _texCoord0078 = _sampleNDC1.xy*5.00000000E-001 + 5.00000000E-001;
    _TMP5 = texture(_DepthMap, _texCoord0078);
    _sampleDepth1 = _TMP5.x*2.00000000E+000 - 1.00000000E+000;
    _occlusionFactor1 = 1.00000000E+000;
    if (_sampleDepth1 < _depth1 && _positionView.z - _sampleDepth1 < _Radius) { // if begin
        _occlusionFactor1 = 5.00000000E-001;
    } // end if
    _occlusionContribution = _occlusionContribution + _occlusionFactor1;
    _r0060.x = dot(_tangent, _Kernel[2].xyz);
    _r0060.y = dot(_bitangent, _Kernel[2].xyz);
    _r0060.z = dot(_normal, _Kernel[2].xyz);
    _sample1 = _r0060*_Radius;
    _sampleAtViewPosition1 = _sample1 + _positionView.xyz;
    _v0068 = vec4(_sampleAtViewPosition1.x, _sampleAtViewPosition1.y, _sampleAtViewPosition1.z, 1.00000000E+000);
    _r0068.x = dot(_Projection[0], _v0068);
    _r0068.y = dot(_Projection[1], _v0068);
    _r0068.z = dot(_Projection[2], _v0068);
    _r0068.w = dot(_Projection[3], _v0068);
    _sampleNDC1 = _r0068/_r0068.w;
    _texCoord0078 = _sampleNDC1.xy*5.00000000E-001 + 5.00000000E-001;
    _TMP5 = texture(_DepthMap, _texCoord0078);
    _sampleDepth1 = _TMP5.x*2.00000000E+000 - 1.00000000E+000;
    _occlusionFactor1 = 1.00000000E+000;
    if (_sampleDepth1 < _depth1 && _positionView.z - _sampleDepth1 < _Radius) { // if begin
        _occlusionFactor1 = 5.00000000E-001;
    } // end if
    _occlusionContribution = _occlusionContribution + _occlusionFactor1;
    _r0060.x = dot(_tangent, _Kernel[3].xyz);
    _r0060.y = dot(_bitangent, _Kernel[3].xyz);
    _r0060.z = dot(_normal, _Kernel[3].xyz);
    _sample1 = _r0060*_Radius;
    _sampleAtViewPosition1 = _sample1 + _positionView.xyz;
    _v0068 = vec4(_sampleAtViewPosition1.x, _sampleAtViewPosition1.y, _sampleAtViewPosition1.z, 1.00000000E+000);
    _r0068.x = dot(_Projection[0], _v0068);
    _r0068.y = dot(_Projection[1], _v0068);
    _r0068.z = dot(_Projection[2], _v0068);
    _r0068.w = dot(_Projection[3], _v0068);
    _sampleNDC1 = _r0068/_r0068.w;
    _texCoord0078 = _sampleNDC1.xy*5.00000000E-001 + 5.00000000E-001;
    _TMP5 = texture(_DepthMap, _texCoord0078);
    _sampleDepth1 = _TMP5.x*2.00000000E+000 - 1.00000000E+000;
    _occlusionFactor1 = 1.00000000E+000;
    if (_sampleDepth1 < _depth1 && _positionView.z - _sampleDepth1 < _Radius) { // if begin
        _occlusionFactor1 = 5.00000000E-001;
    } // end if
    _occlusionContribution = _occlusionContribution + _occlusionFactor1;
    _r0060.x = dot(_tangent, _Kernel[4].xyz);
    _r0060.y = dot(_bitangent, _Kernel[4].xyz);
    _r0060.z = dot(_normal, _Kernel[4].xyz);
    _sample1 = _r0060*_Radius;
    _sampleAtViewPosition1 = _sample1 + _positionView.xyz;
    _v0068 = vec4(_sampleAtViewPosition1.x, _sampleAtViewPosition1.y, _sampleAtViewPosition1.z, 1.00000000E+000);
    _r0068.x = dot(_Projection[0], _v0068);
    _r0068.y = dot(_Projection[1], _v0068);
    _r0068.z = dot(_Projection[2], _v0068);
    _r0068.w = dot(_Projection[3], _v0068);
    _sampleNDC1 = _r0068/_r0068.w;
    _texCoord0078 = _sampleNDC1.xy*5.00000000E-001 + 5.00000000E-001;
    _TMP5 = texture(_DepthMap, _texCoord0078);
    _sampleDepth1 = _TMP5.x*2.00000000E+000 - 1.00000000E+000;
    _occlusionFactor1 = 1.00000000E+000;
    if (_sampleDepth1 < _depth1 && _positionView.z - _sampleDepth1 < _Radius) { // if begin
        _occlusionFactor1 = 5.00000000E-001;
    } // end if
    _occlusionContribution = _occlusionContribution + _occlusionFactor1;
    _r0060.x = dot(_tangent, _Kernel[5].xyz);
    _r0060.y = dot(_bitangent, _Kernel[5].xyz);
    _r0060.z = dot(_normal, _Kernel[5].xyz);
    _sample1 = _r0060*_Radius;
    _sampleAtViewPosition1 = _sample1 + _positionView.xyz;
    _v0068 = vec4(_sampleAtViewPosition1.x, _sampleAtViewPosition1.y, _sampleAtViewPosition1.z, 1.00000000E+000);
    _r0068.x = dot(_Projection[0], _v0068);
    _r0068.y = dot(_Projection[1], _v0068);
    _r0068.z = dot(_Projection[2], _v0068);
    _r0068.w = dot(_Projection[3], _v0068);
    _sampleNDC1 = _r0068/_r0068.w;
    _texCoord0078 = _sampleNDC1.xy*5.00000000E-001 + 5.00000000E-001;
    _TMP5 = texture(_DepthMap, _texCoord0078);
    _sampleDepth1 = _TMP5.x*2.00000000E+000 - 1.00000000E+000;
    _occlusionFactor1 = 1.00000000E+000;
    if (_sampleDepth1 < _depth1 && _positionView.z - _sampleDepth1 < _Radius) { // if begin
        _occlusionFactor1 = 5.00000000E-001;
    } // end if
    _occlusionContribution = _occlusionContribution + _occlusionFactor1;
    _r0060.x = dot(_tangent, _Kernel[6].xyz);
    _r0060.y = dot(_bitangent, _Kernel[6].xyz);
    _r0060.z = dot(_normal, _Kernel[6].xyz);
    _sample1 = _r0060*_Radius;
    _sampleAtViewPosition1 = _sample1 + _positionView.xyz;
    _v0068 = vec4(_sampleAtViewPosition1.x, _sampleAtViewPosition1.y, _sampleAtViewPosition1.z, 1.00000000E+000);
    _r0068.x = dot(_Projection[0], _v0068);
    _r0068.y = dot(_Projection[1], _v0068);
    _r0068.z = dot(_Projection[2], _v0068);
    _r0068.w = dot(_Projection[3], _v0068);
    _sampleNDC1 = _r0068/_r0068.w;
    _texCoord0078 = _sampleNDC1.xy*5.00000000E-001 + 5.00000000E-001;
    _TMP5 = texture(_DepthMap, _texCoord0078);
    _sampleDepth1 = _TMP5.x*2.00000000E+000 - 1.00000000E+000;
    _occlusionFactor1 = 1.00000000E+000;
    if (_sampleDepth1 < _depth1 && _positionView.z - _sampleDepth1 < _Radius) { // if begin
        _occlusionFactor1 = 5.00000000E-001;
    } // end if
    _occlusionContribution = _occlusionContribution + _occlusionFactor1;
    _r0060.x = dot(_tangent, _Kernel[7].xyz);
    _r0060.y = dot(_bitangent, _Kernel[7].xyz);
    _r0060.z = dot(_normal, _Kernel[7].xyz);
    _sample1 = _r0060*_Radius;
    _sampleAtViewPosition1 = _sample1 + _positionView.xyz;
    _v0068 = vec4(_sampleAtViewPosition1.x, _sampleAtViewPosition1.y, _sampleAtViewPosition1.z, 1.00000000E+000);
    _r0068.x = dot(_Projection[0], _v0068);
    _r0068.y = dot(_Projection[1], _v0068);
    _r0068.z = dot(_Projection[2], _v0068);
    _r0068.w = dot(_Projection[3], _v0068);
    _sampleNDC1 = _r0068/_r0068.w;
    _texCoord0078 = _sampleNDC1.xy*5.00000000E-001 + 5.00000000E-001;
    _TMP5 = texture(_DepthMap, _texCoord0078);
    _sampleDepth1 = _TMP5.x*2.00000000E+000 - 1.00000000E+000;
    _occlusionFactor1 = 1.00000000E+000;
    if (_sampleDepth1 < _depth1 && _positionView.z - _sampleDepth1 < _Radius) { // if begin
        _occlusionFactor1 = 5.00000000E-001;
    } // end if
    _occlusionContribution = _occlusionContribution + _occlusionFactor1;
    _r0060.x = dot(_tangent, _Kernel[8].xyz);
    _r0060.y = dot(_bitangent, _Kernel[8].xyz);
    _r0060.z = dot(_normal, _Kernel[8].xyz);
    _sample1 = _r0060*_Radius;
    _sampleAtViewPosition1 = _sample1 + _positionView.xyz;
    _v0068 = vec4(_sampleAtViewPosition1.x, _sampleAtViewPosition1.y, _sampleAtViewPosition1.z, 1.00000000E+000);
    _r0068.x = dot(_Projection[0], _v0068);
    _r0068.y = dot(_Projection[1], _v0068);
    _r0068.z = dot(_Projection[2], _v0068);
    _r0068.w = dot(_Projection[3], _v0068);
    _sampleNDC1 = _r0068/_r0068.w;
    _texCoord0078 = _sampleNDC1.xy*5.00000000E-001 + 5.00000000E-001;
    _TMP5 = texture(_DepthMap, _texCoord0078);
    _sampleDepth1 = _TMP5.x*2.00000000E+000 - 1.00000000E+000;
    _occlusionFactor1 = 1.00000000E+000;
    if (_sampleDepth1 < _depth1 && _positionView.z - _sampleDepth1 < _Radius) { // if begin
        _occlusionFactor1 = 5.00000000E-001;
    } // end if
    _occlusionContribution = _occlusionContribution + _occlusionFactor1;
    _r0060.x = dot(_tangent, _Kernel[9].xyz);
    _r0060.y = dot(_bitangent, _Kernel[9].xyz);
    _r0060.z = dot(_normal, _Kernel[9].xyz);
    _sample1 = _r0060*_Radius;
    _sampleAtViewPosition1 = _sample1 + _positionView.xyz;
    _v0068 = vec4(_sampleAtViewPosition1.x, _sampleAtViewPosition1.y, _sampleAtViewPosition1.z, 1.00000000E+000);
    _r0068.x = dot(_Projection[0], _v0068);
    _r0068.y = dot(_Projection[1], _v0068);
    _r0068.z = dot(_Projection[2], _v0068);
    _r0068.w = dot(_Projection[3], _v0068);
    _sampleNDC1 = _r0068/_r0068.w;
    _texCoord0078 = _sampleNDC1.xy*5.00000000E-001 + 5.00000000E-001;
    _TMP5 = texture(_DepthMap, _texCoord0078);
    _sampleDepth1 = _TMP5.x*2.00000000E+000 - 1.00000000E+000;
    _occlusionFactor1 = 1.00000000E+000;
    if (_sampleDepth1 < _depth1 && _positionView.z - _sampleDepth1 < _Radius) { // if begin
        _occlusionFactor1 = 5.00000000E-001;
    } // end if
    _occlusionContribution = _occlusionContribution + _occlusionFactor1;
    _r0060.x = dot(_tangent, _Kernel[10].xyz);
    _r0060.y = dot(_bitangent, _Kernel[10].xyz);
    _r0060.z = dot(_normal, _Kernel[10].xyz);
    _sample1 = _r0060*_Radius;
    _sampleAtViewPosition1 = _sample1 + _positionView.xyz;
    _v0068 = vec4(_sampleAtViewPosition1.x, _sampleAtViewPosition1.y, _sampleAtViewPosition1.z, 1.00000000E+000);
    _r0068.x = dot(_Projection[0], _v0068);
    _r0068.y = dot(_Projection[1], _v0068);
    _r0068.z = dot(_Projection[2], _v0068);
    _r0068.w = dot(_Projection[3], _v0068);
    _sampleNDC1 = _r0068/_r0068.w;
    _texCoord0078 = _sampleNDC1.xy*5.00000000E-001 + 5.00000000E-001;
    _TMP5 = texture(_DepthMap, _texCoord0078);
    _sampleDepth1 = _TMP5.x*2.00000000E+000 - 1.00000000E+000;
    _occlusionFactor1 = 1.00000000E+000;
    if (_sampleDepth1 < _depth1 && _positionView.z - _sampleDepth1 < _Radius) { // if begin
        _occlusionFactor1 = 5.00000000E-001;
    } // end if
    _occlusionContribution = _occlusionContribution + _occlusionFactor1;
    _r0060.x = dot(_tangent, _Kernel[11].xyz);
    _r0060.y = dot(_bitangent, _Kernel[11].xyz);
    _r0060.z = dot(_normal, _Kernel[11].xyz);
    _sample1 = _r0060*_Radius;
    _sampleAtViewPosition1 = _sample1 + _positionView.xyz;
    _v0068 = vec4(_sampleAtViewPosition1.x, _sampleAtViewPosition1.y, _sampleAtViewPosition1.z, 1.00000000E+000);
    _r0068.x = dot(_Projection[0], _v0068);
    _r0068.y = dot(_Projection[1], _v0068);
    _r0068.z = dot(_Projection[2], _v0068);
    _r0068.w = dot(_Projection[3], _v0068);
    _sampleNDC1 = _r0068/_r0068.w;
    _texCoord0078 = _sampleNDC1.xy*5.00000000E-001 + 5.00000000E-001;
    _TMP5 = texture(_DepthMap, _texCoord0078);
    _sampleDepth1 = _TMP5.x*2.00000000E+000 - 1.00000000E+000;
    _occlusionFactor1 = 1.00000000E+000;
    if (_sampleDepth1 < _depth1 && _positionView.z - _sampleDepth1 < _Radius) { // if begin
        _occlusionFactor1 = 5.00000000E-001;
    } // end if
    _occlusionContribution = _occlusionContribution + _occlusionFactor1;
    _r0060.x = dot(_tangent, _Kernel[12].xyz);
    _r0060.y = dot(_bitangent, _Kernel[12].xyz);
    _r0060.z = dot(_normal, _Kernel[12].xyz);
    _sample1 = _r0060*_Radius;
    _sampleAtViewPosition1 = _sample1 + _positionView.xyz;
    _v0068 = vec4(_sampleAtViewPosition1.x, _sampleAtViewPosition1.y, _sampleAtViewPosition1.z, 1.00000000E+000);
    _r0068.x = dot(_Projection[0], _v0068);
    _r0068.y = dot(_Projection[1], _v0068);
    _r0068.z = dot(_Projection[2], _v0068);
    _r0068.w = dot(_Projection[3], _v0068);
    _sampleNDC1 = _r0068/_r0068.w;
    _texCoord0078 = _sampleNDC1.xy*5.00000000E-001 + 5.00000000E-001;
    _TMP5 = texture(_DepthMap, _texCoord0078);
    _sampleDepth1 = _TMP5.x*2.00000000E+000 - 1.00000000E+000;
    _occlusionFactor1 = 1.00000000E+000;
    if (_sampleDepth1 < _depth1 && _positionView.z - _sampleDepth1 < _Radius) { // if begin
        _occlusionFactor1 = 5.00000000E-001;
    } // end if
    _occlusionContribution = _occlusionContribution + _occlusionFactor1;
    _r0060.x = dot(_tangent, _Kernel[13].xyz);
    _r0060.y = dot(_bitangent, _Kernel[13].xyz);
    _r0060.z = dot(_normal, _Kernel[13].xyz);
    _sample1 = _r0060*_Radius;
    _sampleAtViewPosition1 = _sample1 + _positionView.xyz;
    _v0068 = vec4(_sampleAtViewPosition1.x, _sampleAtViewPosition1.y, _sampleAtViewPosition1.z, 1.00000000E+000);
    _r0068.x = dot(_Projection[0], _v0068);
    _r0068.y = dot(_Projection[1], _v0068);
    _r0068.z = dot(_Projection[2], _v0068);
    _r0068.w = dot(_Projection[3], _v0068);
    _sampleNDC1 = _r0068/_r0068.w;
    _texCoord0078 = _sampleNDC1.xy*5.00000000E-001 + 5.00000000E-001;
    _TMP5 = texture(_DepthMap, _texCoord0078);
    _sampleDepth1 = _TMP5.x*2.00000000E+000 - 1.00000000E+000;
    _occlusionFactor1 = 1.00000000E+000;
    if (_sampleDepth1 < _depth1 && _positionView.z - _sampleDepth1 < _Radius) { // if begin
        _occlusionFactor1 = 5.00000000E-001;
    } // end if
    _occlusionContribution = _occlusionContribution + _occlusionFactor1;
    _r0060.x = dot(_tangent, _Kernel[14].xyz);
    _r0060.y = dot(_bitangent, _Kernel[14].xyz);
    _r0060.z = dot(_normal, _Kernel[14].xyz);
    _sample1 = _r0060*_Radius;
    _sampleAtViewPosition1 = _sample1 + _positionView.xyz;
    _v0068 = vec4(_sampleAtViewPosition1.x, _sampleAtViewPosition1.y, _sampleAtViewPosition1.z, 1.00000000E+000);
    _r0068.x = dot(_Projection[0], _v0068);
    _r0068.y = dot(_Projection[1], _v0068);
    _r0068.z = dot(_Projection[2], _v0068);
    _r0068.w = dot(_Projection[3], _v0068);
    _sampleNDC1 = _r0068/_r0068.w;
    _texCoord0078 = _sampleNDC1.xy*5.00000000E-001 + 5.00000000E-001;
    _TMP5 = texture(_DepthMap, _texCoord0078);
    _sampleDepth1 = _TMP5.x*2.00000000E+000 - 1.00000000E+000;
    _occlusionFactor1 = 1.00000000E+000;
    if (_sampleDepth1 < _depth1 && _positionView.z - _sampleDepth1 < _Radius) { // if begin
        _occlusionFactor1 = 5.00000000E-001;
    } // end if
    _occlusionContribution = _occlusionContribution + _occlusionFactor1;
    _r0060.x = dot(_tangent, _Kernel[15].xyz);
    _r0060.y = dot(_bitangent, _Kernel[15].xyz);
    _r0060.z = dot(_normal, _Kernel[15].xyz);
    _sample1 = _r0060*_Radius;
    _sampleAtViewPosition1 = _sample1 + _positionView.xyz;
    _v0068 = vec4(_sampleAtViewPosition1.x, _sampleAtViewPosition1.y, _sampleAtViewPosition1.z, 1.00000000E+000);
    _r0068.x = dot(_Projection[0], _v0068);
    _r0068.y = dot(_Projection[1], _v0068);
    _r0068.z = dot(_Projection[2], _v0068);
    _r0068.w = dot(_Projection[3], _v0068);
    _sampleNDC1 = _r0068/_r0068.w;
    _texCoord0078 = _sampleNDC1.xy*5.00000000E-001 + 5.00000000E-001;
    _TMP5 = texture(_DepthMap, _texCoord0078);
    _sampleDepth1 = _TMP5.x*2.00000000E+000 - 1.00000000E+000;
    _occlusionFactor1 = 1.00000000E+000;
    if (_sampleDepth1 < _depth1 && _positionView.z - _sampleDepth1 < _Radius) { // if begin
        _occlusionFactor1 = 5.00000000E-001;
    } // end if
    _occlusionContribution = _occlusionContribution + _occlusionFactor1;
    _occlusion = _occlusionContribution/1.60000000E+001;
    _ret_0 = vec4(_occlusion, _occlusion, _occlusion, 1.00000000E+000);
    cg_FragColor = _ret_0;
    return;
} // main end
