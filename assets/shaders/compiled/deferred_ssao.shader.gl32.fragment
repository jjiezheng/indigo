// glslf output by Cg compiler
// cgc version 3.1.0013, build date Apr 18 2012
// command line args: -DGL=1 -DGL32=1 -q -profileopts version=130 -profile glslf
// source file: deferred_ssao.cg
//vendor NVIDIA Corporation
//version 3.1.0.13
//profile glslf
//program ps
//semantic HalfPixel
//semantic Radius
//semantic NoiseScale
//semantic Kernel
//semantic Far
//semantic Near
//semantic ProjInv
//semantic Projection
//semantic LinearDepthMap : TEXUNIT0
//semantic NormalMap : TEXUNIT1
//semantic NoiseMap : TEXUNIT2
//var float Radius :  : _Radius : -1 : 1
//var float2 NoiseScale :  : _NoiseScale : -1 : 1
//var float Far :  : _Far : -1 : 1
//var float4x4 ProjInv :  : _ProjInv[0], 4 : -1 : 1
//var float4x4 Projection :  : _Projection[0], 4 : -1 : 1
//var sampler2D LinearDepthMap : TEXUNIT0 : _LinearDepthMap 0 : -1 : 1
//var sampler2D NormalMap : TEXUNIT1 : _NormalMap 1 : -1 : 1
//var sampler2D NoiseMap : TEXUNIT2 : _NoiseMap 2 : -1 : 1
//var float2 texCoord : $vin.TEXCOORD0 : TEXCOORD0 : 1 : 1
//var float4 frustumCorner : $vin.TEXCOORD1 : TEXCOORD1 : 2 : 1
//var float4 ps : $vout.COLOR0 : COLOR0 : -1 : 1

#version 130

struct VOutput {
    vec2 _texCoord3;
    vec4 _frustumCorners;
};

vec4 _ret_0;
float _TMP12;
float _TMP14;
float _TMP13;
vec4 _TMP11;
vec2 _TMP5;
float _TMP10;
float _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _r0033;
vec2 _c0045;
float _TMP52;
vec2 _sampleTexCoord0053;
vec2 _sampleOffset0053;
vec4 _sampleSS0053;
vec4 _frustumCorner0053;
vec4 _viewRay0053;
vec2 _TMP260053;
vec4 _samplePositionVS0053;
vec3 _diff0053;
vec3 _v0053;
float _d0053;
float _occlusion10053;
vec4 _r0055;
float _b0077;
float _TMP78;
vec2 _sampleTexCoord0079;
vec2 _sampleOffset0079;
vec4 _sampleSS0079;
vec4 _frustumCorner0079;
vec4 _viewRay0079;
vec2 _TMP260079;
vec4 _samplePositionVS0079;
vec3 _diff0079;
vec3 _v0079;
float _d0079;
float _occlusion10079;
vec4 _r0081;
float _b0103;
float _TMP104;
vec2 _sampleTexCoord0105;
vec2 _sampleOffset0105;
vec4 _sampleSS0105;
vec4 _frustumCorner0105;
vec4 _viewRay0105;
vec2 _TMP260105;
vec4 _samplePositionVS0105;
vec3 _diff0105;
vec3 _v0105;
float _d0105;
float _occlusion10105;
vec4 _r0107;
float _b0129;
float _TMP130;
vec2 _sampleTexCoord0131;
vec4 _sampleSS0131;
vec4 _frustumCorner0131;
vec4 _viewRay0131;
vec2 _TMP260131;
vec4 _samplePositionVS0131;
vec3 _diff0131;
vec3 _v0131;
float _d0131;
float _occlusion10131;
vec4 _r0133;
float _b0155;
uniform float _Radius;
uniform vec2 _NoiseScale;
uniform float _Far;
uniform vec4 _ProjInv[4];
uniform vec4 _Projection[4];
uniform sampler2D _LinearDepthMap;
uniform sampler2D _NormalMap;
uniform sampler2D _NoiseMap;
in vec4 cg_TexCoord1;
in vec4 cg_TexCoord0;
out vec4 cg_FragColor;

 // main procedure, the original name was ps
void main()
{

    vec4 _viewRay1;
    vec4 _positionVS1;
    vec4 _positionSS;
    vec3 _random;
    float _rad;
    float _occlusion;
    vec2 _sampleOffset1;
    vec2 _coord21;
    vec2 _TMP29;

    _TMP29 = cg_TexCoord1.xy*(-_Far/cg_TexCoord1.z);
    _viewRay1 = vec4(_TMP29.x, _TMP29.y, -_Far, 1.00000000E+000);
    _TMP1 = texture(_LinearDepthMap, cg_TexCoord0.xy);
    _positionVS1 = _viewRay1*_TMP1.x;
    _r0033.x = dot(_Projection[0], _positionVS1);
    _r0033.y = dot(_Projection[1], _positionVS1);
    _r0033.z = dot(_Projection[2], _positionVS1);
    _r0033.w = dot(_Projection[3], _positionVS1);
    _positionSS = _r0033/_r0033.w;
    _positionSS = _positionSS*5.00000000E-001 + 5.00000000E-001;
    _positionSS.y = 1.00000000E+000 - _positionSS.y;
    _TMP2 = texture(_NormalMap, cg_TexCoord0.xy);
    _c0045 = cg_TexCoord0.xy*_NoiseScale;
    _TMP3 = texture(_NoiseMap, _c0045);
    _random = _TMP3.xyz*2.00000000E+000 - 1.00000000E+000;
    _TMP4 = abs(_positionVS1.z);
    _rad = _Radius/_TMP4;
    _TMP10 = dot(_random.xy, vec2( 1.00000000E+000, 0.00000000E+000));
    _TMP5 = vec2( 1.00000000E+000, 0.00000000E+000) - (2.00000000E+000*_random.xy)*_TMP10;
    _sampleOffset1 = _TMP5*_rad;
    _coord21 = vec2(_sampleOffset1.x*7.07000017E-001 - _sampleOffset1.y*7.07000017E-001, _sampleOffset1.x*7.07000017E-001 + _sampleOffset1.y*7.07000017E-001);
    _sampleOffset0053 = _sampleOffset1*2.50000000E-001;
    _sampleTexCoord0053 = _positionSS.xy + _sampleOffset0053;
    _sampleSS0053 = vec4(_sampleTexCoord0053.x, _sampleTexCoord0053.y, 0.00000000E+000, 1.00000000E+000);
    _sampleSS0053.y = 1.00000000E+000 - _sampleSS0053.y;
    _sampleSS0053 = _sampleSS0053*2.00000000E+000 - 1.00000000E+000;
    _r0055.x = dot(_ProjInv[0], _sampleSS0053);
    _r0055.y = dot(_ProjInv[1], _sampleSS0053);
    _r0055.z = dot(_ProjInv[2], _sampleSS0053);
    _r0055.w = dot(_ProjInv[3], _sampleSS0053);
    _frustumCorner0053 = _r0055/_r0055.w;
    _TMP260053 = _frustumCorner0053.xy*(-_Far/_frustumCorner0053.z);
    _viewRay0053 = vec4(_TMP260053.x, _TMP260053.y, -_Far, 1.00000000E+000);
    _TMP11 = texture(_LinearDepthMap, _sampleTexCoord0053);
    _samplePositionVS0053 = _viewRay0053*_TMP11.x;
    _diff0053 = _samplePositionVS0053.xyz - _positionVS1.xyz;
    _TMP13 = dot(_diff0053, _diff0053);
    _TMP14 = inversesqrt(_TMP13);
    _v0053 = _TMP14*_diff0053;
    _d0053 = length(_diff0053);
    if (_d0053 < 1.00000001E-001) { // if begin
        _TMP12 = dot(_TMP2.xyz, _v0053);
        _b0077 = _TMP12*(1.00000000E+000 + _d0053);
        _occlusion10053 = max(0.00000000E+000, _b0077);
        _TMP52 = _occlusion10053;
    } else {
        _TMP52 = 0.00000000E+000;
    } // end if
    _sampleOffset0079 = _coord21*5.00000000E-001;
    _sampleTexCoord0079 = _positionSS.xy + _sampleOffset0079;
    _sampleSS0079 = vec4(_sampleTexCoord0079.x, _sampleTexCoord0079.y, 0.00000000E+000, 1.00000000E+000);
    _sampleSS0079.y = 1.00000000E+000 - _sampleSS0079.y;
    _sampleSS0079 = _sampleSS0079*2.00000000E+000 - 1.00000000E+000;
    _r0081.x = dot(_ProjInv[0], _sampleSS0079);
    _r0081.y = dot(_ProjInv[1], _sampleSS0079);
    _r0081.z = dot(_ProjInv[2], _sampleSS0079);
    _r0081.w = dot(_ProjInv[3], _sampleSS0079);
    _frustumCorner0079 = _r0081/_r0081.w;
    _TMP260079 = _frustumCorner0079.xy*(-_Far/_frustumCorner0079.z);
    _viewRay0079 = vec4(_TMP260079.x, _TMP260079.y, -_Far, 1.00000000E+000);
    _TMP11 = texture(_LinearDepthMap, _sampleTexCoord0079);
    _samplePositionVS0079 = _viewRay0079*_TMP11.x;
    _diff0079 = _samplePositionVS0079.xyz - _positionVS1.xyz;
    _TMP13 = dot(_diff0079, _diff0079);
    _TMP14 = inversesqrt(_TMP13);
    _v0079 = _TMP14*_diff0079;
    _d0079 = length(_diff0079);
    if (_d0079 < 1.00000001E-001) { // if begin
        _TMP12 = dot(_TMP2.xyz, _v0079);
        _b0103 = _TMP12*(1.00000000E+000 + _d0079);
        _occlusion10079 = max(0.00000000E+000, _b0103);
        _TMP78 = _occlusion10079;
    } else {
        _TMP78 = 0.00000000E+000;
    } // end if
    _occlusion = _TMP52 + _TMP78;
    _sampleOffset0105 = _sampleOffset1*7.50000000E-001;
    _sampleTexCoord0105 = _positionSS.xy + _sampleOffset0105;
    _sampleSS0105 = vec4(_sampleTexCoord0105.x, _sampleTexCoord0105.y, 0.00000000E+000, 1.00000000E+000);
    _sampleSS0105.y = 1.00000000E+000 - _sampleSS0105.y;
    _sampleSS0105 = _sampleSS0105*2.00000000E+000 - 1.00000000E+000;
    _r0107.x = dot(_ProjInv[0], _sampleSS0105);
    _r0107.y = dot(_ProjInv[1], _sampleSS0105);
    _r0107.z = dot(_ProjInv[2], _sampleSS0105);
    _r0107.w = dot(_ProjInv[3], _sampleSS0105);
    _frustumCorner0105 = _r0107/_r0107.w;
    _TMP260105 = _frustumCorner0105.xy*(-_Far/_frustumCorner0105.z);
    _viewRay0105 = vec4(_TMP260105.x, _TMP260105.y, -_Far, 1.00000000E+000);
    _TMP11 = texture(_LinearDepthMap, _sampleTexCoord0105);
    _samplePositionVS0105 = _viewRay0105*_TMP11.x;
    _diff0105 = _samplePositionVS0105.xyz - _positionVS1.xyz;
    _TMP13 = dot(_diff0105, _diff0105);
    _TMP14 = inversesqrt(_TMP13);
    _v0105 = _TMP14*_diff0105;
    _d0105 = length(_diff0105);
    if (_d0105 < 1.00000001E-001) { // if begin
        _TMP12 = dot(_TMP2.xyz, _v0105);
        _b0129 = _TMP12*(1.00000000E+000 + _d0105);
        _occlusion10105 = max(0.00000000E+000, _b0129);
        _TMP104 = _occlusion10105;
    } else {
        _TMP104 = 0.00000000E+000;
    } // end if
    _occlusion = _occlusion + _TMP104;
    _sampleTexCoord0131 = _positionSS.xy + _coord21;
    _sampleSS0131 = vec4(_sampleTexCoord0131.x, _sampleTexCoord0131.y, 0.00000000E+000, 1.00000000E+000);
    _sampleSS0131.y = 1.00000000E+000 - _sampleSS0131.y;
    _sampleSS0131 = _sampleSS0131*2.00000000E+000 - 1.00000000E+000;
    _r0133.x = dot(_ProjInv[0], _sampleSS0131);
    _r0133.y = dot(_ProjInv[1], _sampleSS0131);
    _r0133.z = dot(_ProjInv[2], _sampleSS0131);
    _r0133.w = dot(_ProjInv[3], _sampleSS0131);
    _frustumCorner0131 = _r0133/_r0133.w;
    _TMP260131 = _frustumCorner0131.xy*(-_Far/_frustumCorner0131.z);
    _viewRay0131 = vec4(_TMP260131.x, _TMP260131.y, -_Far, 1.00000000E+000);
    _TMP11 = texture(_LinearDepthMap, _sampleTexCoord0131);
    _samplePositionVS0131 = _viewRay0131*_TMP11.x;
    _diff0131 = _samplePositionVS0131.xyz - _positionVS1.xyz;
    _TMP13 = dot(_diff0131, _diff0131);
    _TMP14 = inversesqrt(_TMP13);
    _v0131 = _TMP14*_diff0131;
    _d0131 = length(_diff0131);
    if (_d0131 < 1.00000001E-001) { // if begin
        _TMP12 = dot(_TMP2.xyz, _v0131);
        _b0155 = _TMP12*(1.00000000E+000 + _d0131);
        _occlusion10131 = max(0.00000000E+000, _b0155);
        _TMP130 = _occlusion10131;
    } else {
        _TMP130 = 0.00000000E+000;
    } // end if
    _occlusion = _occlusion + _TMP130;
    _TMP10 = dot(_random.xy, vec2( -1.00000000E+000, 0.00000000E+000));
    _TMP5 = vec2( -1.00000000E+000, 0.00000000E+000) - (2.00000000E+000*_random.xy)*_TMP10;
    _sampleOffset1 = _TMP5*_rad;
    _coord21 = vec2(_sampleOffset1.x*7.07000017E-001 - _sampleOffset1.y*7.07000017E-001, _sampleOffset1.x*7.07000017E-001 + _sampleOffset1.y*7.07000017E-001);
    _sampleOffset0053 = _sampleOffset1*2.50000000E-001;
    _sampleTexCoord0053 = _positionSS.xy + _sampleOffset0053;
    _sampleSS0053 = vec4(_sampleTexCoord0053.x, _sampleTexCoord0053.y, 0.00000000E+000, 1.00000000E+000);
    _sampleSS0053.y = 1.00000000E+000 - _sampleSS0053.y;
    _sampleSS0053 = _sampleSS0053*2.00000000E+000 - 1.00000000E+000;
    _r0055.x = dot(_ProjInv[0], _sampleSS0053);
    _r0055.y = dot(_ProjInv[1], _sampleSS0053);
    _r0055.z = dot(_ProjInv[2], _sampleSS0053);
    _r0055.w = dot(_ProjInv[3], _sampleSS0053);
    _frustumCorner0053 = _r0055/_r0055.w;
    _TMP260053 = _frustumCorner0053.xy*(-_Far/_frustumCorner0053.z);
    _viewRay0053 = vec4(_TMP260053.x, _TMP260053.y, -_Far, 1.00000000E+000);
    _TMP11 = texture(_LinearDepthMap, _sampleTexCoord0053);
    _samplePositionVS0053 = _viewRay0053*_TMP11.x;
    _diff0053 = _samplePositionVS0053.xyz - _positionVS1.xyz;
    _TMP13 = dot(_diff0053, _diff0053);
    _TMP14 = inversesqrt(_TMP13);
    _v0053 = _TMP14*_diff0053;
    _d0053 = length(_diff0053);
    if (_d0053 < 1.00000001E-001) { // if begin
        _TMP12 = dot(_TMP2.xyz, _v0053);
        _b0077 = _TMP12*(1.00000000E+000 + _d0053);
        _occlusion10053 = max(0.00000000E+000, _b0077);
        _TMP52 = _occlusion10053;
    } else {
        _TMP52 = 0.00000000E+000;
    } // end if
    _occlusion = _occlusion + _TMP52;
    _sampleOffset0079 = _coord21*5.00000000E-001;
    _sampleTexCoord0079 = _positionSS.xy + _sampleOffset0079;
    _sampleSS0079 = vec4(_sampleTexCoord0079.x, _sampleTexCoord0079.y, 0.00000000E+000, 1.00000000E+000);
    _sampleSS0079.y = 1.00000000E+000 - _sampleSS0079.y;
    _sampleSS0079 = _sampleSS0079*2.00000000E+000 - 1.00000000E+000;
    _r0081.x = dot(_ProjInv[0], _sampleSS0079);
    _r0081.y = dot(_ProjInv[1], _sampleSS0079);
    _r0081.z = dot(_ProjInv[2], _sampleSS0079);
    _r0081.w = dot(_ProjInv[3], _sampleSS0079);
    _frustumCorner0079 = _r0081/_r0081.w;
    _TMP260079 = _frustumCorner0079.xy*(-_Far/_frustumCorner0079.z);
    _viewRay0079 = vec4(_TMP260079.x, _TMP260079.y, -_Far, 1.00000000E+000);
    _TMP11 = texture(_LinearDepthMap, _sampleTexCoord0079);
    _samplePositionVS0079 = _viewRay0079*_TMP11.x;
    _diff0079 = _samplePositionVS0079.xyz - _positionVS1.xyz;
    _TMP13 = dot(_diff0079, _diff0079);
    _TMP14 = inversesqrt(_TMP13);
    _v0079 = _TMP14*_diff0079;
    _d0079 = length(_diff0079);
    if (_d0079 < 1.00000001E-001) { // if begin
        _TMP12 = dot(_TMP2.xyz, _v0079);
        _b0103 = _TMP12*(1.00000000E+000 + _d0079);
        _occlusion10079 = max(0.00000000E+000, _b0103);
        _TMP78 = _occlusion10079;
    } else {
        _TMP78 = 0.00000000E+000;
    } // end if
    _occlusion = _occlusion + _TMP78;
    _sampleOffset0105 = _sampleOffset1*7.50000000E-001;
    _sampleTexCoord0105 = _positionSS.xy + _sampleOffset0105;
    _sampleSS0105 = vec4(_sampleTexCoord0105.x, _sampleTexCoord0105.y, 0.00000000E+000, 1.00000000E+000);
    _sampleSS0105.y = 1.00000000E+000 - _sampleSS0105.y;
    _sampleSS0105 = _sampleSS0105*2.00000000E+000 - 1.00000000E+000;
    _r0107.x = dot(_ProjInv[0], _sampleSS0105);
    _r0107.y = dot(_ProjInv[1], _sampleSS0105);
    _r0107.z = dot(_ProjInv[2], _sampleSS0105);
    _r0107.w = dot(_ProjInv[3], _sampleSS0105);
    _frustumCorner0105 = _r0107/_r0107.w;
    _TMP260105 = _frustumCorner0105.xy*(-_Far/_frustumCorner0105.z);
    _viewRay0105 = vec4(_TMP260105.x, _TMP260105.y, -_Far, 1.00000000E+000);
    _TMP11 = texture(_LinearDepthMap, _sampleTexCoord0105);
    _samplePositionVS0105 = _viewRay0105*_TMP11.x;
    _diff0105 = _samplePositionVS0105.xyz - _positionVS1.xyz;
    _TMP13 = dot(_diff0105, _diff0105);
    _TMP14 = inversesqrt(_TMP13);
    _v0105 = _TMP14*_diff0105;
    _d0105 = length(_diff0105);
    if (_d0105 < 1.00000001E-001) { // if begin
        _TMP12 = dot(_TMP2.xyz, _v0105);
        _b0129 = _TMP12*(1.00000000E+000 + _d0105);
        _occlusion10105 = max(0.00000000E+000, _b0129);
        _TMP104 = _occlusion10105;
    } else {
        _TMP104 = 0.00000000E+000;
    } // end if
    _occlusion = _occlusion + _TMP104;
    _sampleTexCoord0131 = _positionSS.xy + _coord21;
    _sampleSS0131 = vec4(_sampleTexCoord0131.x, _sampleTexCoord0131.y, 0.00000000E+000, 1.00000000E+000);
    _sampleSS0131.y = 1.00000000E+000 - _sampleSS0131.y;
    _sampleSS0131 = _sampleSS0131*2.00000000E+000 - 1.00000000E+000;
    _r0133.x = dot(_ProjInv[0], _sampleSS0131);
    _r0133.y = dot(_ProjInv[1], _sampleSS0131);
    _r0133.z = dot(_ProjInv[2], _sampleSS0131);
    _r0133.w = dot(_ProjInv[3], _sampleSS0131);
    _frustumCorner0131 = _r0133/_r0133.w;
    _TMP260131 = _frustumCorner0131.xy*(-_Far/_frustumCorner0131.z);
    _viewRay0131 = vec4(_TMP260131.x, _TMP260131.y, -_Far, 1.00000000E+000);
    _TMP11 = texture(_LinearDepthMap, _sampleTexCoord0131);
    _samplePositionVS0131 = _viewRay0131*_TMP11.x;
    _diff0131 = _samplePositionVS0131.xyz - _positionVS1.xyz;
    _TMP13 = dot(_diff0131, _diff0131);
    _TMP14 = inversesqrt(_TMP13);
    _v0131 = _TMP14*_diff0131;
    _d0131 = length(_diff0131);
    if (_d0131 < 1.00000001E-001) { // if begin
        _TMP12 = dot(_TMP2.xyz, _v0131);
        _b0155 = _TMP12*(1.00000000E+000 + _d0131);
        _occlusion10131 = max(0.00000000E+000, _b0155);
        _TMP130 = _occlusion10131;
    } else {
        _TMP130 = 0.00000000E+000;
    } // end if
    _occlusion = _occlusion + _TMP130;
    _TMP10 = dot(_random.xy, vec2( 0.00000000E+000, 1.00000000E+000));
    _TMP5 = vec2( 0.00000000E+000, 1.00000000E+000) - (2.00000000E+000*_random.xy)*_TMP10;
    _sampleOffset1 = _TMP5*_rad;
    _coord21 = vec2(_sampleOffset1.x*7.07000017E-001 - _sampleOffset1.y*7.07000017E-001, _sampleOffset1.x*7.07000017E-001 + _sampleOffset1.y*7.07000017E-001);
    _sampleOffset0053 = _sampleOffset1*2.50000000E-001;
    _sampleTexCoord0053 = _positionSS.xy + _sampleOffset0053;
    _sampleSS0053 = vec4(_sampleTexCoord0053.x, _sampleTexCoord0053.y, 0.00000000E+000, 1.00000000E+000);
    _sampleSS0053.y = 1.00000000E+000 - _sampleSS0053.y;
    _sampleSS0053 = _sampleSS0053*2.00000000E+000 - 1.00000000E+000;
    _r0055.x = dot(_ProjInv[0], _sampleSS0053);
    _r0055.y = dot(_ProjInv[1], _sampleSS0053);
    _r0055.z = dot(_ProjInv[2], _sampleSS0053);
    _r0055.w = dot(_ProjInv[3], _sampleSS0053);
    _frustumCorner0053 = _r0055/_r0055.w;
    _TMP260053 = _frustumCorner0053.xy*(-_Far/_frustumCorner0053.z);
    _viewRay0053 = vec4(_TMP260053.x, _TMP260053.y, -_Far, 1.00000000E+000);
    _TMP11 = texture(_LinearDepthMap, _sampleTexCoord0053);
    _samplePositionVS0053 = _viewRay0053*_TMP11.x;
    _diff0053 = _samplePositionVS0053.xyz - _positionVS1.xyz;
    _TMP13 = dot(_diff0053, _diff0053);
    _TMP14 = inversesqrt(_TMP13);
    _v0053 = _TMP14*_diff0053;
    _d0053 = length(_diff0053);
    if (_d0053 < 1.00000001E-001) { // if begin
        _TMP12 = dot(_TMP2.xyz, _v0053);
        _b0077 = _TMP12*(1.00000000E+000 + _d0053);
        _occlusion10053 = max(0.00000000E+000, _b0077);
        _TMP52 = _occlusion10053;
    } else {
        _TMP52 = 0.00000000E+000;
    } // end if
    _occlusion = _occlusion + _TMP52;
    _sampleOffset0079 = _coord21*5.00000000E-001;
    _sampleTexCoord0079 = _positionSS.xy + _sampleOffset0079;
    _sampleSS0079 = vec4(_sampleTexCoord0079.x, _sampleTexCoord0079.y, 0.00000000E+000, 1.00000000E+000);
    _sampleSS0079.y = 1.00000000E+000 - _sampleSS0079.y;
    _sampleSS0079 = _sampleSS0079*2.00000000E+000 - 1.00000000E+000;
    _r0081.x = dot(_ProjInv[0], _sampleSS0079);
    _r0081.y = dot(_ProjInv[1], _sampleSS0079);
    _r0081.z = dot(_ProjInv[2], _sampleSS0079);
    _r0081.w = dot(_ProjInv[3], _sampleSS0079);
    _frustumCorner0079 = _r0081/_r0081.w;
    _TMP260079 = _frustumCorner0079.xy*(-_Far/_frustumCorner0079.z);
    _viewRay0079 = vec4(_TMP260079.x, _TMP260079.y, -_Far, 1.00000000E+000);
    _TMP11 = texture(_LinearDepthMap, _sampleTexCoord0079);
    _samplePositionVS0079 = _viewRay0079*_TMP11.x;
    _diff0079 = _samplePositionVS0079.xyz - _positionVS1.xyz;
    _TMP13 = dot(_diff0079, _diff0079);
    _TMP14 = inversesqrt(_TMP13);
    _v0079 = _TMP14*_diff0079;
    _d0079 = length(_diff0079);
    if (_d0079 < 1.00000001E-001) { // if begin
        _TMP12 = dot(_TMP2.xyz, _v0079);
        _b0103 = _TMP12*(1.00000000E+000 + _d0079);
        _occlusion10079 = max(0.00000000E+000, _b0103);
        _TMP78 = _occlusion10079;
    } else {
        _TMP78 = 0.00000000E+000;
    } // end if
    _occlusion = _occlusion + _TMP78;
    _sampleOffset0105 = _sampleOffset1*7.50000000E-001;
    _sampleTexCoord0105 = _positionSS.xy + _sampleOffset0105;
    _sampleSS0105 = vec4(_sampleTexCoord0105.x, _sampleTexCoord0105.y, 0.00000000E+000, 1.00000000E+000);
    _sampleSS0105.y = 1.00000000E+000 - _sampleSS0105.y;
    _sampleSS0105 = _sampleSS0105*2.00000000E+000 - 1.00000000E+000;
    _r0107.x = dot(_ProjInv[0], _sampleSS0105);
    _r0107.y = dot(_ProjInv[1], _sampleSS0105);
    _r0107.z = dot(_ProjInv[2], _sampleSS0105);
    _r0107.w = dot(_ProjInv[3], _sampleSS0105);
    _frustumCorner0105 = _r0107/_r0107.w;
    _TMP260105 = _frustumCorner0105.xy*(-_Far/_frustumCorner0105.z);
    _viewRay0105 = vec4(_TMP260105.x, _TMP260105.y, -_Far, 1.00000000E+000);
    _TMP11 = texture(_LinearDepthMap, _sampleTexCoord0105);
    _samplePositionVS0105 = _viewRay0105*_TMP11.x;
    _diff0105 = _samplePositionVS0105.xyz - _positionVS1.xyz;
    _TMP13 = dot(_diff0105, _diff0105);
    _TMP14 = inversesqrt(_TMP13);
    _v0105 = _TMP14*_diff0105;
    _d0105 = length(_diff0105);
    if (_d0105 < 1.00000001E-001) { // if begin
        _TMP12 = dot(_TMP2.xyz, _v0105);
        _b0129 = _TMP12*(1.00000000E+000 + _d0105);
        _occlusion10105 = max(0.00000000E+000, _b0129);
        _TMP104 = _occlusion10105;
    } else {
        _TMP104 = 0.00000000E+000;
    } // end if
    _occlusion = _occlusion + _TMP104;
    _sampleTexCoord0131 = _positionSS.xy + _coord21;
    _sampleSS0131 = vec4(_sampleTexCoord0131.x, _sampleTexCoord0131.y, 0.00000000E+000, 1.00000000E+000);
    _sampleSS0131.y = 1.00000000E+000 - _sampleSS0131.y;
    _sampleSS0131 = _sampleSS0131*2.00000000E+000 - 1.00000000E+000;
    _r0133.x = dot(_ProjInv[0], _sampleSS0131);
    _r0133.y = dot(_ProjInv[1], _sampleSS0131);
    _r0133.z = dot(_ProjInv[2], _sampleSS0131);
    _r0133.w = dot(_ProjInv[3], _sampleSS0131);
    _frustumCorner0131 = _r0133/_r0133.w;
    _TMP260131 = _frustumCorner0131.xy*(-_Far/_frustumCorner0131.z);
    _viewRay0131 = vec4(_TMP260131.x, _TMP260131.y, -_Far, 1.00000000E+000);
    _TMP11 = texture(_LinearDepthMap, _sampleTexCoord0131);
    _samplePositionVS0131 = _viewRay0131*_TMP11.x;
    _diff0131 = _samplePositionVS0131.xyz - _positionVS1.xyz;
    _TMP13 = dot(_diff0131, _diff0131);
    _TMP14 = inversesqrt(_TMP13);
    _v0131 = _TMP14*_diff0131;
    _d0131 = length(_diff0131);
    if (_d0131 < 1.00000001E-001) { // if begin
        _TMP12 = dot(_TMP2.xyz, _v0131);
        _b0155 = _TMP12*(1.00000000E+000 + _d0131);
        _occlusion10131 = max(0.00000000E+000, _b0155);
        _TMP130 = _occlusion10131;
    } else {
        _TMP130 = 0.00000000E+000;
    } // end if
    _occlusion = _occlusion + _TMP130;
    _TMP10 = dot(_random.xy, vec2( 0.00000000E+000, -1.00000000E+000));
    _TMP5 = vec2( 0.00000000E+000, -1.00000000E+000) - (2.00000000E+000*_random.xy)*_TMP10;
    _sampleOffset1 = _TMP5*_rad;
    _coord21 = vec2(_sampleOffset1.x*7.07000017E-001 - _sampleOffset1.y*7.07000017E-001, _sampleOffset1.x*7.07000017E-001 + _sampleOffset1.y*7.07000017E-001);
    _sampleOffset0053 = _sampleOffset1*2.50000000E-001;
    _sampleTexCoord0053 = _positionSS.xy + _sampleOffset0053;
    _sampleSS0053 = vec4(_sampleTexCoord0053.x, _sampleTexCoord0053.y, 0.00000000E+000, 1.00000000E+000);
    _sampleSS0053.y = 1.00000000E+000 - _sampleSS0053.y;
    _sampleSS0053 = _sampleSS0053*2.00000000E+000 - 1.00000000E+000;
    _r0055.x = dot(_ProjInv[0], _sampleSS0053);
    _r0055.y = dot(_ProjInv[1], _sampleSS0053);
    _r0055.z = dot(_ProjInv[2], _sampleSS0053);
    _r0055.w = dot(_ProjInv[3], _sampleSS0053);
    _frustumCorner0053 = _r0055/_r0055.w;
    _TMP260053 = _frustumCorner0053.xy*(-_Far/_frustumCorner0053.z);
    _viewRay0053 = vec4(_TMP260053.x, _TMP260053.y, -_Far, 1.00000000E+000);
    _TMP11 = texture(_LinearDepthMap, _sampleTexCoord0053);
    _samplePositionVS0053 = _viewRay0053*_TMP11.x;
    _diff0053 = _samplePositionVS0053.xyz - _positionVS1.xyz;
    _TMP13 = dot(_diff0053, _diff0053);
    _TMP14 = inversesqrt(_TMP13);
    _v0053 = _TMP14*_diff0053;
    _d0053 = length(_diff0053);
    if (_d0053 < 1.00000001E-001) { // if begin
        _TMP12 = dot(_TMP2.xyz, _v0053);
        _b0077 = _TMP12*(1.00000000E+000 + _d0053);
        _occlusion10053 = max(0.00000000E+000, _b0077);
        _TMP52 = _occlusion10053;
    } else {
        _TMP52 = 0.00000000E+000;
    } // end if
    _occlusion = _occlusion + _TMP52;
    _sampleOffset0079 = _coord21*5.00000000E-001;
    _sampleTexCoord0079 = _positionSS.xy + _sampleOffset0079;
    _sampleSS0079 = vec4(_sampleTexCoord0079.x, _sampleTexCoord0079.y, 0.00000000E+000, 1.00000000E+000);
    _sampleSS0079.y = 1.00000000E+000 - _sampleSS0079.y;
    _sampleSS0079 = _sampleSS0079*2.00000000E+000 - 1.00000000E+000;
    _r0081.x = dot(_ProjInv[0], _sampleSS0079);
    _r0081.y = dot(_ProjInv[1], _sampleSS0079);
    _r0081.z = dot(_ProjInv[2], _sampleSS0079);
    _r0081.w = dot(_ProjInv[3], _sampleSS0079);
    _frustumCorner0079 = _r0081/_r0081.w;
    _TMP260079 = _frustumCorner0079.xy*(-_Far/_frustumCorner0079.z);
    _viewRay0079 = vec4(_TMP260079.x, _TMP260079.y, -_Far, 1.00000000E+000);
    _TMP11 = texture(_LinearDepthMap, _sampleTexCoord0079);
    _samplePositionVS0079 = _viewRay0079*_TMP11.x;
    _diff0079 = _samplePositionVS0079.xyz - _positionVS1.xyz;
    _TMP13 = dot(_diff0079, _diff0079);
    _TMP14 = inversesqrt(_TMP13);
    _v0079 = _TMP14*_diff0079;
    _d0079 = length(_diff0079);
    if (_d0079 < 1.00000001E-001) { // if begin
        _TMP12 = dot(_TMP2.xyz, _v0079);
        _b0103 = _TMP12*(1.00000000E+000 + _d0079);
        _occlusion10079 = max(0.00000000E+000, _b0103);
        _TMP78 = _occlusion10079;
    } else {
        _TMP78 = 0.00000000E+000;
    } // end if
    _occlusion = _occlusion + _TMP78;
    _sampleOffset0105 = _sampleOffset1*7.50000000E-001;
    _sampleTexCoord0105 = _positionSS.xy + _sampleOffset0105;
    _sampleSS0105 = vec4(_sampleTexCoord0105.x, _sampleTexCoord0105.y, 0.00000000E+000, 1.00000000E+000);
    _sampleSS0105.y = 1.00000000E+000 - _sampleSS0105.y;
    _sampleSS0105 = _sampleSS0105*2.00000000E+000 - 1.00000000E+000;
    _r0107.x = dot(_ProjInv[0], _sampleSS0105);
    _r0107.y = dot(_ProjInv[1], _sampleSS0105);
    _r0107.z = dot(_ProjInv[2], _sampleSS0105);
    _r0107.w = dot(_ProjInv[3], _sampleSS0105);
    _frustumCorner0105 = _r0107/_r0107.w;
    _TMP260105 = _frustumCorner0105.xy*(-_Far/_frustumCorner0105.z);
    _viewRay0105 = vec4(_TMP260105.x, _TMP260105.y, -_Far, 1.00000000E+000);
    _TMP11 = texture(_LinearDepthMap, _sampleTexCoord0105);
    _samplePositionVS0105 = _viewRay0105*_TMP11.x;
    _diff0105 = _samplePositionVS0105.xyz - _positionVS1.xyz;
    _TMP13 = dot(_diff0105, _diff0105);
    _TMP14 = inversesqrt(_TMP13);
    _v0105 = _TMP14*_diff0105;
    _d0105 = length(_diff0105);
    if (_d0105 < 1.00000001E-001) { // if begin
        _TMP12 = dot(_TMP2.xyz, _v0105);
        _b0129 = _TMP12*(1.00000000E+000 + _d0105);
        _occlusion10105 = max(0.00000000E+000, _b0129);
        _TMP104 = _occlusion10105;
    } else {
        _TMP104 = 0.00000000E+000;
    } // end if
    _occlusion = _occlusion + _TMP104;
    _sampleTexCoord0131 = _positionSS.xy + _coord21;
    _sampleSS0131 = vec4(_sampleTexCoord0131.x, _sampleTexCoord0131.y, 0.00000000E+000, 1.00000000E+000);
    _sampleSS0131.y = 1.00000000E+000 - _sampleSS0131.y;
    _sampleSS0131 = _sampleSS0131*2.00000000E+000 - 1.00000000E+000;
    _r0133.x = dot(_ProjInv[0], _sampleSS0131);
    _r0133.y = dot(_ProjInv[1], _sampleSS0131);
    _r0133.z = dot(_ProjInv[2], _sampleSS0131);
    _r0133.w = dot(_ProjInv[3], _sampleSS0131);
    _frustumCorner0131 = _r0133/_r0133.w;
    _TMP260131 = _frustumCorner0131.xy*(-_Far/_frustumCorner0131.z);
    _viewRay0131 = vec4(_TMP260131.x, _TMP260131.y, -_Far, 1.00000000E+000);
    _TMP11 = texture(_LinearDepthMap, _sampleTexCoord0131);
    _samplePositionVS0131 = _viewRay0131*_TMP11.x;
    _diff0131 = _samplePositionVS0131.xyz - _positionVS1.xyz;
    _TMP13 = dot(_diff0131, _diff0131);
    _TMP14 = inversesqrt(_TMP13);
    _v0131 = _TMP14*_diff0131;
    _d0131 = length(_diff0131);
    if (_d0131 < 1.00000001E-001) { // if begin
        _TMP12 = dot(_TMP2.xyz, _v0131);
        _b0155 = _TMP12*(1.00000000E+000 + _d0131);
        _occlusion10131 = max(0.00000000E+000, _b0155);
        _TMP130 = _occlusion10131;
    } else {
        _TMP130 = 0.00000000E+000;
    } // end if
    _occlusion = _occlusion + _TMP130;
    _occlusion = _occlusion/1.60000000E+001;
    _occlusion = 1.00000000E+000 - _occlusion;
    _ret_0 = vec4(_occlusion, _occlusion, _occlusion, 1.00000000E+000);
    cg_FragColor = _ret_0;
    return;
} // main end
