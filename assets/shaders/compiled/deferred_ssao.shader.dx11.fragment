// ps_4_0 output by Cg compiler
// cgc version 3.1.0013, build date Apr 18 2012
// command line args: -DDX11=1 -q -unroll all -profile ps_5_0
// source file: deferred_ssao.cg
//vendor NVIDIA Corporation
//version 3.1.0.13
//profile ps_5_0
//program ps
//semantic HalfPixel
//semantic Radius
//semantic NoiseScale
//semantic Kernel
//semantic Far
//semantic Near
//semantic NormalMap : TEXUNIT0
//semantic PositionMap : TEXUNIT1
//semantic NoiseMap : TEXUNIT2
//var float Radius :  : _Radius : -1 : 1
//var float2 NoiseScale :  : _NoiseScale : -1 : 1
//var sampler2D NormalMap : TEXUNIT0 : _NormalMap 0 : -1 : 1
//var sampler2D PositionMap : TEXUNIT1 : _PositionMap 1 : -1 : 1
//var sampler2D NoiseMap : TEXUNIT2 : _NoiseMap 2 : -1 : 1
//var float2 texCoord : $vin.TEXCOORD0 :  : 1 : 1
//var float4 ps : $vout.COLOR0 : COLOR0 : -1 : 1

#pragma pack_matrix(row_major)

struct VOutput {
    float4 _position1 : SV_Position;
    float2 _texCoord3 : TEXCOORD0;
};

struct X1X {
    float4 _POSITION : SV_Position;
    float2 _TEXCOORD0 : TEXCOORD0;
};

static float _TMP10;
static float _TMP13;
static float _TMP14;
static float _TMP12;
static float _TMP11;
static float2 _TMP3;
static float _TMP9;
static float _TMP2;
static float4 _TMP1;
static float4 _TMP8;
static float3 _unPackedNormal0017;
static float _TMP20;
static float _occlusion10021;
static float3 _v0021;
static float3 _diff0021;
static float4 _samplePositionVS0021;
static float2 _sampleOffset0021;
static float _TMP24;
static float _TMP28;
static float _occlusion10029;
static float3 _v0029;
static float3 _diff0029;
static float4 _samplePositionVS0029;
static float2 _sampleOffset0029;
static float _TMP32;
static float _TMP36;
static float _occlusion10037;
static float3 _v0037;
static float3 _diff0037;
static float4 _samplePositionVS0037;
static float2 _sampleOffset0037;
static float _TMP40;
static float _TMP44;
static float _occlusion10045;
static float3 _v0045;
static float3 _diff0045;
static float4 _samplePositionVS0045;
static float _TMP48;
Texture2D<float4> _TMP52 : register(t1);
Texture2D<float4> _TMP53 : register(t0);
Texture2D<float4> _TMP54 : register(t2);
uniform float _Radius;
uniform float2 _NoiseScale;
SamplerState _NormalMap : TEXUNIT0;
SamplerState _PositionMap : TEXUNIT1;
SamplerState _NoiseMap : TEXUNIT2;

 // main procedure, the original name was ps
float4 main( in X1X cin) : SV_Target0
{

    float2 _texCoord2;
    float4 _positionVS1;
    float3 _random;
    float _rad;
    float _occlusion;
    float2 _sampleOffset1;
    float2 _coord21;

    _texCoord2 = cin._TEXCOORD0;
    _positionVS1 = _TMP52.Sample(_PositionMap, _texCoord2);
    _TMP8 = _TMP53.Sample(_NormalMap, _texCoord2);
    _unPackedNormal0017 = _TMP8.xyz* 2.00000000000000000E000f -  1.00000000000000000E000f;
    _TMP1 = _TMP54.Sample(_NoiseMap, _texCoord2*_NoiseScale);
    _random = _TMP1.xyz* 2.00000000000000000E000f -  1.00000000000000000E000f;
    _TMP2 = abs(_positionVS1.z);
    _rad = _Radius/_TMP2;
    _TMP3 = float2(  1.00000000000000000E000f,  0.00000000000000000E000f) - ( 2.00000000000000000E000f*_random.xy)*_random.x;
    _sampleOffset1 = _TMP3*_rad;
    _coord21 = float2(_sampleOffset1.x* 7.07000017166137700E-001f - _sampleOffset1.y* 7.07000017166137700E-001f, _sampleOffset1.x* 7.07000017166137700E-001f + _sampleOffset1.y* 7.07000017166137700E-001f);
    _sampleOffset0021 = _sampleOffset1* 2.50000000000000000E-001f;
    _samplePositionVS0021 = _TMP52.Sample(_PositionMap, _texCoord2 + _sampleOffset0021);
    _diff0021 = _samplePositionVS0021.xyz - _positionVS1.xyz;
    _TMP11 = dot(_diff0021, _diff0021);
    _TMP12 = rsqrt(_TMP11);
    _v0021 = _TMP12*_diff0021;
    _TMP13 = dot(_diff0021, _diff0021);
    _TMP14 = rsqrt(_TMP13);
    _TMP24 =  1.00000000000000000E000f/_TMP14;
    if (_TMP24 <  1.00000001490116120E-001f) { // if begin
        _TMP10 = dot(_unPackedNormal0017.xyz, _v0021);
        _occlusion10021 = max( 0.00000000000000000E000f, _TMP10*( 1.00000000000000000E000f + _TMP24));
        _TMP20 = _occlusion10021;
    } else {
        _TMP20 =  0.00000000000000000E000f;
    } // end if
    _sampleOffset0029 = _coord21* 5.00000000000000000E-001f;
    _samplePositionVS0029 = _TMP52.Sample(_PositionMap, _texCoord2 + _sampleOffset0029);
    _diff0029 = _samplePositionVS0029.xyz - _positionVS1.xyz;
    _TMP11 = dot(_diff0029, _diff0029);
    _TMP12 = rsqrt(_TMP11);
    _v0029 = _TMP12*_diff0029;
    _TMP13 = dot(_diff0029, _diff0029);
    _TMP14 = rsqrt(_TMP13);
    _TMP32 =  1.00000000000000000E000f/_TMP14;
    if (_TMP32 <  1.00000001490116120E-001f) { // if begin
        _TMP10 = dot(_unPackedNormal0017.xyz, _v0029);
        _occlusion10029 = max( 0.00000000000000000E000f, _TMP10*( 1.00000000000000000E000f + _TMP32));
        _TMP28 = _occlusion10029;
    } else {
        _TMP28 =  0.00000000000000000E000f;
    } // end if
    _occlusion = _TMP20 + _TMP28;
    _sampleOffset0037 = _sampleOffset1* 7.50000000000000000E-001f;
    _samplePositionVS0037 = _TMP52.Sample(_PositionMap, _texCoord2 + _sampleOffset0037);
    _diff0037 = _samplePositionVS0037.xyz - _positionVS1.xyz;
    _TMP11 = dot(_diff0037, _diff0037);
    _TMP12 = rsqrt(_TMP11);
    _v0037 = _TMP12*_diff0037;
    _TMP13 = dot(_diff0037, _diff0037);
    _TMP14 = rsqrt(_TMP13);
    _TMP40 =  1.00000000000000000E000f/_TMP14;
    if (_TMP40 <  1.00000001490116120E-001f) { // if begin
        _TMP10 = dot(_unPackedNormal0017.xyz, _v0037);
        _occlusion10037 = max( 0.00000000000000000E000f, _TMP10*( 1.00000000000000000E000f + _TMP40));
        _TMP36 = _occlusion10037;
    } else {
        _TMP36 =  0.00000000000000000E000f;
    } // end if
    _occlusion = _occlusion + _TMP36;
    _samplePositionVS0045 = _TMP52.Sample(_PositionMap, _texCoord2 + _coord21);
    _diff0045 = _samplePositionVS0045.xyz - _positionVS1.xyz;
    _TMP11 = dot(_diff0045, _diff0045);
    _TMP12 = rsqrt(_TMP11);
    _v0045 = _TMP12*_diff0045;
    _TMP13 = dot(_diff0045, _diff0045);
    _TMP14 = rsqrt(_TMP13);
    _TMP48 =  1.00000000000000000E000f/_TMP14;
    if (_TMP48 <  1.00000001490116120E-001f) { // if begin
        _TMP10 = dot(_unPackedNormal0017.xyz, _v0045);
        _occlusion10045 = max( 0.00000000000000000E000f, _TMP10*( 1.00000000000000000E000f + _TMP48));
        _TMP44 = _occlusion10045;
    } else {
        _TMP44 =  0.00000000000000000E000f;
    } // end if
    _occlusion = _occlusion + _TMP44;
    _TMP9 = dot(_random.xy, float2( -1.00000000000000000E000f,  0.00000000000000000E000f));
    _TMP3 = float2( -1.00000000000000000E000f,  0.00000000000000000E000f) - ( 2.00000000000000000E000f*_random.xy)*_TMP9;
    _sampleOffset1 = _TMP3*_rad;
    _coord21 = float2(_sampleOffset1.x* 7.07000017166137700E-001f - _sampleOffset1.y* 7.07000017166137700E-001f, _sampleOffset1.x* 7.07000017166137700E-001f + _sampleOffset1.y* 7.07000017166137700E-001f);
    _sampleOffset0021 = _sampleOffset1* 2.50000000000000000E-001f;
    _samplePositionVS0021 = _TMP52.Sample(_PositionMap, _texCoord2 + _sampleOffset0021);
    _diff0021 = _samplePositionVS0021.xyz - _positionVS1.xyz;
    _TMP11 = dot(_diff0021, _diff0021);
    _TMP12 = rsqrt(_TMP11);
    _v0021 = _TMP12*_diff0021;
    _TMP13 = dot(_diff0021, _diff0021);
    _TMP14 = rsqrt(_TMP13);
    _TMP24 =  1.00000000000000000E000f/_TMP14;
    if (_TMP24 <  1.00000001490116120E-001f) { // if begin
        _TMP10 = dot(_unPackedNormal0017.xyz, _v0021);
        _occlusion10021 = max( 0.00000000000000000E000f, _TMP10*( 1.00000000000000000E000f + _TMP24));
        _TMP20 = _occlusion10021;
    } else {
        _TMP20 =  0.00000000000000000E000f;
    } // end if
    _occlusion = _occlusion + _TMP20;
    _sampleOffset0029 = _coord21* 5.00000000000000000E-001f;
    _samplePositionVS0029 = _TMP52.Sample(_PositionMap, _texCoord2 + _sampleOffset0029);
    _diff0029 = _samplePositionVS0029.xyz - _positionVS1.xyz;
    _TMP11 = dot(_diff0029, _diff0029);
    _TMP12 = rsqrt(_TMP11);
    _v0029 = _TMP12*_diff0029;
    _TMP13 = dot(_diff0029, _diff0029);
    _TMP14 = rsqrt(_TMP13);
    _TMP32 =  1.00000000000000000E000f/_TMP14;
    if (_TMP32 <  1.00000001490116120E-001f) { // if begin
        _TMP10 = dot(_unPackedNormal0017.xyz, _v0029);
        _occlusion10029 = max( 0.00000000000000000E000f, _TMP10*( 1.00000000000000000E000f + _TMP32));
        _TMP28 = _occlusion10029;
    } else {
        _TMP28 =  0.00000000000000000E000f;
    } // end if
    _occlusion = _occlusion + _TMP28;
    _sampleOffset0037 = _sampleOffset1* 7.50000000000000000E-001f;
    _samplePositionVS0037 = _TMP52.Sample(_PositionMap, _texCoord2 + _sampleOffset0037);
    _diff0037 = _samplePositionVS0037.xyz - _positionVS1.xyz;
    _TMP11 = dot(_diff0037, _diff0037);
    _TMP12 = rsqrt(_TMP11);
    _v0037 = _TMP12*_diff0037;
    _TMP13 = dot(_diff0037, _diff0037);
    _TMP14 = rsqrt(_TMP13);
    _TMP40 =  1.00000000000000000E000f/_TMP14;
    if (_TMP40 <  1.00000001490116120E-001f) { // if begin
        _TMP10 = dot(_unPackedNormal0017.xyz, _v0037);
        _occlusion10037 = max( 0.00000000000000000E000f, _TMP10*( 1.00000000000000000E000f + _TMP40));
        _TMP36 = _occlusion10037;
    } else {
        _TMP36 =  0.00000000000000000E000f;
    } // end if
    _occlusion = _occlusion + _TMP36;
    _samplePositionVS0045 = _TMP52.Sample(_PositionMap, _texCoord2 + _coord21);
    _diff0045 = _samplePositionVS0045.xyz - _positionVS1.xyz;
    _TMP11 = dot(_diff0045, _diff0045);
    _TMP12 = rsqrt(_TMP11);
    _v0045 = _TMP12*_diff0045;
    _TMP13 = dot(_diff0045, _diff0045);
    _TMP14 = rsqrt(_TMP13);
    _TMP48 =  1.00000000000000000E000f/_TMP14;
    if (_TMP48 <  1.00000001490116120E-001f) { // if begin
        _TMP10 = dot(_unPackedNormal0017.xyz, _v0045);
        _occlusion10045 = max( 0.00000000000000000E000f, _TMP10*( 1.00000000000000000E000f + _TMP48));
        _TMP44 = _occlusion10045;
    } else {
        _TMP44 =  0.00000000000000000E000f;
    } // end if
    _occlusion = _occlusion + _TMP44;
    _TMP3 = float2(  0.00000000000000000E000f,  1.00000000000000000E000f) - ( 2.00000000000000000E000f*_random.xy)*_random.y;
    _sampleOffset1 = _TMP3*_rad;
    _coord21 = float2(_sampleOffset1.x* 7.07000017166137700E-001f - _sampleOffset1.y* 7.07000017166137700E-001f, _sampleOffset1.x* 7.07000017166137700E-001f + _sampleOffset1.y* 7.07000017166137700E-001f);
    _sampleOffset0021 = _sampleOffset1* 2.50000000000000000E-001f;
    _samplePositionVS0021 = _TMP52.Sample(_PositionMap, _texCoord2 + _sampleOffset0021);
    _diff0021 = _samplePositionVS0021.xyz - _positionVS1.xyz;
    _TMP11 = dot(_diff0021, _diff0021);
    _TMP12 = rsqrt(_TMP11);
    _v0021 = _TMP12*_diff0021;
    _TMP13 = dot(_diff0021, _diff0021);
    _TMP14 = rsqrt(_TMP13);
    _TMP24 =  1.00000000000000000E000f/_TMP14;
    if (_TMP24 <  1.00000001490116120E-001f) { // if begin
        _TMP10 = dot(_unPackedNormal0017.xyz, _v0021);
        _occlusion10021 = max( 0.00000000000000000E000f, _TMP10*( 1.00000000000000000E000f + _TMP24));
        _TMP20 = _occlusion10021;
    } else {
        _TMP20 =  0.00000000000000000E000f;
    } // end if
    _occlusion = _occlusion + _TMP20;
    _sampleOffset0029 = _coord21* 5.00000000000000000E-001f;
    _samplePositionVS0029 = _TMP52.Sample(_PositionMap, _texCoord2 + _sampleOffset0029);
    _diff0029 = _samplePositionVS0029.xyz - _positionVS1.xyz;
    _TMP11 = dot(_diff0029, _diff0029);
    _TMP12 = rsqrt(_TMP11);
    _v0029 = _TMP12*_diff0029;
    _TMP13 = dot(_diff0029, _diff0029);
    _TMP14 = rsqrt(_TMP13);
    _TMP32 =  1.00000000000000000E000f/_TMP14;
    if (_TMP32 <  1.00000001490116120E-001f) { // if begin
        _TMP10 = dot(_unPackedNormal0017.xyz, _v0029);
        _occlusion10029 = max( 0.00000000000000000E000f, _TMP10*( 1.00000000000000000E000f + _TMP32));
        _TMP28 = _occlusion10029;
    } else {
        _TMP28 =  0.00000000000000000E000f;
    } // end if
    _occlusion = _occlusion + _TMP28;
    _sampleOffset0037 = _sampleOffset1* 7.50000000000000000E-001f;
    _samplePositionVS0037 = _TMP52.Sample(_PositionMap, _texCoord2 + _sampleOffset0037);
    _diff0037 = _samplePositionVS0037.xyz - _positionVS1.xyz;
    _TMP11 = dot(_diff0037, _diff0037);
    _TMP12 = rsqrt(_TMP11);
    _v0037 = _TMP12*_diff0037;
    _TMP13 = dot(_diff0037, _diff0037);
    _TMP14 = rsqrt(_TMP13);
    _TMP40 =  1.00000000000000000E000f/_TMP14;
    if (_TMP40 <  1.00000001490116120E-001f) { // if begin
        _TMP10 = dot(_unPackedNormal0017.xyz, _v0037);
        _occlusion10037 = max( 0.00000000000000000E000f, _TMP10*( 1.00000000000000000E000f + _TMP40));
        _TMP36 = _occlusion10037;
    } else {
        _TMP36 =  0.00000000000000000E000f;
    } // end if
    _occlusion = _occlusion + _TMP36;
    _samplePositionVS0045 = _TMP52.Sample(_PositionMap, _texCoord2 + _coord21);
    _diff0045 = _samplePositionVS0045.xyz - _positionVS1.xyz;
    _TMP11 = dot(_diff0045, _diff0045);
    _TMP12 = rsqrt(_TMP11);
    _v0045 = _TMP12*_diff0045;
    _TMP13 = dot(_diff0045, _diff0045);
    _TMP14 = rsqrt(_TMP13);
    _TMP48 =  1.00000000000000000E000f/_TMP14;
    if (_TMP48 <  1.00000001490116120E-001f) { // if begin
        _TMP10 = dot(_unPackedNormal0017.xyz, _v0045);
        _occlusion10045 = max( 0.00000000000000000E000f, _TMP10*( 1.00000000000000000E000f + _TMP48));
        _TMP44 = _occlusion10045;
    } else {
        _TMP44 =  0.00000000000000000E000f;
    } // end if
    _occlusion = _occlusion + _TMP44;
    _TMP9 = dot(_random.xy, float2(  0.00000000000000000E000f, -1.00000000000000000E000f));
    _TMP3 = float2(  0.00000000000000000E000f, -1.00000000000000000E000f) - ( 2.00000000000000000E000f*_random.xy)*_TMP9;
    _sampleOffset1 = _TMP3*_rad;
    _coord21 = float2(_sampleOffset1.x* 7.07000017166137700E-001f - _sampleOffset1.y* 7.07000017166137700E-001f, _sampleOffset1.x* 7.07000017166137700E-001f + _sampleOffset1.y* 7.07000017166137700E-001f);
    _sampleOffset0021 = _sampleOffset1* 2.50000000000000000E-001f;
    _samplePositionVS0021 = _TMP52.Sample(_PositionMap, _texCoord2 + _sampleOffset0021);
    _diff0021 = _samplePositionVS0021.xyz - _positionVS1.xyz;
    _TMP11 = dot(_diff0021, _diff0021);
    _TMP12 = rsqrt(_TMP11);
    _v0021 = _TMP12*_diff0021;
    _TMP13 = dot(_diff0021, _diff0021);
    _TMP14 = rsqrt(_TMP13);
    _TMP24 =  1.00000000000000000E000f/_TMP14;
    if (_TMP24 <  1.00000001490116120E-001f) { // if begin
        _TMP10 = dot(_unPackedNormal0017.xyz, _v0021);
        _occlusion10021 = max( 0.00000000000000000E000f, _TMP10*( 1.00000000000000000E000f + _TMP24));
        _TMP20 = _occlusion10021;
    } else {
        _TMP20 =  0.00000000000000000E000f;
    } // end if
    _occlusion = _occlusion + _TMP20;
    _sampleOffset0029 = _coord21* 5.00000000000000000E-001f;
    _samplePositionVS0029 = _TMP52.Sample(_PositionMap, _texCoord2 + _sampleOffset0029);
    _diff0029 = _samplePositionVS0029.xyz - _positionVS1.xyz;
    _TMP11 = dot(_diff0029, _diff0029);
    _TMP12 = rsqrt(_TMP11);
    _v0029 = _TMP12*_diff0029;
    _TMP13 = dot(_diff0029, _diff0029);
    _TMP14 = rsqrt(_TMP13);
    _TMP32 =  1.00000000000000000E000f/_TMP14;
    if (_TMP32 <  1.00000001490116120E-001f) { // if begin
        _TMP10 = dot(_unPackedNormal0017.xyz, _v0029);
        _occlusion10029 = max( 0.00000000000000000E000f, _TMP10*( 1.00000000000000000E000f + _TMP32));
        _TMP28 = _occlusion10029;
    } else {
        _TMP28 =  0.00000000000000000E000f;
    } // end if
    _occlusion = _occlusion + _TMP28;
    _sampleOffset0037 = _sampleOffset1* 7.50000000000000000E-001f;
    _samplePositionVS0037 = _TMP52.Sample(_PositionMap, _texCoord2 + _sampleOffset0037);
    _diff0037 = _samplePositionVS0037.xyz - _positionVS1.xyz;
    _TMP11 = dot(_diff0037, _diff0037);
    _TMP12 = rsqrt(_TMP11);
    _v0037 = _TMP12*_diff0037;
    _TMP13 = dot(_diff0037, _diff0037);
    _TMP14 = rsqrt(_TMP13);
    _TMP40 =  1.00000000000000000E000f/_TMP14;
    if (_TMP40 <  1.00000001490116120E-001f) { // if begin
        _TMP10 = dot(_unPackedNormal0017.xyz, _v0037);
        _occlusion10037 = max( 0.00000000000000000E000f, _TMP10*( 1.00000000000000000E000f + _TMP40));
        _TMP36 = _occlusion10037;
    } else {
        _TMP36 =  0.00000000000000000E000f;
    } // end if
    _occlusion = _occlusion + _TMP36;
    _samplePositionVS0045 = _TMP52.Sample(_PositionMap, _texCoord2 + _coord21);
    _diff0045 = _samplePositionVS0045.xyz - _positionVS1.xyz;
    _TMP11 = dot(_diff0045, _diff0045);
    _TMP12 = rsqrt(_TMP11);
    _v0045 = _TMP12*_diff0045;
    _TMP13 = dot(_diff0045, _diff0045);
    _TMP14 = rsqrt(_TMP13);
    _TMP48 =  1.00000000000000000E000f/_TMP14;
    if (_TMP48 <  1.00000001490116120E-001f) { // if begin
        _TMP10 = dot(_unPackedNormal0017.xyz, _v0045);
        _occlusion10045 = max( 0.00000000000000000E000f, _TMP10*( 1.00000000000000000E000f + _TMP48));
        _TMP44 = _occlusion10045;
    } else {
        _TMP44 =  0.00000000000000000E000f;
    } // end if
    _occlusion = _occlusion + _TMP44;
    _occlusion = _occlusion/ 1.60000000000000000E001f;
    _occlusion =  1.00000000000000000E000f - _occlusion;
    return float4(_occlusion, _occlusion, _occlusion,  1.00000000000000000E000f);
} // main end
