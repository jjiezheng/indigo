// ps_4_0 output by Cg compiler
// cgc version 3.1.0013, build date Apr 18 2012
// command line args: -DDX11=1 -q -unroll all -profile ps_5_0
// source file: deferred_ssao.cg
//vendor NVIDIA Corporation
//version 3.1.0.13
//profile ps_5_0
//program ps
//semantic HalfPixel
//semantic Radius
//semantic NoiseScale
//semantic Kernel
//semantic Far
//semantic Near
//semantic NormalMap : TEXUNIT0
//semantic PositionMap : TEXUNIT1
//semantic NoiseMap : TEXUNIT2
//var float Radius :  : _Radius : -1 : 1
//var float2 NoiseScale :  : _NoiseScale : -1 : 1
//var sampler2D NormalMap : TEXUNIT0 : _NormalMap 0 : -1 : 1
//var sampler2D PositionMap : TEXUNIT1 : _PositionMap 1 : -1 : 1
//var sampler2D NoiseMap : TEXUNIT2 : _NoiseMap 2 : -1 : 1
//var float2 texCoord : $vin.TEXCOORD0 :  : 1 : 1
//var float4 ps : $vout.COLOR0 : COLOR0 : -1 : 1

#pragma pack_matrix(row_major)

struct VOutput {
    float4 _position1 : SV_Position;
    float2 _texCoord2 : TEXCOORD0;
};

struct X1X {
    float4 _POSITION : SV_Position;
    float2 _TEXCOORD0 : TEXCOORD0;
};

static float _TMP10;
static float _TMP13;
static float _TMP14;
static float _TMP12;
static float _TMP11;
static float2 _TMP4;
static float _TMP9;
static float _TMP3;
static float4 _TMP2;
static float4 _TMP1;
static float _TMP18;
static float _occlusion10019;
static float3 _v0019;
static float3 _diff0019;
static float4 _samplePositionVS0019;
static float2 _sampleOffset0019;
static float _TMP22;
static float _TMP26;
static float _occlusion10027;
static float3 _v0027;
static float3 _diff0027;
static float4 _samplePositionVS0027;
static float2 _sampleOffset0027;
static float _TMP30;
static float _TMP34;
static float _occlusion10035;
static float3 _v0035;
static float3 _diff0035;
static float4 _samplePositionVS0035;
static float2 _sampleOffset0035;
static float _TMP38;
static float _TMP42;
static float _occlusion10043;
static float3 _v0043;
static float3 _diff0043;
static float4 _samplePositionVS0043;
static float _TMP46;
Texture2D<float4> _TMP50 : register(t1);
Texture2D<float4> _TMP51 : register(t0);
Texture2D<float4> _TMP52 : register(t2);
uniform float _Radius;
uniform float2 _NoiseScale;
SamplerState _NormalMap : TEXUNIT0;
SamplerState _PositionMap : TEXUNIT1;
SamplerState _NoiseMap : TEXUNIT2;

 // main procedure, the original name was ps
float4 main( in X1X cin) : SV_Target0
{

    float2 _texCoord1;
    float4 _positionVS1;
    float3 _random;
    float _rad;
    float _occlusion;
    float2 _sampleOffset1;
    float2 _coord21;

    _texCoord1 = cin._TEXCOORD0;
    _positionVS1 = _TMP50.Sample(_PositionMap, _texCoord1);
    _TMP1 = _TMP51.Sample(_NormalMap, _texCoord1);
    _TMP2 = _TMP52.Sample(_NoiseMap, _texCoord1*_NoiseScale);
    _random = _TMP2.xyz* 2.00000000000000000E000f -  1.00000000000000000E000f;
    _TMP3 = abs(_positionVS1.z);
    _rad = _Radius/_TMP3;
    _TMP4 = float2(  1.00000000000000000E000f,  0.00000000000000000E000f) - ( 2.00000000000000000E000f*_random.xy)*_random.x;
    _sampleOffset1 = _TMP4*_rad;
    _coord21 = float2(_sampleOffset1.x* 7.07000017166137700E-001f - _sampleOffset1.y* 7.07000017166137700E-001f, _sampleOffset1.x* 7.07000017166137700E-001f + _sampleOffset1.y* 7.07000017166137700E-001f);
    _sampleOffset0019 = _sampleOffset1* 2.50000000000000000E-001f;
    _samplePositionVS0019 = _TMP50.Sample(_PositionMap, _texCoord1 + _sampleOffset0019);
    _diff0019 = _samplePositionVS0019.xyz - _positionVS1.xyz;
    _TMP11 = dot(_diff0019, _diff0019);
    _TMP12 = rsqrt(_TMP11);
    _v0019 = _TMP12*_diff0019;
    _TMP13 = dot(_diff0019, _diff0019);
    _TMP14 = rsqrt(_TMP13);
    _TMP22 =  1.00000000000000000E000f/_TMP14;
    if (_TMP22 <  1.00000001490116120E-001f) { // if begin
        _TMP10 = dot(_TMP1.xyz, _v0019);
        _occlusion10019 = max( 0.00000000000000000E000f, _TMP10*( 1.00000000000000000E000f + _TMP22));
        _TMP18 = _occlusion10019;
    } else {
        _TMP18 =  0.00000000000000000E000f;
    } // end if
    _sampleOffset0027 = _coord21* 5.00000000000000000E-001f;
    _samplePositionVS0027 = _TMP50.Sample(_PositionMap, _texCoord1 + _sampleOffset0027);
    _diff0027 = _samplePositionVS0027.xyz - _positionVS1.xyz;
    _TMP11 = dot(_diff0027, _diff0027);
    _TMP12 = rsqrt(_TMP11);
    _v0027 = _TMP12*_diff0027;
    _TMP13 = dot(_diff0027, _diff0027);
    _TMP14 = rsqrt(_TMP13);
    _TMP30 =  1.00000000000000000E000f/_TMP14;
    if (_TMP30 <  1.00000001490116120E-001f) { // if begin
        _TMP10 = dot(_TMP1.xyz, _v0027);
        _occlusion10027 = max( 0.00000000000000000E000f, _TMP10*( 1.00000000000000000E000f + _TMP30));
        _TMP26 = _occlusion10027;
    } else {
        _TMP26 =  0.00000000000000000E000f;
    } // end if
    _occlusion = _TMP18 + _TMP26;
    _sampleOffset0035 = _sampleOffset1* 7.50000000000000000E-001f;
    _samplePositionVS0035 = _TMP50.Sample(_PositionMap, _texCoord1 + _sampleOffset0035);
    _diff0035 = _samplePositionVS0035.xyz - _positionVS1.xyz;
    _TMP11 = dot(_diff0035, _diff0035);
    _TMP12 = rsqrt(_TMP11);
    _v0035 = _TMP12*_diff0035;
    _TMP13 = dot(_diff0035, _diff0035);
    _TMP14 = rsqrt(_TMP13);
    _TMP38 =  1.00000000000000000E000f/_TMP14;
    if (_TMP38 <  1.00000001490116120E-001f) { // if begin
        _TMP10 = dot(_TMP1.xyz, _v0035);
        _occlusion10035 = max( 0.00000000000000000E000f, _TMP10*( 1.00000000000000000E000f + _TMP38));
        _TMP34 = _occlusion10035;
    } else {
        _TMP34 =  0.00000000000000000E000f;
    } // end if
    _occlusion = _occlusion + _TMP34;
    _samplePositionVS0043 = _TMP50.Sample(_PositionMap, _texCoord1 + _coord21);
    _diff0043 = _samplePositionVS0043.xyz - _positionVS1.xyz;
    _TMP11 = dot(_diff0043, _diff0043);
    _TMP12 = rsqrt(_TMP11);
    _v0043 = _TMP12*_diff0043;
    _TMP13 = dot(_diff0043, _diff0043);
    _TMP14 = rsqrt(_TMP13);
    _TMP46 =  1.00000000000000000E000f/_TMP14;
    if (_TMP46 <  1.00000001490116120E-001f) { // if begin
        _TMP10 = dot(_TMP1.xyz, _v0043);
        _occlusion10043 = max( 0.00000000000000000E000f, _TMP10*( 1.00000000000000000E000f + _TMP46));
        _TMP42 = _occlusion10043;
    } else {
        _TMP42 =  0.00000000000000000E000f;
    } // end if
    _occlusion = _occlusion + _TMP42;
    _TMP9 = dot(_random.xy, float2( -1.00000000000000000E000f,  0.00000000000000000E000f));
    _TMP4 = float2( -1.00000000000000000E000f,  0.00000000000000000E000f) - ( 2.00000000000000000E000f*_random.xy)*_TMP9;
    _sampleOffset1 = _TMP4*_rad;
    _coord21 = float2(_sampleOffset1.x* 7.07000017166137700E-001f - _sampleOffset1.y* 7.07000017166137700E-001f, _sampleOffset1.x* 7.07000017166137700E-001f + _sampleOffset1.y* 7.07000017166137700E-001f);
    _sampleOffset0019 = _sampleOffset1* 2.50000000000000000E-001f;
    _samplePositionVS0019 = _TMP50.Sample(_PositionMap, _texCoord1 + _sampleOffset0019);
    _diff0019 = _samplePositionVS0019.xyz - _positionVS1.xyz;
    _TMP11 = dot(_diff0019, _diff0019);
    _TMP12 = rsqrt(_TMP11);
    _v0019 = _TMP12*_diff0019;
    _TMP13 = dot(_diff0019, _diff0019);
    _TMP14 = rsqrt(_TMP13);
    _TMP22 =  1.00000000000000000E000f/_TMP14;
    if (_TMP22 <  1.00000001490116120E-001f) { // if begin
        _TMP10 = dot(_TMP1.xyz, _v0019);
        _occlusion10019 = max( 0.00000000000000000E000f, _TMP10*( 1.00000000000000000E000f + _TMP22));
        _TMP18 = _occlusion10019;
    } else {
        _TMP18 =  0.00000000000000000E000f;
    } // end if
    _occlusion = _occlusion + _TMP18;
    _sampleOffset0027 = _coord21* 5.00000000000000000E-001f;
    _samplePositionVS0027 = _TMP50.Sample(_PositionMap, _texCoord1 + _sampleOffset0027);
    _diff0027 = _samplePositionVS0027.xyz - _positionVS1.xyz;
    _TMP11 = dot(_diff0027, _diff0027);
    _TMP12 = rsqrt(_TMP11);
    _v0027 = _TMP12*_diff0027;
    _TMP13 = dot(_diff0027, _diff0027);
    _TMP14 = rsqrt(_TMP13);
    _TMP30 =  1.00000000000000000E000f/_TMP14;
    if (_TMP30 <  1.00000001490116120E-001f) { // if begin
        _TMP10 = dot(_TMP1.xyz, _v0027);
        _occlusion10027 = max( 0.00000000000000000E000f, _TMP10*( 1.00000000000000000E000f + _TMP30));
        _TMP26 = _occlusion10027;
    } else {
        _TMP26 =  0.00000000000000000E000f;
    } // end if
    _occlusion = _occlusion + _TMP26;
    _sampleOffset0035 = _sampleOffset1* 7.50000000000000000E-001f;
    _samplePositionVS0035 = _TMP50.Sample(_PositionMap, _texCoord1 + _sampleOffset0035);
    _diff0035 = _samplePositionVS0035.xyz - _positionVS1.xyz;
    _TMP11 = dot(_diff0035, _diff0035);
    _TMP12 = rsqrt(_TMP11);
    _v0035 = _TMP12*_diff0035;
    _TMP13 = dot(_diff0035, _diff0035);
    _TMP14 = rsqrt(_TMP13);
    _TMP38 =  1.00000000000000000E000f/_TMP14;
    if (_TMP38 <  1.00000001490116120E-001f) { // if begin
        _TMP10 = dot(_TMP1.xyz, _v0035);
        _occlusion10035 = max( 0.00000000000000000E000f, _TMP10*( 1.00000000000000000E000f + _TMP38));
        _TMP34 = _occlusion10035;
    } else {
        _TMP34 =  0.00000000000000000E000f;
    } // end if
    _occlusion = _occlusion + _TMP34;
    _samplePositionVS0043 = _TMP50.Sample(_PositionMap, _texCoord1 + _coord21);
    _diff0043 = _samplePositionVS0043.xyz - _positionVS1.xyz;
    _TMP11 = dot(_diff0043, _diff0043);
    _TMP12 = rsqrt(_TMP11);
    _v0043 = _TMP12*_diff0043;
    _TMP13 = dot(_diff0043, _diff0043);
    _TMP14 = rsqrt(_TMP13);
    _TMP46 =  1.00000000000000000E000f/_TMP14;
    if (_TMP46 <  1.00000001490116120E-001f) { // if begin
        _TMP10 = dot(_TMP1.xyz, _v0043);
        _occlusion10043 = max( 0.00000000000000000E000f, _TMP10*( 1.00000000000000000E000f + _TMP46));
        _TMP42 = _occlusion10043;
    } else {
        _TMP42 =  0.00000000000000000E000f;
    } // end if
    _occlusion = _occlusion + _TMP42;
    _TMP4 = float2(  0.00000000000000000E000f,  1.00000000000000000E000f) - ( 2.00000000000000000E000f*_random.xy)*_random.y;
    _sampleOffset1 = _TMP4*_rad;
    _coord21 = float2(_sampleOffset1.x* 7.07000017166137700E-001f - _sampleOffset1.y* 7.07000017166137700E-001f, _sampleOffset1.x* 7.07000017166137700E-001f + _sampleOffset1.y* 7.07000017166137700E-001f);
    _sampleOffset0019 = _sampleOffset1* 2.50000000000000000E-001f;
    _samplePositionVS0019 = _TMP50.Sample(_PositionMap, _texCoord1 + _sampleOffset0019);
    _diff0019 = _samplePositionVS0019.xyz - _positionVS1.xyz;
    _TMP11 = dot(_diff0019, _diff0019);
    _TMP12 = rsqrt(_TMP11);
    _v0019 = _TMP12*_diff0019;
    _TMP13 = dot(_diff0019, _diff0019);
    _TMP14 = rsqrt(_TMP13);
    _TMP22 =  1.00000000000000000E000f/_TMP14;
    if (_TMP22 <  1.00000001490116120E-001f) { // if begin
        _TMP10 = dot(_TMP1.xyz, _v0019);
        _occlusion10019 = max( 0.00000000000000000E000f, _TMP10*( 1.00000000000000000E000f + _TMP22));
        _TMP18 = _occlusion10019;
    } else {
        _TMP18 =  0.00000000000000000E000f;
    } // end if
    _occlusion = _occlusion + _TMP18;
    _sampleOffset0027 = _coord21* 5.00000000000000000E-001f;
    _samplePositionVS0027 = _TMP50.Sample(_PositionMap, _texCoord1 + _sampleOffset0027);
    _diff0027 = _samplePositionVS0027.xyz - _positionVS1.xyz;
    _TMP11 = dot(_diff0027, _diff0027);
    _TMP12 = rsqrt(_TMP11);
    _v0027 = _TMP12*_diff0027;
    _TMP13 = dot(_diff0027, _diff0027);
    _TMP14 = rsqrt(_TMP13);
    _TMP30 =  1.00000000000000000E000f/_TMP14;
    if (_TMP30 <  1.00000001490116120E-001f) { // if begin
        _TMP10 = dot(_TMP1.xyz, _v0027);
        _occlusion10027 = max( 0.00000000000000000E000f, _TMP10*( 1.00000000000000000E000f + _TMP30));
        _TMP26 = _occlusion10027;
    } else {
        _TMP26 =  0.00000000000000000E000f;
    } // end if
    _occlusion = _occlusion + _TMP26;
    _sampleOffset0035 = _sampleOffset1* 7.50000000000000000E-001f;
    _samplePositionVS0035 = _TMP50.Sample(_PositionMap, _texCoord1 + _sampleOffset0035);
    _diff0035 = _samplePositionVS0035.xyz - _positionVS1.xyz;
    _TMP11 = dot(_diff0035, _diff0035);
    _TMP12 = rsqrt(_TMP11);
    _v0035 = _TMP12*_diff0035;
    _TMP13 = dot(_diff0035, _diff0035);
    _TMP14 = rsqrt(_TMP13);
    _TMP38 =  1.00000000000000000E000f/_TMP14;
    if (_TMP38 <  1.00000001490116120E-001f) { // if begin
        _TMP10 = dot(_TMP1.xyz, _v0035);
        _occlusion10035 = max( 0.00000000000000000E000f, _TMP10*( 1.00000000000000000E000f + _TMP38));
        _TMP34 = _occlusion10035;
    } else {
        _TMP34 =  0.00000000000000000E000f;
    } // end if
    _occlusion = _occlusion + _TMP34;
    _samplePositionVS0043 = _TMP50.Sample(_PositionMap, _texCoord1 + _coord21);
    _diff0043 = _samplePositionVS0043.xyz - _positionVS1.xyz;
    _TMP11 = dot(_diff0043, _diff0043);
    _TMP12 = rsqrt(_TMP11);
    _v0043 = _TMP12*_diff0043;
    _TMP13 = dot(_diff0043, _diff0043);
    _TMP14 = rsqrt(_TMP13);
    _TMP46 =  1.00000000000000000E000f/_TMP14;
    if (_TMP46 <  1.00000001490116120E-001f) { // if begin
        _TMP10 = dot(_TMP1.xyz, _v0043);
        _occlusion10043 = max( 0.00000000000000000E000f, _TMP10*( 1.00000000000000000E000f + _TMP46));
        _TMP42 = _occlusion10043;
    } else {
        _TMP42 =  0.00000000000000000E000f;
    } // end if
    _occlusion = _occlusion + _TMP42;
    _TMP9 = dot(_random.xy, float2(  0.00000000000000000E000f, -1.00000000000000000E000f));
    _TMP4 = float2(  0.00000000000000000E000f, -1.00000000000000000E000f) - ( 2.00000000000000000E000f*_random.xy)*_TMP9;
    _sampleOffset1 = _TMP4*_rad;
    _coord21 = float2(_sampleOffset1.x* 7.07000017166137700E-001f - _sampleOffset1.y* 7.07000017166137700E-001f, _sampleOffset1.x* 7.07000017166137700E-001f + _sampleOffset1.y* 7.07000017166137700E-001f);
    _sampleOffset0019 = _sampleOffset1* 2.50000000000000000E-001f;
    _samplePositionVS0019 = _TMP50.Sample(_PositionMap, _texCoord1 + _sampleOffset0019);
    _diff0019 = _samplePositionVS0019.xyz - _positionVS1.xyz;
    _TMP11 = dot(_diff0019, _diff0019);
    _TMP12 = rsqrt(_TMP11);
    _v0019 = _TMP12*_diff0019;
    _TMP13 = dot(_diff0019, _diff0019);
    _TMP14 = rsqrt(_TMP13);
    _TMP22 =  1.00000000000000000E000f/_TMP14;
    if (_TMP22 <  1.00000001490116120E-001f) { // if begin
        _TMP10 = dot(_TMP1.xyz, _v0019);
        _occlusion10019 = max( 0.00000000000000000E000f, _TMP10*( 1.00000000000000000E000f + _TMP22));
        _TMP18 = _occlusion10019;
    } else {
        _TMP18 =  0.00000000000000000E000f;
    } // end if
    _occlusion = _occlusion + _TMP18;
    _sampleOffset0027 = _coord21* 5.00000000000000000E-001f;
    _samplePositionVS0027 = _TMP50.Sample(_PositionMap, _texCoord1 + _sampleOffset0027);
    _diff0027 = _samplePositionVS0027.xyz - _positionVS1.xyz;
    _TMP11 = dot(_diff0027, _diff0027);
    _TMP12 = rsqrt(_TMP11);
    _v0027 = _TMP12*_diff0027;
    _TMP13 = dot(_diff0027, _diff0027);
    _TMP14 = rsqrt(_TMP13);
    _TMP30 =  1.00000000000000000E000f/_TMP14;
    if (_TMP30 <  1.00000001490116120E-001f) { // if begin
        _TMP10 = dot(_TMP1.xyz, _v0027);
        _occlusion10027 = max( 0.00000000000000000E000f, _TMP10*( 1.00000000000000000E000f + _TMP30));
        _TMP26 = _occlusion10027;
    } else {
        _TMP26 =  0.00000000000000000E000f;
    } // end if
    _occlusion = _occlusion + _TMP26;
    _sampleOffset0035 = _sampleOffset1* 7.50000000000000000E-001f;
    _samplePositionVS0035 = _TMP50.Sample(_PositionMap, _texCoord1 + _sampleOffset0035);
    _diff0035 = _samplePositionVS0035.xyz - _positionVS1.xyz;
    _TMP11 = dot(_diff0035, _diff0035);
    _TMP12 = rsqrt(_TMP11);
    _v0035 = _TMP12*_diff0035;
    _TMP13 = dot(_diff0035, _diff0035);
    _TMP14 = rsqrt(_TMP13);
    _TMP38 =  1.00000000000000000E000f/_TMP14;
    if (_TMP38 <  1.00000001490116120E-001f) { // if begin
        _TMP10 = dot(_TMP1.xyz, _v0035);
        _occlusion10035 = max( 0.00000000000000000E000f, _TMP10*( 1.00000000000000000E000f + _TMP38));
        _TMP34 = _occlusion10035;
    } else {
        _TMP34 =  0.00000000000000000E000f;
    } // end if
    _occlusion = _occlusion + _TMP34;
    _samplePositionVS0043 = _TMP50.Sample(_PositionMap, _texCoord1 + _coord21);
    _diff0043 = _samplePositionVS0043.xyz - _positionVS1.xyz;
    _TMP11 = dot(_diff0043, _diff0043);
    _TMP12 = rsqrt(_TMP11);
    _v0043 = _TMP12*_diff0043;
    _TMP13 = dot(_diff0043, _diff0043);
    _TMP14 = rsqrt(_TMP13);
    _TMP46 =  1.00000000000000000E000f/_TMP14;
    if (_TMP46 <  1.00000001490116120E-001f) { // if begin
        _TMP10 = dot(_TMP1.xyz, _v0043);
        _occlusion10043 = max( 0.00000000000000000E000f, _TMP10*( 1.00000000000000000E000f + _TMP46));
        _TMP42 = _occlusion10043;
    } else {
        _TMP42 =  0.00000000000000000E000f;
    } // end if
    _occlusion = _occlusion + _TMP42;
    _occlusion = _occlusion/ 1.60000000000000000E001f;
    _occlusion =  1.00000000000000000E000f - _occlusion;
    return float4(_occlusion, _occlusion, _occlusion,  1.00000000000000000E000f);
} // main end
