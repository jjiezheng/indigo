// ps_4_0 output by Cg compiler
// cgc version 3.1.0013, build date Apr 18 2012
// command line args: -DDX11=1 -q -unroll all -profile ps_5_0
// source file: gaussian_blur_vertical_16_tap.cg
//vendor NVIDIA Corporation
//version 3.1.0.13
//profile ps_5_0
//program ps
//semantic SourceMap : TEXUNIT0
//semantic SceneHeight
//var sampler2D SourceMap : TEXUNIT0 : _SourceMap 0 : -1 : 1
//var float SceneHeight :  : _SceneHeight : -1 : 1
//var float2 centerTap : $vin.TEXCOORD0 :  : 1 : 1
//var float4 ps : $vout.COLOR0 : COLOR0 : -1 : 1

#pragma pack_matrix(row_major)

struct VOutput {
    float4 _position1 : SV_Position;
    float2 _centerTap1 : TEXCOORD0;
};

struct X1X {
    float4 _POSITION : SV_Position;
    float2 _TEXCOORD0 : TEXCOORD0;
};

static float4 _TMP3;
static float4 _TMP2;
static float4 _TMP1;
Texture2D<float4> _TMP6 : register(t0);
SamplerState _SourceMap : TEXUNIT0;
float _SceneHeight;

 // main procedure, the original name was ps
float4 main( in X1X cin) : SV_Target0
{

    float2 _centerTap;
    float4 _color;
    float _texelSize;
    float2 _offset1;
    float2 _rightTap1;
    float2 _leftTap1;

    _centerTap = cin._TEXCOORD0;
    _TMP1 = _TMP6.Sample(_SourceMap, _centerTap);
    _color = _TMP1* 2.65961527824401860E-001f;
    _texelSize =  1.00000000000000000E000f/_SceneHeight;
    _offset1 = float2(  0.00000000000000000E000f,  2.00000000000000000E000f)*_texelSize;
    _rightTap1 = _centerTap + _offset1;
    _TMP2 = _TMP6.Sample(_SourceMap, _rightTap1);
    _color = _color + _TMP2* 2.12965339422225950E-001f;
    _leftTap1 = _centerTap - _offset1;
    _TMP3 = _TMP6.Sample(_SourceMap, _leftTap1);
    _color = _color + _TMP3* 2.12965339422225950E-001f;
    _offset1 = float2(  0.00000000000000000E000f,  3.00000000000000000E000f)*_texelSize;
    _rightTap1 = _centerTap + _offset1;
    _TMP2 = _TMP6.Sample(_SourceMap, _rightTap1);
    _color = _color + _TMP2* 1.09340049326419830E-001f;
    _leftTap1 = _centerTap - _offset1;
    _TMP3 = _TMP6.Sample(_SourceMap, _leftTap1);
    _color = _color + _TMP3* 1.09340049326419830E-001f;
    _offset1 = float2(  0.00000000000000000E000f,  4.00000000000000000E000f)*_texelSize;
    _rightTap1 = _centerTap + _offset1;
    _TMP2 = _TMP6.Sample(_SourceMap, _rightTap1);
    _color = _color + _TMP2* 3.59939783811569210E-002f;
    _leftTap1 = _centerTap - _offset1;
    _TMP3 = _TMP6.Sample(_SourceMap, _leftTap1);
    _color = _color + _TMP3* 3.59939783811569210E-002f;
    _offset1 = float2(  0.00000000000000000E000f,  5.00000000000000000E000f)*_texelSize;
    _rightTap1 = _centerTap + _offset1;
    _TMP2 = _TMP6.Sample(_SourceMap, _rightTap1);
    _color = _color + _TMP2* 7.59732397273182870E-003f;
    _leftTap1 = _centerTap - _offset1;
    _TMP3 = _TMP6.Sample(_SourceMap, _leftTap1);
    _color = _color + _TMP3* 7.59732397273182870E-003f;
    _offset1 = float2(  0.00000000000000000E000f,  6.00000000000000000E000f)*_texelSize;
    _rightTap1 = _centerTap + _offset1;
    _TMP2 = _TMP6.Sample(_SourceMap, _rightTap1);
    _color = _color + _TMP2* 1.02818594314157960E-003f;
    _leftTap1 = _centerTap - _offset1;
    _TMP3 = _TMP6.Sample(_SourceMap, _leftTap1);
    _color = _color + _TMP3* 1.02818594314157960E-003f;
    _offset1 = float2(  0.00000000000000000E000f,  7.00000000000000000E000f)*_texelSize;
    _rightTap1 = _centerTap + _offset1;
    _TMP2 = _TMP6.Sample(_SourceMap, _rightTap1);
    _color = _color + _TMP2* 8.92202006070874630E-005f;
    _leftTap1 = _centerTap - _offset1;
    _TMP3 = _TMP6.Sample(_SourceMap, _leftTap1);
    _color = _color + _TMP3* 8.92202006070874630E-005f;
    _offset1 = float2(  0.00000000000000000E000f,  8.00000000000000000E000f)*_texelSize;
    _rightTap1 = _centerTap + _offset1;
    _TMP2 = _TMP6.Sample(_SourceMap, _rightTap1);
    _color = _color + _TMP2* 4.96399979965644890E-006f;
    _leftTap1 = _centerTap - _offset1;
    _TMP3 = _TMP6.Sample(_SourceMap, _leftTap1);
    _color = _color + _TMP3* 4.96399979965644890E-006f;
    return _color;
} // main end
