// ps_4_0 output by Cg compiler
// cgc version 3.1.0013, build date Apr 18 2012
// command line args: -DDX11=1 -q -unroll all -profile ps_5_0
// source file: deferred_lighting_spot_light_shadow.cg
//vendor NVIDIA Corporation
//version 3.1.0.13
//profile ps_5_0
//program ps
//semantic DepthMap : TEXUNIT0
//semantic NormalMap : TEXUNIT1
//semantic ShadowMap : TEXUNIT2
//semantic LightInnerAngle
//semantic LightOuterAngle
//semantic LightDecay
//semantic LightDistance
//semantic ShadowMapSize
//semantic ShadowBias
//semantic LightBias
//semantic LightBleed
//semantic LightDirection
//semantic LightPosition
//semantic LightColor
//semantic DirectionToLight
//semantic ViewerPosition
//semantic ViewProjInv
//semantic LightViewProj
//semantic LightViewProjInv
//semantic WorldViewProj
//semantic NormalMatrix
//var sampler2D DepthMap : TEXUNIT0 : _DepthMap 0 : -1 : 1
//var sampler2D NormalMap : TEXUNIT1 : _NormalMap 1 : -1 : 1
//var sampler2D ShadowMap : TEXUNIT2 : _ShadowMap 2 : -1 : 1
//var float LightInnerAngle :  : _LightInnerAngle : -1 : 1
//var float LightOuterAngle :  : _LightOuterAngle : -1 : 1
//var float LightDistance :  : _LightDistance : -1 : 1
//var float ShadowBias :  : _ShadowBias : -1 : 1
//var float LightBias :  : _LightBias : -1 : 1
//var float LightBleed :  : _LightBleed : -1 : 1
//var float3 LightDirection :  : _LightDirection : -1 : 1
//var float3 LightPosition :  : _LightPosition : -1 : 1
//var float3 LightColor :  : _LightColor : -1 : 1
//var float3 DirectionToLight :  : _DirectionToLight : -1 : 1
//var float3 ViewerPosition :  : _ViewerPosition : -1 : 1
//var float4x4 ViewProjInv :  : _ViewProjInv[0], 4 : -1 : 1
//var float4x4 LightViewProj :  : _LightViewProj[0], 4 : -1 : 1
//var float3x3 NormalMatrix :  : _NormalMatrix[0], 3 : -1 : 1
//var float3 screenPosition : $vin.TEXCOORD0 :  : 1 : 1
//var float4 ps : $vout.COLOR0 : COLOR0 : -1 : 1

#pragma pack_matrix(row_major)

struct VOutput {
    float4 _position1 : SV_Position;
    float3 _screenPosition1 : TEXCOORD0;
};

struct X1X {
    float4 _POSITION : SV_Position;
    float3 _TEXCOORD0 : TEXCOORD0;
};

static float _TMP6;
static float _TMP5;
static float _TMP10;
static float _TMP9;
static float _TMP3;
static float _TMP2;
static float _TMP1;
static float4 _TMP8;
static float4 _TMP7;
static float2 _texCoord0014;
static float3 _unPackedNormal0018;
static float4 _r0022;
static float3 _v0024;
static float3 _r0026;
static float3 _v0026;
static float _y0030;
static float3 _r0034;
static float4 _r0038;
static float4 _v0038;
static float2 _texCoord0040;
static float4 _moments0042;
static float _zToCompare0042;
static float _TMP43;
static float _p_max0044;
static float _d0044;
static float _variance0044;
static bool _TMP45;
static float _TMP46;
static float _y0049;
Texture2D<float4> _TMP50 : register(t0);
Texture2D<float4> _TMP51 : register(t1);
Texture2D<float4> _TMP52 : register(t2);
SamplerState _DepthMap : TEXUNIT0;
SamplerState _NormalMap : TEXUNIT1;
SamplerState _ShadowMap : TEXUNIT2;
uniform float _LightInnerAngle;
uniform float _LightOuterAngle;
uniform float _LightDistance;
uniform float _ShadowBias;
uniform float _LightBias;
uniform float _LightBleed;
uniform float3 _LightDirection;
uniform float3 _LightPosition;
uniform float3 _LightColor;
uniform float3 _DirectionToLight;
uniform float3 _ViewerPosition;
uniform float4x4 _ViewProjInv;
uniform float4x4 _LightViewProj;
uniform float3x3 _NormalMatrix;

 // main procedure, the original name was ps
float4 main( in X1X cin) : SV_Target0
{

    float3 _screenPosition;
    float2 _screenPositionClip;
    float3 _normal;
    float4 _positionScreen;
    float3 _positionWorld;
    float4 _lightContribution;
    float3 _pixelToLight;
    float _lightDirectionDot;
    float _diffuseStrength;
    float3 _lightVectorViewSpace;
    float _lightOuterCos;
    float _lightInnerCos;
    float3 _viewerDirectionUnNormalized1;
    float3 _viewDirection1;
    float3 _floatVectorRaw1;
    float3 _floatVector1;
    float3 _pixelPositionFromLightNDC;

    _screenPosition = cin._TEXCOORD0;
    _screenPositionClip = _screenPosition.xy/_screenPosition.z;
    _texCoord0014 = _screenPositionClip* 5.00000000000000000E-001f +  5.00000000000000000E-001f;
    _texCoord0014.y =  1.00000000000000000E000f - _texCoord0014.y;
    _TMP7 = _TMP50.Sample(_DepthMap, _texCoord0014);
    _TMP8 = _TMP51.Sample(_NormalMap, _texCoord0014);
    _unPackedNormal0018 = _TMP8.xyz* 2.00000000000000000E000f -  1.00000000000000000E000f;
    _TMP9 = dot(_unPackedNormal0018.xyz, _unPackedNormal0018.xyz);
    _TMP10 = rsqrt(_TMP9);
    _normal = _TMP10*_unPackedNormal0018.xyz;
    _positionScreen = float4(_screenPositionClip.x, _screenPositionClip.y, _TMP7.x,  1.00000000000000000E000f);
    _r0022.x = dot(_ViewProjInv._11_12_13_14, _positionScreen);
    _r0022.y = dot(_ViewProjInv._21_22_23_24, _positionScreen);
    _r0022.z = dot(_ViewProjInv._31_32_33_34, _positionScreen);
    _r0022.w = dot(_ViewProjInv._41_42_43_44, _positionScreen);
    _positionWorld = _r0022.xyz/_r0022.w;
    _lightContribution = float4(  0.00000000000000000E000f,  0.00000000000000000E000f,  0.00000000000000000E000f,  1.00000000000000000E000f);
    _v0024 = _positionWorld - _LightPosition;
    _TMP9 = dot(_v0024, _v0024);
    _TMP10 = rsqrt(_TMP9);
    _pixelToLight = _TMP10*_v0024;
    _lightDirectionDot = dot(_LightDirection, _pixelToLight);
    _diffuseStrength =  0.00000000000000000E000f;
    _v0026 = -_LightDirection;
    _r0026.x = dot(_NormalMatrix._11_12_13, _v0026);
    _r0026.y = dot(_NormalMatrix._21_22_23, _v0026);
    _r0026.z = dot(_NormalMatrix._31_32_33, _v0026);
    _TMP9 = dot(_r0026, _r0026);
    _TMP10 = rsqrt(_TMP9);
    _lightVectorViewSpace = _TMP10*_r0026;
    _lightOuterCos = cos(_LightOuterAngle);
    _lightInnerCos = cos(_LightInnerAngle);
    if (_lightDirectionDot > _lightOuterCos) { // if begin
        _TMP1 = dot(_normal, _lightVectorViewSpace);
        _diffuseStrength = saturate(_TMP1);
        _y0030 = saturate((_lightDirectionDot - _lightOuterCos)/(_lightInnerCos - _lightOuterCos));
        _TMP2 = _y0030*_y0030*( 3.00000000000000000E000f -  2.00000000000000000E000f*_y0030);
        _diffuseStrength = _diffuseStrength*_TMP2;
    } // end if
    if (_lightDirectionDot > _lightInnerCos) { // if begin
        _TMP3 = dot(_normal, _lightVectorViewSpace);
        _diffuseStrength = saturate(_TMP3);
    } // end if
    _lightContribution.xyz = _LightColor*_diffuseStrength* 2.54999995231628420E000f*_LightDistance;
    if (_diffuseStrength >  0.00000000000000000E000f) { // if begin
        _viewerDirectionUnNormalized1 = _ViewerPosition - _positionWorld;
        _TMP9 = dot(_viewerDirectionUnNormalized1, _viewerDirectionUnNormalized1);
        _TMP10 = rsqrt(_TMP9);
        _viewDirection1 = _TMP10*_viewerDirectionUnNormalized1;
        _floatVectorRaw1 = _DirectionToLight + _viewDirection1;
        _r0034.x = dot(_NormalMatrix._11_12_13, _floatVectorRaw1);
        _r0034.y = dot(_NormalMatrix._21_22_23, _floatVectorRaw1);
        _r0034.z = dot(_NormalMatrix._31_32_33, _floatVectorRaw1);
        _TMP9 = dot(_r0034, _r0034);
        _TMP10 = rsqrt(_TMP9);
        _floatVector1 = _TMP10*_r0034;
        _TMP5 = dot(_normal, _floatVector1);
        _TMP6 = saturate(_TMP5);
        _lightContribution.w = _TMP6*_LightDistance;
    } // end if
    _v0038 = float4(_positionWorld.x, _positionWorld.y, _positionWorld.z,  1.00000000000000000E000f);
    _r0038.x = dot(_LightViewProj._11_12_13_14, _v0038);
    _r0038.y = dot(_LightViewProj._21_22_23_24, _v0038);
    _r0038.z = dot(_LightViewProj._31_32_33_34, _v0038);
    _r0038.w = dot(_LightViewProj._41_42_43_44, _v0038);
    _pixelPositionFromLightNDC = _r0038.xyz/_r0038.w;
    _texCoord0040 = _pixelPositionFromLightNDC.xy* 5.00000000000000000E-001f +  5.00000000000000000E-001f;
    _texCoord0040.y =  1.00000000000000000E000f - _texCoord0040.y;
    _zToCompare0042 = _pixelPositionFromLightNDC.z + _ShadowBias;
    _moments0042 = _TMP52.Sample(_ShadowMap, _texCoord0040);
    _TMP45 = true;
    if (_zToCompare0042 <= _moments0042.x) { // if begin
        _TMP43 =  1.00000000000000000E000f;
        _TMP45 = false;
    } // end if
    if (_TMP45) { // if begin
        _variance0044 = _moments0042.y - _moments0042.x*_moments0042.x;
        _variance0044 = max(_variance0044, _LightBias);
        _d0044 = _zToCompare0042 - _moments0042.x;
        _p_max0044 = _variance0044/(_variance0044 + _d0044*_d0044);
        _TMP43 = _p_max0044;
    } // end if
    _y0049 = saturate((_TMP43 - _LightBleed)/( 1.00000000000000000E000f - _LightBleed));
    _TMP46 = _y0049*_y0049*( 3.00000000000000000E000f -  2.00000000000000000E000f*_y0049);
    _lightContribution = _lightContribution*_TMP46;
    return _lightContribution;
} // main end
