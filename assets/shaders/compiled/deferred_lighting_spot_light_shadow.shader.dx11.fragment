// ps_4_0 output by Cg compiler
// cgc version 3.1.0013, build date Apr 18 2012
// command line args: -DDX11=1 -q -unroll all -profile ps_5_0
// source file: deferred_lighting_spot_light_shadow.cg
//vendor NVIDIA Corporation
//version 3.1.0.13
//profile ps_5_0
//program ps
//semantic DepthMap : TEXUNIT0
//semantic NormalMap : TEXUNIT1
//semantic ShadowMap : TEXUNIT2
//semantic LightInnerAngle
//semantic LightOuterAngle
//semantic LightDecay
//semantic LightDistance
//semantic ShadowMapSize
//semantic ShadowBias
//semantic LightBias
//semantic LightBleed
//semantic LightDirection
//semantic LightPosition
//semantic LightColor
//semantic DirectionToLight
//semantic ViewerPosition
//semantic ViewProjInv
//semantic LightViewProj
//semantic LightViewProjInv
//semantic WorldViewProj
//semantic NormalMatrix
//var sampler2D DepthMap : TEXUNIT0 : _DepthMap 0 : -1 : 1
//var sampler2D NormalMap : TEXUNIT1 : _NormalMap 1 : -1 : 1
//var sampler2D ShadowMap : TEXUNIT2 : _ShadowMap 2 : -1 : 1
//var float LightInnerAngle :  : _LightInnerAngle : -1 : 1
//var float LightOuterAngle :  : _LightOuterAngle : -1 : 1
//var float LightDistance :  : _LightDistance : -1 : 1
//var float ShadowBias :  : _ShadowBias : -1 : 1
//var float LightBias :  : _LightBias : -1 : 1
//var float LightBleed :  : _LightBleed : -1 : 1
//var float3 LightDirection :  : _LightDirection : -1 : 1
//var float3 LightPosition :  : _LightPosition : -1 : 1
//var float3 LightColor :  : _LightColor : -1 : 1
//var float3 DirectionToLight :  : _DirectionToLight : -1 : 1
//var float3 ViewerPosition :  : _ViewerPosition : -1 : 1
//var float4x4 ViewProjInv :  : _ViewProjInv[0], 4 : -1 : 1
//var float4x4 LightViewProj :  : _LightViewProj[0], 4 : -1 : 1
//var float3 screenPosition : $vin.TEXCOORD0 :  : 1 : 1
//var float4 ps : $vout.COLOR0 : COLOR0 : -1 : 1

#pragma pack_matrix(row_major)

struct VOutput {
    float4 _position1 : SV_Position;
    float3 _screenPosition1 : TEXCOORD0;
};

struct X1X {
    float4 _POSITION : SV_Position;
    float3 _TEXCOORD0 : TEXCOORD0;
};

static float _TMP4;
static float _TMP3;
static float _TMP8;
static float _TMP7;
static float _TMP2;
static float _TMP1;
static float _TMP0;
static float4 _TMP6;
static float4 _TMP5;
static float2 _texCoord0012;
static float3 _unPackedNormal0016;
static float4 _r0020;
static float3 _v0022;
static float _y0024;
static float4 _r0028;
static float4 _v0028;
static float2 _texCoord0030;
static float4 _moments0032;
static float _zToCompare0032;
static float _TMP33;
static float _p_max0034;
static float _d0034;
static float _variance0034;
static bool _TMP35;
static float _TMP36;
static float _y0039;
Texture2D<float4> _TMP40 : register(t0);
Texture2D<float4> _TMP41 : register(t1);
Texture2D<float4> _TMP42 : register(t2);
SamplerState _DepthMap : TEXUNIT0;
SamplerState _NormalMap : TEXUNIT1;
SamplerState _ShadowMap : TEXUNIT2;
uniform float _LightInnerAngle;
uniform float _LightOuterAngle;
uniform float _LightDistance;
uniform float _ShadowBias;
uniform float _LightBias;
uniform float _LightBleed;
uniform float3 _LightDirection;
uniform float3 _LightPosition;
uniform float3 _LightColor;
uniform float3 _DirectionToLight;
uniform float3 _ViewerPosition;
uniform float4x4 _ViewProjInv;
uniform float4x4 _LightViewProj;

 // main procedure, the original name was ps
float4 main( in X1X cin) : SV_Target0
{

    float3 _screenPosition;
    float2 _screenPositionClip;
    float3 _normal;
    float4 _positionScreen;
    float3 _positionWorld;
    float4 _lightContribution;
    float3 _pixelToLight;
    float _lightDirectionDot;
    float _diffuseStrength;
    float _lightOuterCos;
    float _lightInnerCos;
    float3 _viewerDirectionUnNormalized1;
    float3 _viewDirection1;
    float3 _floatVectorRaw1;
    float3 _pixelPositionFromLightNDC;

    _screenPosition = cin._TEXCOORD0;
    _screenPositionClip = _screenPosition.xy/_screenPosition.z;
    _texCoord0012 = _screenPositionClip*  5.00000000000000000E-01f +   5.00000000000000000E-01f;
    _texCoord0012.y =   1.00000000000000000E00f - _texCoord0012.y;
    _TMP5 = _TMP40.Sample(_DepthMap, _texCoord0012);
    _TMP6 = _TMP41.Sample(_NormalMap, _texCoord0012);
    _unPackedNormal0016 = _TMP6.xyz*  2.00000000000000000E00f -   1.00000000000000000E00f;
    _TMP7 = dot(_unPackedNormal0016.xyz, _unPackedNormal0016.xyz);
    _TMP8 = rsqrt(_TMP7);
    _normal = _TMP8*_unPackedNormal0016.xyz;
    _positionScreen = float4(_screenPositionClip.x, _screenPositionClip.y, _TMP5.x,   1.00000000000000000E00f);
    _r0020.x = dot(_ViewProjInv._11_12_13_14, _positionScreen);
    _r0020.y = dot(_ViewProjInv._21_22_23_24, _positionScreen);
    _r0020.z = dot(_ViewProjInv._31_32_33_34, _positionScreen);
    _r0020.w = dot(_ViewProjInv._41_42_43_44, _positionScreen);
    _positionWorld = _r0020.xyz/_r0020.w;
    _lightContribution = float4(   0.00000000000000000E00f,   0.00000000000000000E00f,   0.00000000000000000E00f,   1.00000000000000000E00f);
    _v0022 = _positionWorld - _LightPosition;
    _TMP7 = dot(_v0022, _v0022);
    _TMP8 = rsqrt(_TMP7);
    _pixelToLight = _TMP8*_v0022;
    _lightDirectionDot = dot(_LightDirection, _pixelToLight);
    _diffuseStrength =   0.00000000000000000E00f;
    _lightOuterCos = cos(_LightOuterAngle);
    _lightInnerCos = cos(_LightInnerAngle);
    if (_lightDirectionDot > _lightOuterCos) { // if begin
        _TMP0 = dot(_normal, _DirectionToLight);
        _diffuseStrength = saturate(_TMP0);
        _y0024 = saturate((_lightDirectionDot - _lightOuterCos)/(_lightInnerCos - _lightOuterCos));
        _TMP1 = _y0024*_y0024*(  3.00000000000000000E00f -   2.00000000000000000E00f*_y0024);
        _diffuseStrength = _diffuseStrength*_TMP1;
    } // end if
    if (_lightDirectionDot > _lightInnerCos) { // if begin
        _TMP2 = dot(_normal, _DirectionToLight);
        _diffuseStrength = saturate(_TMP2);
    } // end if
    _lightContribution.xyz = _LightColor*_diffuseStrength*  2.54999995231628418E00f*_LightDistance;
    if (_diffuseStrength >   0.00000000000000000E00f) { // if begin
        _viewerDirectionUnNormalized1 = _ViewerPosition - _positionWorld;
        _TMP7 = dot(_viewerDirectionUnNormalized1, _viewerDirectionUnNormalized1);
        _TMP8 = rsqrt(_TMP7);
        _viewDirection1 = _TMP8*_viewerDirectionUnNormalized1;
        _floatVectorRaw1 = _DirectionToLight + _viewDirection1;
        _TMP3 = dot(_normal, _floatVectorRaw1);
        _TMP4 = saturate(_TMP3);
        _lightContribution.w = _TMP4*_LightDistance;
    } // end if
    _v0028 = float4(_positionWorld.x, _positionWorld.y, _positionWorld.z,   1.00000000000000000E00f);
    _r0028.x = dot(_LightViewProj._11_12_13_14, _v0028);
    _r0028.y = dot(_LightViewProj._21_22_23_24, _v0028);
    _r0028.z = dot(_LightViewProj._31_32_33_34, _v0028);
    _r0028.w = dot(_LightViewProj._41_42_43_44, _v0028);
    _pixelPositionFromLightNDC = _r0028.xyz/_r0028.w;
    _texCoord0030 = _pixelPositionFromLightNDC.xy*  5.00000000000000000E-01f +   5.00000000000000000E-01f;
    _texCoord0030.y =   1.00000000000000000E00f - _texCoord0030.y;
    _zToCompare0032 = _pixelPositionFromLightNDC.z + _ShadowBias;
    _moments0032 = _TMP42.Sample(_ShadowMap, _texCoord0030);
    _TMP35 = true;
    if (_zToCompare0032 <= _moments0032.x) { // if begin
        _TMP33 =   1.00000000000000000E00f;
        _TMP35 = false;
    } // end if
    if (_TMP35) { // if begin
        _variance0034 = _moments0032.y - _moments0032.x*_moments0032.x;
        _variance0034 = max(_variance0034, _LightBias);
        _d0034 = _zToCompare0032 - _moments0032.x;
        _p_max0034 = _variance0034/(_variance0034 + _d0034*_d0034);
        _TMP33 = _p_max0034;
    } // end if
    _y0039 = saturate((_TMP33 - _LightBleed)/(  1.00000000000000000E00f - _LightBleed));
    _TMP36 = _y0039*_y0039*(  3.00000000000000000E00f -   2.00000000000000000E00f*_y0039);
    _lightContribution = _lightContribution*_TMP36;
    return _lightContribution;
} // main end
