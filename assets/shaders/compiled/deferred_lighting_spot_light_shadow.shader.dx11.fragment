// ps_4_0 output by Cg compiler
// cgc version 3.1.0013, build date Apr 18 2012
// command line args: -DDX11=1 -q -unroll all -profile ps_5_0
// source file: deferred_lighting_spot_light_shadow.cg
//vendor NVIDIA Corporation
//version 3.1.0.13
//profile ps_5_0
//program ps
//semantic DepthMap : TEXUNIT0
//semantic NormalMap : TEXUNIT1
//semantic ShadowMap : TEXUNIT2
//semantic LightInnerAngle
//semantic LightOuterAngle
//semantic LightDecay
//semantic LightDistance
//semantic ShadowMapSize
//semantic LightDirection
//semantic LightPosition
//semantic LightColor
//semantic DirectionToLight
//semantic ViewerPosition
//semantic ViewProjInv
//semantic LightViewProj
//semantic LightViewProjInv
//semantic WorldViewProj
//semantic NormalMatrix
//var sampler2D DepthMap : TEXUNIT0 : _DepthMap 0 : -1 : 1
//var sampler2D NormalMap : TEXUNIT1 : _NormalMap 1 : -1 : 1
//var sampler2D ShadowMap : TEXUNIT2 : _ShadowMap 2 : -1 : 1
//var float LightInnerAngle :  : _LightInnerAngle : -1 : 1
//var float LightOuterAngle :  : _LightOuterAngle : -1 : 1
//var float LightDistance :  : _LightDistance : -1 : 1
//var float2 ShadowMapSize :  : _ShadowMapSize : -1 : 1
//var float3 LightDirection :  : _LightDirection : -1 : 1
//var float3 LightPosition :  : _LightPosition : -1 : 1
//var float3 LightColor :  : _LightColor : -1 : 1
//var float3 DirectionToLight :  : _DirectionToLight : -1 : 1
//var float3 ViewerPosition :  : _ViewerPosition : -1 : 1
//var float4x4 ViewProjInv :  : _ViewProjInv[0], 4 : -1 : 1
//var float4x4 LightViewProj :  : _LightViewProj[0], 4 : -1 : 1
//var float3 screenPosition : $vin.TEXCOORD0 :  : 1 : 1
//var float4 ps : $vout.COLOR0 : COLOR0 : -1 : 1

#pragma pack_matrix(row_major)

struct VOutput {
    float4 _position1 : SV_Position;
    float3 _screenPosition1 : TEXCOORD0;
};

struct X1X {
    float4 _POSITION : SV_Position;
    float3 _TEXCOORD0 : TEXCOORD0;
};

static float4 _TMP10;
static float _TMP4;
static float _TMP3;
static float _TMP8;
static float _TMP7;
static float _TMP2;
static float _TMP1;
static float _TMP0;
static float4 _TMP6;
static float2 _TMP5;
static float4 _unPackedNormal0021;
static float4 _normalData0021;
static float4 _r0025;
static float3 _v0027;
static float _y0029;
static float4 _r0033;
static float4 _v0033;
static float2 _shadowCoordOffset10035;
static float _sum0035;
static float _shadowFactor0035;
static float4 _t0039;
Texture2D<float4> _TMP40 : register(t0);
Texture2D<float4> _TMP41 : register(t1);
Texture2D<float4> _TMP42 : register(t2);
SamplerState _DepthMap : TEXUNIT0;
SamplerState _NormalMap : TEXUNIT1;
SamplerComparisonState _ShadowMap : TEXUNIT2;
uniform float _LightInnerAngle;
uniform float _LightOuterAngle;
uniform float _LightDistance;
uniform float2 _ShadowMapSize;
uniform float3 _LightDirection;
uniform float3 _LightPosition;
uniform float3 _LightColor;
uniform float3 _DirectionToLight;
uniform float3 _ViewerPosition;
uniform float4x4 _ViewProjInv;
uniform float4x4 _LightViewProj;

 // main procedure, the original name was ps
float4 main( in X1X cin) : SV_Target0
{

    float3 _screenPosition;
    float2 _screenPositionClip;
    float2 _texCoord3;
    float3 _normal;
    float4 _positionScreen;
    float3 _positionWorld;
    float4 _lightContribution;
    float3 _pixelToLight;
    float _lightDirectionDot;
    float _diffuseStrength;
    float _lightOuterCos;
    float _lightInnerCos;
    float3 _viewerDirectionUnNormalized1;
    float3 _viewDirection1;
    float3 _floatVectorRaw1;
    float3 _pixelPositionFromLight;
    float2 _shadowCoord1;
    float _shadowFactor1;

    _screenPosition = cin._TEXCOORD0;
    _screenPositionClip = _screenPosition.xy/_screenPosition.z;
    _TMP5 = float2(_screenPositionClip.x, -_screenPositionClip.y);
    _texCoord3 =  5.00000000000000000E-001f*(_TMP5 + float2(  1.00000000000000000E000f,  1.00000000000000000E000f));
    _TMP6 = _TMP40.Sample(_DepthMap, _texCoord3);
    _normalData0021 = _TMP41.Sample(_NormalMap, _texCoord3);
    _unPackedNormal0021 = _normalData0021* 2.00000000000000000E000f -  1.00000000000000000E000f;
    _TMP7 = dot(_unPackedNormal0021.xyz, _unPackedNormal0021.xyz);
    _TMP8 = rsqrt(_TMP7);
    _normal = _TMP8*_unPackedNormal0021.xyz;
    _positionScreen = float4(_screenPositionClip.x, _screenPositionClip.y, _TMP6.x,  1.00000000000000000E000f);
    _r0025.x = dot(_ViewProjInv._11_12_13_14, _positionScreen);
    _r0025.y = dot(_ViewProjInv._21_22_23_24, _positionScreen);
    _r0025.z = dot(_ViewProjInv._31_32_33_34, _positionScreen);
    _r0025.w = dot(_ViewProjInv._41_42_43_44, _positionScreen);
    _positionWorld = _r0025.xyz/_r0025.w;
    _lightContribution = float4(  0.00000000000000000E000f,  0.00000000000000000E000f,  0.00000000000000000E000f,  0.00000000000000000E000f);
    _v0027 = _positionWorld - _LightPosition;
    _TMP7 = dot(_v0027, _v0027);
    _TMP8 = rsqrt(_TMP7);
    _pixelToLight = _TMP8*_v0027;
    _lightDirectionDot = dot(_LightDirection, _pixelToLight);
    _diffuseStrength =  0.00000000000000000E000f;
    _lightOuterCos = cos(_LightOuterAngle);
    _lightInnerCos = cos(_LightInnerAngle);
    if (_lightDirectionDot > _lightOuterCos) { // if begin
        _TMP0 = dot(_normal, _DirectionToLight);
        _diffuseStrength = saturate(_TMP0);
        _y0029 = saturate((_lightDirectionDot - _lightOuterCos)/(_lightInnerCos - _lightOuterCos));
        _TMP1 = _y0029*_y0029*( 3.00000000000000000E000f -  2.00000000000000000E000f*_y0029);
        _diffuseStrength = _diffuseStrength*_TMP1;
    } // end if
    if (_lightDirectionDot > _lightInnerCos) { // if begin
        _TMP2 = dot(_normal, _DirectionToLight);
        _diffuseStrength = saturate(_TMP2);
    } // end if
    _lightContribution.xyz = _LightColor*_diffuseStrength* 2.54999995231628420E000f*_LightDistance;
    if (_diffuseStrength >  0.00000000000000000E000f) { // if begin
        _viewerDirectionUnNormalized1 = _ViewerPosition - _positionWorld;
        _TMP7 = dot(_viewerDirectionUnNormalized1, _viewerDirectionUnNormalized1);
        _TMP8 = rsqrt(_TMP7);
        _viewDirection1 = _TMP8*_viewerDirectionUnNormalized1;
        _floatVectorRaw1 = _DirectionToLight + _viewDirection1;
        _TMP3 = dot(_normal, _floatVectorRaw1);
        _TMP4 = saturate(_TMP3);
        _lightContribution.w = _TMP4*_LightDistance;
    } // end if
    _v0033 = float4(_positionWorld.x, _positionWorld.y, _positionWorld.z,  1.00000000000000000E000f);
    _r0033.x = dot(_LightViewProj._11_12_13_14, _v0033);
    _r0033.y = dot(_LightViewProj._21_22_23_24, _v0033);
    _r0033.z = dot(_LightViewProj._31_32_33_34, _v0033);
    _r0033.w = dot(_LightViewProj._41_42_43_44, _v0033);
    _pixelPositionFromLight = _r0033.xyz/_r0033.w;
    _shadowCoord1 =  5.00000000000000000E-001f + _pixelPositionFromLight.xy* 5.00000000000000000E-001f;
    _shadowCoord1.y =  1.00000000000000000E000f - _shadowCoord1.y;
    _shadowCoordOffset10035 = _shadowCoord1 + float2(-1.50000000000000000E000f*_ShadowMapSize.x, -1.50000000000000000E000f*_ShadowMapSize.y);
    _t0039 = float4(_shadowCoordOffset10035.x, _shadowCoordOffset10035.y, _pixelPositionFromLight.z,  1.00000000000000000E000f);
    _TMP10 = _TMP42.SampleCmp(_ShadowMap, (_t0039.xyz/_t0039.w).xy, (_t0039.xyz/_t0039.w).z);
    _sum0035 = _TMP10.x;
    _shadowCoordOffset10035 = _shadowCoord1 + float2(-5.00000000000000000E-001f*_ShadowMapSize.x, -1.50000000000000000E000f*_ShadowMapSize.y);
    _t0039 = float4(_shadowCoordOffset10035.x, _shadowCoordOffset10035.y, _pixelPositionFromLight.z,  1.00000000000000000E000f);
    _TMP10 = _TMP42.SampleCmp(_ShadowMap, (_t0039.xyz/_t0039.w).xy, (_t0039.xyz/_t0039.w).z);
    _sum0035 = _sum0035 + _TMP10.x;
    _shadowCoordOffset10035 = _shadowCoord1 + float2( 5.00000000000000000E-001f*_ShadowMapSize.x, -1.50000000000000000E000f*_ShadowMapSize.y);
    _t0039 = float4(_shadowCoordOffset10035.x, _shadowCoordOffset10035.y, _pixelPositionFromLight.z,  1.00000000000000000E000f);
    _TMP10 = _TMP42.SampleCmp(_ShadowMap, (_t0039.xyz/_t0039.w).xy, (_t0039.xyz/_t0039.w).z);
    _sum0035 = _sum0035 + _TMP10.x;
    _shadowCoordOffset10035 = _shadowCoord1 + float2( 1.50000000000000000E000f*_ShadowMapSize.x, -1.50000000000000000E000f*_ShadowMapSize.y);
    _t0039 = float4(_shadowCoordOffset10035.x, _shadowCoordOffset10035.y, _pixelPositionFromLight.z,  1.00000000000000000E000f);
    _TMP10 = _TMP42.SampleCmp(_ShadowMap, (_t0039.xyz/_t0039.w).xy, (_t0039.xyz/_t0039.w).z);
    _sum0035 = _sum0035 + _TMP10.x;
    _shadowCoordOffset10035 = _shadowCoord1 + float2(-1.50000000000000000E000f*_ShadowMapSize.x, -5.00000000000000000E-001f*_ShadowMapSize.y);
    _t0039 = float4(_shadowCoordOffset10035.x, _shadowCoordOffset10035.y, _pixelPositionFromLight.z,  1.00000000000000000E000f);
    _TMP10 = _TMP42.SampleCmp(_ShadowMap, (_t0039.xyz/_t0039.w).xy, (_t0039.xyz/_t0039.w).z);
    _sum0035 = _sum0035 + _TMP10.x;
    _shadowCoordOffset10035 = _shadowCoord1 + float2(-5.00000000000000000E-001f*_ShadowMapSize.x, -5.00000000000000000E-001f*_ShadowMapSize.y);
    _t0039 = float4(_shadowCoordOffset10035.x, _shadowCoordOffset10035.y, _pixelPositionFromLight.z,  1.00000000000000000E000f);
    _TMP10 = _TMP42.SampleCmp(_ShadowMap, (_t0039.xyz/_t0039.w).xy, (_t0039.xyz/_t0039.w).z);
    _sum0035 = _sum0035 + _TMP10.x;
    _shadowCoordOffset10035 = _shadowCoord1 + float2( 5.00000000000000000E-001f*_ShadowMapSize.x, -5.00000000000000000E-001f*_ShadowMapSize.y);
    _t0039 = float4(_shadowCoordOffset10035.x, _shadowCoordOffset10035.y, _pixelPositionFromLight.z,  1.00000000000000000E000f);
    _TMP10 = _TMP42.SampleCmp(_ShadowMap, (_t0039.xyz/_t0039.w).xy, (_t0039.xyz/_t0039.w).z);
    _sum0035 = _sum0035 + _TMP10.x;
    _shadowCoordOffset10035 = _shadowCoord1 + float2( 1.50000000000000000E000f*_ShadowMapSize.x, -5.00000000000000000E-001f*_ShadowMapSize.y);
    _t0039 = float4(_shadowCoordOffset10035.x, _shadowCoordOffset10035.y, _pixelPositionFromLight.z,  1.00000000000000000E000f);
    _TMP10 = _TMP42.SampleCmp(_ShadowMap, (_t0039.xyz/_t0039.w).xy, (_t0039.xyz/_t0039.w).z);
    _sum0035 = _sum0035 + _TMP10.x;
    _shadowCoordOffset10035 = _shadowCoord1 + float2(-1.50000000000000000E000f*_ShadowMapSize.x,  5.00000000000000000E-001f*_ShadowMapSize.y);
    _t0039 = float4(_shadowCoordOffset10035.x, _shadowCoordOffset10035.y, _pixelPositionFromLight.z,  1.00000000000000000E000f);
    _TMP10 = _TMP42.SampleCmp(_ShadowMap, (_t0039.xyz/_t0039.w).xy, (_t0039.xyz/_t0039.w).z);
    _sum0035 = _sum0035 + _TMP10.x;
    _shadowCoordOffset10035 = _shadowCoord1 + float2(-5.00000000000000000E-001f*_ShadowMapSize.x,  5.00000000000000000E-001f*_ShadowMapSize.y);
    _t0039 = float4(_shadowCoordOffset10035.x, _shadowCoordOffset10035.y, _pixelPositionFromLight.z,  1.00000000000000000E000f);
    _TMP10 = _TMP42.SampleCmp(_ShadowMap, (_t0039.xyz/_t0039.w).xy, (_t0039.xyz/_t0039.w).z);
    _sum0035 = _sum0035 + _TMP10.x;
    _shadowCoordOffset10035 = _shadowCoord1 + float2( 5.00000000000000000E-001f*_ShadowMapSize.x,  5.00000000000000000E-001f*_ShadowMapSize.y);
    _t0039 = float4(_shadowCoordOffset10035.x, _shadowCoordOffset10035.y, _pixelPositionFromLight.z,  1.00000000000000000E000f);
    _TMP10 = _TMP42.SampleCmp(_ShadowMap, (_t0039.xyz/_t0039.w).xy, (_t0039.xyz/_t0039.w).z);
    _sum0035 = _sum0035 + _TMP10.x;
    _shadowCoordOffset10035 = _shadowCoord1 + float2( 1.50000000000000000E000f*_ShadowMapSize.x,  5.00000000000000000E-001f*_ShadowMapSize.y);
    _t0039 = float4(_shadowCoordOffset10035.x, _shadowCoordOffset10035.y, _pixelPositionFromLight.z,  1.00000000000000000E000f);
    _TMP10 = _TMP42.SampleCmp(_ShadowMap, (_t0039.xyz/_t0039.w).xy, (_t0039.xyz/_t0039.w).z);
    _sum0035 = _sum0035 + _TMP10.x;
    _shadowCoordOffset10035 = _shadowCoord1 + float2(-1.50000000000000000E000f*_ShadowMapSize.x,  1.50000000000000000E000f*_ShadowMapSize.y);
    _t0039 = float4(_shadowCoordOffset10035.x, _shadowCoordOffset10035.y, _pixelPositionFromLight.z,  1.00000000000000000E000f);
    _TMP10 = _TMP42.SampleCmp(_ShadowMap, (_t0039.xyz/_t0039.w).xy, (_t0039.xyz/_t0039.w).z);
    _sum0035 = _sum0035 + _TMP10.x;
    _shadowCoordOffset10035 = _shadowCoord1 + float2(-5.00000000000000000E-001f*_ShadowMapSize.x,  1.50000000000000000E000f*_ShadowMapSize.y);
    _t0039 = float4(_shadowCoordOffset10035.x, _shadowCoordOffset10035.y, _pixelPositionFromLight.z,  1.00000000000000000E000f);
    _TMP10 = _TMP42.SampleCmp(_ShadowMap, (_t0039.xyz/_t0039.w).xy, (_t0039.xyz/_t0039.w).z);
    _sum0035 = _sum0035 + _TMP10.x;
    _shadowCoordOffset10035 = _shadowCoord1 + float2( 5.00000000000000000E-001f*_ShadowMapSize.x,  1.50000000000000000E000f*_ShadowMapSize.y);
    _t0039 = float4(_shadowCoordOffset10035.x, _shadowCoordOffset10035.y, _pixelPositionFromLight.z,  1.00000000000000000E000f);
    _TMP10 = _TMP42.SampleCmp(_ShadowMap, (_t0039.xyz/_t0039.w).xy, (_t0039.xyz/_t0039.w).z);
    _sum0035 = _sum0035 + _TMP10.x;
    _shadowCoordOffset10035 = _shadowCoord1 + float2( 1.50000000000000000E000f*_ShadowMapSize.x,  1.50000000000000000E000f*_ShadowMapSize.y);
    _t0039 = float4(_shadowCoordOffset10035.x, _shadowCoordOffset10035.y, _pixelPositionFromLight.z,  1.00000000000000000E000f);
    _TMP10 = _TMP42.SampleCmp(_ShadowMap, (_t0039.xyz/_t0039.w).xy, (_t0039.xyz/_t0039.w).z);
    _sum0035 = _sum0035 + _TMP10.x;
    _shadowFactor0035 = _sum0035/ 1.60000000000000000E001f;
    _shadowFactor1 = _shadowFactor0035 +  1.00000000000000000E000f;
    _lightContribution = _lightContribution*_shadowFactor1;
    return _lightContribution;
} // main end
