// glslf output by Cg compiler
// cgc version 3.1.0013, build date Apr 18 2012
// command line args: -q -profile glslf
// source file: deferred_lighting_spot_light.cg
//vendor NVIDIA Corporation
//version 3.1.0.13
//profile glslf
//program ps
//semantic DepthMap : TEXUNIT0
//semantic NormalMap : TEXUNIT1
//semantic ShadowMap : TEXUNIT2
//semantic LightInnerAngle
//semantic LightOuterAngle
//semantic LightDecay
//semantic ViewPosition
//semantic LightDirection
//semantic LightPosition
//semantic LightColor
//semantic ViewProjInv
//semantic LightViewProj
//semantic LightViewProjInv
//semantic WorldViewProj
//semantic NormalMatrix
//semantic ShadowMapSize
//var sampler2D DepthMap : TEXUNIT0 : _DepthMap 0 : -1 : 1
//var sampler2D NormalMap : TEXUNIT1 : _NormalMap 1 : -1 : 1
//var sampler2D ShadowMap : TEXUNIT2 : _ShadowMap 2 : -1 : 1
//var float LightInnerAngle :  : _LightInnerAngle : -1 : 1
//var float LightOuterAngle :  : _LightOuterAngle : -1 : 1
//var float4 LightDirection :  : _LightDirection : -1 : 1
//var float4 LightPosition :  : _LightPosition : -1 : 1
//var float3 LightColor :  : _LightColor : -1 : 1
//var float4x4 ViewProjInv :  : _ViewProjInv[0], 4 : -1 : 1
//var float4x4 LightViewProj :  : _LightViewProj[0], 4 : -1 : 1
//var float2 ShadowMapSize :  : _ShadowMapSize : -1 : 1
//var float4 screenPosition : $vin.TEXCOORD0 : TEX0 : 1 : 1
//var float4 ps : $vout.COLOR0 : COL : -1 : 1

#version 110

struct VOutput {
    vec4 _screenPosition2;
};

vec4 _ret_0;
vec4 _TMP15;
float _TMP16;
float _TMP14;
float _TMP13;
float _TMP7;
vec3 _TMP6;
float _TMP5;
float _TMP3;
vec3 _TMP2;
vec3 _TMP1;
vec4 _TMP12;
vec3 _TMP0;
vec3 _TMP11;
vec4 _normalData0045;
vec4 _unPackedNormal0045;
vec4 _r0055;
vec3 _v0067;
vec3 _b0079;
vec3 _v0081;
float _TMP100;
float _x0111;
float _TMP112;
float _TMP128;
vec4 _r0153;
float _sum0163;
float _y0163;
vec2 _shadowCoordOffset10163;
float _shadowFactor0163;
vec4 _c0165;
uniform sampler2D _DepthMap;
uniform sampler2D _NormalMap;
uniform sampler2DShadow _ShadowMap;
uniform float _LightInnerAngle;
uniform float _LightOuterAngle;
uniform vec4 _LightDirection;
uniform vec4 _LightPosition;
uniform vec3 _LightColor;
uniform vec4 _ViewProjInv[4];
uniform vec4 _LightViewProj[4];
uniform vec2 _ShadowMapSize;

 // main procedure, the original name was ps
void main()
{

    vec4 _screenPositionHom;
    vec3 _normal;
    float _diffusePower;
    vec4 _positionScreen;
    vec4 _positionWorld;
    float _distance;
    vec3 _directionToLight;
    float _lightDirectionDot;
    float _diffuseStrength;
    vec3 _lightVector;
    float _lightOuterCos;
    float _lightInnerCos;
    vec3 _diffuseContribution;
    vec4 _pixelPositionFromLight;
    vec2 _shadowCoord1;

    _screenPositionHom = gl_TexCoord[0]/gl_TexCoord[0].w;
    _TMP11 = vec3(_screenPositionHom.x, -_screenPositionHom.y, _screenPositionHom.z);
    _TMP0 = 5.00000000E-001*(_TMP11 + vec3( 1.00000000E+000, 1.00000000E+000, 0.00000000E+000));
    _TMP12 = texture2D(_DepthMap, _TMP0.xy);
    _normalData0045 = texture2D(_NormalMap, _TMP0.xy);
    _unPackedNormal0045 = _normalData0045*2.00000000E+000 - 1.00000000E+000;
    _TMP13 = dot(_unPackedNormal0045.xyz, _unPackedNormal0045.xyz);
    _TMP14 = inversesqrt(_TMP13);
    _normal = _TMP14*_unPackedNormal0045.xyz;
    _diffusePower = _unPackedNormal0045.w*2.55000000E+002;
    _positionScreen = vec4(_screenPositionHom.x, _screenPositionHom.y, _TMP12.x, 1.00000000E+000);
    _r0055.x = dot(_ViewProjInv[0], _positionScreen);
    _r0055.y = dot(_ViewProjInv[1], _positionScreen);
    _r0055.z = dot(_ViewProjInv[2], _positionScreen);
    _r0055.w = dot(_ViewProjInv[3], _positionScreen);
    _positionWorld = _r0055/_r0055.w;
    _distance = length(_LightDirection);
    _distance = _distance*_distance;
    _v0067 = _LightPosition.xyz - _positionWorld.xyz;
    _TMP13 = dot(_v0067, _v0067);
    _TMP14 = inversesqrt(_TMP13);
    _directionToLight = _TMP14*_v0067;
    _TMP13 = dot(_LightDirection.xyz, _LightDirection.xyz);
    _TMP14 = inversesqrt(_TMP13);
    _TMP1 = _TMP14*_LightDirection.xyz;
    _b0079 = -_directionToLight;
    _lightDirectionDot = dot(_TMP1, _b0079);
    _diffuseStrength = 0.00000000E+000;
    _v0081 = -_LightDirection.xyz;
    _TMP13 = dot(_v0081, _v0081);
    _TMP14 = inversesqrt(_TMP13);
    _lightVector = _TMP14*_v0081;
    _lightOuterCos = cos(_LightOuterAngle);
    _lightInnerCos = cos(_LightInnerAngle);
    if (_lightDirectionDot > _lightOuterCos) { // if begin
        _TMP13 = dot(_lightVector, _lightVector);
        _TMP14 = inversesqrt(_TMP13);
        _TMP2 = _TMP14*_lightVector;
        _TMP3 = dot(_normal, _TMP2);
        _TMP16 = min(1.00000000E+000, _TMP3);
        _TMP100 = max(0.00000000E+000, _TMP16);
        _diffuseStrength = max(0.00000000E+000, _TMP100);
        _x0111 = (_lightDirectionDot - _lightOuterCos)/(_lightInnerCos - _lightOuterCos);
        _TMP16 = min(1.00000000E+000, _x0111);
        _TMP112 = max(0.00000000E+000, _TMP16);
        _TMP5 = _TMP112*_TMP112*(3.00000000E+000 - 2.00000000E+000*_TMP112);
        _diffuseStrength = _diffuseStrength*_TMP5;
    } // end if
    if (_lightDirectionDot > _lightInnerCos) { // if begin
        _TMP13 = dot(_lightVector, _lightVector);
        _TMP14 = inversesqrt(_TMP13);
        _TMP6 = _TMP14*_lightVector;
        _TMP7 = dot(_normal, _TMP6);
        _TMP16 = min(1.00000000E+000, _TMP7);
        _TMP128 = max(0.00000000E+000, _TMP16);
        _diffuseStrength = max(0.00000000E+000, _TMP128);
    } // end if
    _diffuseContribution = (_LightColor*_diffuseStrength*_diffusePower)/_distance;
    _r0153.x = dot(_LightViewProj[0], _positionWorld);
    _r0153.y = dot(_LightViewProj[1], _positionWorld);
    _r0153.z = dot(_LightViewProj[2], _positionWorld);
    _r0153.w = dot(_LightViewProj[3], _positionWorld);
    _pixelPositionFromLight = _r0153/_r0153.w;
    _shadowCoord1 = _pixelPositionFromLight.xy*5.00000000E-001 + 5.00000000E-001;
    _shadowCoord1.y = 1.00000000E+000 - _shadowCoord1.y;
    _sum0163 = 0.00000000E+000;
    _y0163 = -1.50000000E+000;
    for (; _y0163 <= 1.50000000E+000; _y0163 = _y0163 + 1.00000000E+000) { // for begin
        _shadowCoordOffset10163 = _shadowCoord1 + vec2(-1.50000000E+000*_ShadowMapSize.x, _y0163*_ShadowMapSize.y);
        _c0165 = vec4(_shadowCoordOffset10163.x, _shadowCoordOffset10163.y, _pixelPositionFromLight.z - 5.00000024E-004, 1.00000000E+000);
        _TMP15 = shadow2DProj(_ShadowMap, _c0165);
        _sum0163 = _sum0163 + _TMP15.x;
        _shadowCoordOffset10163 = _shadowCoord1 + vec2(-5.00000000E-001*_ShadowMapSize.x, _y0163*_ShadowMapSize.y);
        _c0165 = vec4(_shadowCoordOffset10163.x, _shadowCoordOffset10163.y, _pixelPositionFromLight.z - 5.00000024E-004, 1.00000000E+000);
        _TMP15 = shadow2DProj(_ShadowMap, _c0165);
        _sum0163 = _sum0163 + _TMP15.x;
        _shadowCoordOffset10163 = _shadowCoord1 + vec2(5.00000000E-001*_ShadowMapSize.x, _y0163*_ShadowMapSize.y);
        _c0165 = vec4(_shadowCoordOffset10163.x, _shadowCoordOffset10163.y, _pixelPositionFromLight.z - 5.00000024E-004, 1.00000000E+000);
        _TMP15 = shadow2DProj(_ShadowMap, _c0165);
        _sum0163 = _sum0163 + _TMP15.x;
        _shadowCoordOffset10163 = _shadowCoord1 + vec2(1.50000000E+000*_ShadowMapSize.x, _y0163*_ShadowMapSize.y);
        _c0165 = vec4(_shadowCoordOffset10163.x, _shadowCoordOffset10163.y, _pixelPositionFromLight.z - 5.00000024E-004, 1.00000000E+000);
        _TMP15 = shadow2DProj(_ShadowMap, _c0165);
        _sum0163 = _sum0163 + _TMP15.x;
    } // end for
    _shadowFactor0163 = _sum0163/1.60000000E+001;
    _diffuseContribution = _diffuseContribution*_shadowFactor0163;
    _ret_0 = vec4(_diffuseContribution.x, _diffuseContribution.y, _diffuseContribution.z, 0.00000000E+000);
    gl_FragColor = _ret_0;
    return;
} // main end
