// glslf output by Cg compiler
// cgc version 3.1.0013, build date Apr 18 2012
// command line args: -q -profile glslf
// source file: deferred_lighting_spot_light.cg
//vendor NVIDIA Corporation
//version 3.1.0.13
//profile glslf
//program ps
//semantic DepthMap : TEXUNIT0
//semantic NormalMap : TEXUNIT1
//semantic ShadowMap : TEXUNIT2
//semantic ViewPosition
//semantic LightDirection
//semantic LightPosition
//semantic LightColor
//semantic LightInnerAngle
//semantic LightOuterAngle
//semantic LightDecay
//semantic View
//semantic ViewProjInv
//semantic ProjInv
//semantic LightViewProj
//semantic WorldViewProj
//semantic NormalMatrix
//var sampler2D DepthMap : TEXUNIT0 : _DepthMap 0 : -1 : 1
//var float4 screenPosition : $vin.TEXCOORD0 : TEX0 : 1 : 1
//var float4 ps : $vout.COLOR0 : COL : -1 : 1

#version 110

struct VOutput {
    vec4 _screenPosition2;
};

vec4 _ret_0;
vec4 _TMP4;
vec3 _TMP0;
vec3 _TMP1;
uniform sampler2D _DepthMap;

 // main procedure, the original name was ps
void main()
{

    vec4 _screenPositionHom;

    _screenPositionHom = gl_TexCoord[0]/gl_TexCoord[0].w;
    _TMP1 = vec3(_screenPositionHom.x, -_screenPositionHom.y, _screenPositionHom.z);
    _TMP0 = 5.00000000E-001*(_TMP1 + vec3( 1.00000000E+000, 1.00000000E+000, 0.00000000E+000));
    _TMP4 = texture2D(_DepthMap, _TMP0.xy);
    _ret_0 = vec4(_TMP4.x, _TMP4.x, _TMP4.x, 1.00000000E+000);
    gl_FragColor = _ret_0;
    return;
} // main end
