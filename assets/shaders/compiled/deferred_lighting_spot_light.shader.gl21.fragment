// glslf output by Cg compiler
// cgc version 3.1.0013, build date Apr 18 2012
// command line args: -DGL21=1 -q -profile glslf
// source file: deferred_lighting_spot_light.cg
//vendor NVIDIA Corporation
//version 3.1.0.13
//profile glslf
//program ps
//semantic DepthMap : TEXUNIT0
//semantic NormalMap : TEXUNIT1
//semantic ShadowMap : TEXUNIT2
//semantic LightInnerAngle
//semantic LightOuterAngle
//semantic LightDecay
//semantic LightDistance
//semantic ViewerPosition
//semantic LightDirection
//semantic DirectionToLight
//semantic LightPosition
//semantic LightColor
//semantic ViewProjInv
//semantic LightViewProj
//semantic LightViewProjInv
//semantic WorldViewProj
//semantic NormalMatrix
//semantic ShadowMapSize
//var sampler2D DepthMap : TEXUNIT0 : _DepthMap 0 : -1 : 1
//var sampler2D NormalMap : TEXUNIT1 : _NormalMap 1 : -1 : 1
//var sampler2D ShadowMap : TEXUNIT2 : _ShadowMap 2 : -1 : 1
//var half LightInnerAngle :  : _LightInnerAngle : -1 : 1
//var half LightOuterAngle :  : _LightOuterAngle : -1 : 1
//var half LightDistance :  : _LightDistance : -1 : 1
//var half3 ViewerPosition :  : _ViewerPosition : -1 : 1
//var half3 LightDirection :  : _LightDirection : -1 : 1
//var half3 DirectionToLight :  : _DirectionToLight : -1 : 1
//var half3 LightPosition :  : _LightPosition : -1 : 1
//var half3 LightColor :  : _LightColor : -1 : 1
//var half4x4 ViewProjInv :  : _ViewProjInv[0], 4 : -1 : 1
//var half4x4 LightViewProj :  : _LightViewProj[0], 4 : -1 : 1
//var half2 ShadowMapSize :  : _ShadowMapSize : -1 : 1
//var float3 screenPosition : $vin.TEXCOORD0 : TEX0 : 1 : 1
//var float4 ps : $vout.COLOR0 : COL : -1 : 1

#version 110

struct VOutput {
    vec3 _screenPosition2;
};

vec4 _TMP16;
float _TMP18;
float _TMP6;
float _TMP19;
float _TMP21;
float _TMP20;
float _TMP13;
float _TMP12;
float _TMP11;
float _TMP17;
float _TMP5;
float _TMP4;
float _TMP3;
float _TMP14;
vec4 _TMP10;
vec2 _TMP0;
vec2 _TMP9;
vec3 _screenPosition1;
vec2 _vec0044;
vec2 _texCoord0048;
vec4 _normalData0052;
vec2 _texCoord0052;
vec4 _unPackedNormal0052;
vec4 _r0062;
vec3 _v0072;
float _TMP87;
float _x0096;
float _TMP97;
float _TMP107;
float _TMP123;
vec4 _r0130;
vec4 _v0130;
float _shadowFactor0140;
float _sum0140;
float _y0140;
vec2 _shadowCoordOffset10140;
vec2 _shadowCoord0140;
vec2 _shadowMapSize0140;
float _zToCompare0140;
vec4 _c0142;
uniform sampler2D _DepthMap;
uniform sampler2D _NormalMap;
uniform sampler2DShadow _ShadowMap;
uniform float _LightInnerAngle;
uniform float _LightOuterAngle;
uniform float _LightDistance;
uniform vec3 _ViewerPosition;
uniform vec3 _LightDirection;
uniform vec3 _DirectionToLight;
uniform vec3 _LightPosition;
uniform vec3 _LightColor;
uniform vec4 _ViewProjInv[4];
uniform vec4 _LightViewProj[4];
uniform vec2 _ShadowMapSize;

 // main procedure, the original name was ps
void main()
{

    vec2 _screenPositionClip;
    vec2 _texCoord2;
    float _depth;
    vec3 _normalData1;
    vec3 _normal;
    vec4 _positionScreen;
    vec3 _positionWorld;
    vec4 _lightContribution;
    vec3 _pixelToLight;
    float _lightDirectionDot;
    float _diffuseStrength;
    float _lightOuterCos;
    float _lightInnerCos;
    vec3 _viewerDirectionUnNormalized1;
    vec3 _viewDirection1;
    vec3 _halfVectorRaw1;
    vec3 _pixelPositionFromLight;
    vec2 _shadowCoord1;
    float _shadowFactor1;

    _screenPosition1 = vec3(float(gl_TexCoord[0].x), float(gl_TexCoord[0].y), float(gl_TexCoord[0].z));
    _screenPositionClip = _screenPosition1.xy/_screenPosition1.z;
    _vec0044 = vec2(float(_screenPositionClip.x), float(_screenPositionClip.y));
    _TMP9 = vec2(_vec0044.x, -_vec0044.y);
    _TMP0 = 5.00000000E-001*(_TMP9 + vec2( 1.00000000E+000, 1.00000000E+000));
    _texCoord2 = vec2(float(_TMP0.x), float(_TMP0.y));
    _texCoord0048 = vec2(float(_texCoord2.x), float(_texCoord2.y));
    _TMP10 = texture2D(_DepthMap, _texCoord0048);
    _depth = float(_TMP10.x);
    _texCoord0052 = vec2(float(_texCoord2.x), float(_texCoord2.y));
    _normalData0052 = texture2D(_NormalMap, _texCoord0052);
    _unPackedNormal0052 = _normalData0052*2.00000000E+000 - 1.00000000E+000;
    _normalData1 = vec3(float(_unPackedNormal0052.x), float(_unPackedNormal0052.y), float(_unPackedNormal0052.z));
    _TMP13 = dot(vec3(float(_normalData1.x), float(_normalData1.y), float(_normalData1.z)), vec3(float(_normalData1.x), float(_normalData1.y), float(_normalData1.z)));
    _TMP11 = float(_TMP13);
    _TMP17 = inversesqrt(float(_TMP11));
    _TMP12 = float(_TMP17);
    _normal = _TMP12*_normalData1;
    _positionScreen = vec4(_screenPositionClip.x, _screenPositionClip.y, _depth, 1.00000000E+000);
    _TMP18 = dot(vec4(float(_ViewProjInv[0].x), float(_ViewProjInv[0].y), float(_ViewProjInv[0].z), float(_ViewProjInv[0].w)), vec4(float(_positionScreen.x), float(_positionScreen.y), float(_positionScreen.z), float(_positionScreen.w)));
    _r0062.x = float(_TMP18);
    _TMP18 = dot(vec4(float(_ViewProjInv[1].x), float(_ViewProjInv[1].y), float(_ViewProjInv[1].z), float(_ViewProjInv[1].w)), vec4(float(_positionScreen.x), float(_positionScreen.y), float(_positionScreen.z), float(_positionScreen.w)));
    _r0062.y = float(_TMP18);
    _TMP18 = dot(vec4(float(_ViewProjInv[2].x), float(_ViewProjInv[2].y), float(_ViewProjInv[2].z), float(_ViewProjInv[2].w)), vec4(float(_positionScreen.x), float(_positionScreen.y), float(_positionScreen.z), float(_positionScreen.w)));
    _r0062.z = float(_TMP18);
    _TMP18 = dot(vec4(float(_ViewProjInv[3].x), float(_ViewProjInv[3].y), float(_ViewProjInv[3].z), float(_ViewProjInv[3].w)), vec4(float(_positionScreen.x), float(_positionScreen.y), float(_positionScreen.z), float(_positionScreen.w)));
    _r0062.w = float(_TMP18);
    _positionWorld = _r0062.xyz/_r0062.w;
    _lightContribution = vec4( 0.00000000E+000, 0.00000000E+000, 0.00000000E+000, 0.00000000E+000);
    _v0072 = _positionWorld - _LightPosition;
    _TMP13 = dot(vec3(float(_v0072.x), float(_v0072.y), float(_v0072.z)), vec3(float(_v0072.x), float(_v0072.y), float(_v0072.z)));
    _TMP11 = float(_TMP13);
    _TMP17 = inversesqrt(float(_TMP11));
    _TMP12 = float(_TMP17);
    _pixelToLight = _TMP12*_v0072;
    _TMP13 = dot(vec3(float(_LightDirection.x), float(_LightDirection.y), float(_LightDirection.z)), vec3(float(_pixelToLight.x), float(_pixelToLight.y), float(_pixelToLight.z)));
    _lightDirectionDot = float(_TMP13);
    _diffuseStrength = 0.00000000E+000;
    _TMP14 = cos(float(_LightOuterAngle));
    _lightOuterCos = float(_TMP14);
    _TMP14 = cos(float(_LightInnerAngle));
    _lightInnerCos = float(_TMP14);
    if (_lightDirectionDot > _lightOuterCos) { // if begin
        _TMP13 = dot(vec3(float(_normal.x), float(_normal.y), float(_normal.z)), vec3(float(_DirectionToLight.x), float(_DirectionToLight.y), float(_DirectionToLight.z)));
        _TMP3 = float(_TMP13);
        _TMP20 = min(1.00000000E+000, float(_TMP3));
        _TMP19 = float(_TMP20);
        _TMP21 = max(0.00000000E+000, float(_TMP19));
        _TMP87 = float(_TMP21);
        _x0096 = (_lightDirectionDot - _lightOuterCos)/(_lightInnerCos - _lightOuterCos);
        _TMP20 = min(1.00000000E+000, float(_x0096));
        _TMP19 = float(_TMP20);
        _TMP21 = max(0.00000000E+000, float(_TMP19));
        _TMP97 = float(_TMP21);
        _TMP4 = _TMP97*_TMP97*(3.00000000E+000 - 2.00000000E+000*_TMP97);
        _diffuseStrength = _TMP87*_TMP4;
    } // end if
    if (_lightDirectionDot > _lightInnerCos) { // if begin
        _TMP13 = dot(vec3(float(_normal.x), float(_normal.y), float(_normal.z)), vec3(float(_DirectionToLight.x), float(_DirectionToLight.y), float(_DirectionToLight.z)));
        _TMP5 = float(_TMP13);
        _TMP20 = min(1.00000000E+000, float(_TMP5));
        _TMP19 = float(_TMP20);
        _TMP21 = max(0.00000000E+000, float(_TMP19));
        _TMP107 = float(_TMP21);
        _diffuseStrength = _TMP107;
    } // end if
    _lightContribution.xyz = _LightColor*_diffuseStrength*2.55078125E+000*_LightDistance;
    if (_diffuseStrength > 0.00000000E+000) { // if begin
        _viewerDirectionUnNormalized1 = _ViewerPosition - _positionWorld;
        _TMP13 = dot(vec3(float(_viewerDirectionUnNormalized1.x), float(_viewerDirectionUnNormalized1.y), float(_viewerDirectionUnNormalized1.z)), vec3(float(_viewerDirectionUnNormalized1.x), float(_viewerDirectionUnNormalized1.y), float(_viewerDirectionUnNormalized1.z)));
        _TMP11 = float(_TMP13);
        _TMP17 = inversesqrt(float(_TMP11));
        _TMP12 = float(_TMP17);
        _viewDirection1 = _TMP12*_viewerDirectionUnNormalized1;
        _halfVectorRaw1 = _DirectionToLight + _viewDirection1;
        _TMP13 = dot(vec3(float(_normal.x), float(_normal.y), float(_normal.z)), vec3(float(_halfVectorRaw1.x), float(_halfVectorRaw1.y), float(_halfVectorRaw1.z)));
        _TMP6 = float(_TMP13);
        _TMP20 = min(1.00000000E+000, float(_TMP6));
        _TMP19 = float(_TMP20);
        _TMP21 = max(0.00000000E+000, float(_TMP19));
        _TMP123 = float(_TMP21);
        _lightContribution.w = _TMP123*_LightDistance;
    } // end if
    _v0130 = vec4(float(float(_positionWorld.x)), float(float(_positionWorld.y)), float(float(_positionWorld.z)), 1.00000000E+000);
    _TMP18 = dot(vec4(float(_LightViewProj[0].x), float(_LightViewProj[0].y), float(_LightViewProj[0].z), float(_LightViewProj[0].w)), vec4(float(_v0130.x), float(_v0130.y), float(_v0130.z), float(_v0130.w)));
    _r0130.x = float(_TMP18);
    _TMP18 = dot(vec4(float(_LightViewProj[1].x), float(_LightViewProj[1].y), float(_LightViewProj[1].z), float(_LightViewProj[1].w)), vec4(float(_v0130.x), float(_v0130.y), float(_v0130.z), float(_v0130.w)));
    _r0130.y = float(_TMP18);
    _TMP18 = dot(vec4(float(_LightViewProj[2].x), float(_LightViewProj[2].y), float(_LightViewProj[2].z), float(_LightViewProj[2].w)), vec4(float(_v0130.x), float(_v0130.y), float(_v0130.z), float(_v0130.w)));
    _r0130.z = float(_TMP18);
    _TMP18 = dot(vec4(float(_LightViewProj[3].x), float(_LightViewProj[3].y), float(_LightViewProj[3].z), float(_LightViewProj[3].w)), vec4(float(_v0130.x), float(_v0130.y), float(_v0130.z), float(_v0130.w)));
    _r0130.w = float(_TMP18);
    _pixelPositionFromLight = _r0130.xyz/_r0130.w;
    _shadowCoord1 = vec2(float((5.00000000E-001 + vec2(float(_pixelPositionFromLight.x), float(_pixelPositionFromLight.y))*5.00000000E-001).x), float((5.00000000E-001 + vec2(float(_pixelPositionFromLight.x), float(_pixelPositionFromLight.y))*5.00000000E-001).y));
    _shadowCoord1.y = float((1.00000000E+000 - float(_shadowCoord1.y)));
    _shadowCoord0140 = vec2(float(_shadowCoord1.x), float(_shadowCoord1.y));
    _zToCompare0140 = float(_pixelPositionFromLight.z);
    _shadowMapSize0140 = vec2(float(_ShadowMapSize.x), float(_ShadowMapSize.y));
    _sum0140 = 0.00000000E+000;
    _y0140 = -1.50000000E+000;
    for (; _y0140 <= 1.50000000E+000; _y0140 = _y0140 + 1.00000000E+000) { // for begin
        _shadowCoordOffset10140 = _shadowCoord0140 + vec2(-1.50000000E+000*_shadowMapSize0140.x, _y0140*_shadowMapSize0140.y);
        _c0142 = vec4(_shadowCoordOffset10140.x, _shadowCoordOffset10140.y, _zToCompare0140 - 4.99999987E-005, 1.00000000E+000);
        _TMP16 = shadow2DProj(_ShadowMap, _c0142);
        _sum0140 = _sum0140 + _TMP16.x;
        _shadowCoordOffset10140 = _shadowCoord0140 + vec2(-5.00000000E-001*_shadowMapSize0140.x, _y0140*_shadowMapSize0140.y);
        _c0142 = vec4(_shadowCoordOffset10140.x, _shadowCoordOffset10140.y, _zToCompare0140 - 4.99999987E-005, 1.00000000E+000);
        _TMP16 = shadow2DProj(_ShadowMap, _c0142);
        _sum0140 = _sum0140 + _TMP16.x;
        _shadowCoordOffset10140 = _shadowCoord0140 + vec2(5.00000000E-001*_shadowMapSize0140.x, _y0140*_shadowMapSize0140.y);
        _c0142 = vec4(_shadowCoordOffset10140.x, _shadowCoordOffset10140.y, _zToCompare0140 - 4.99999987E-005, 1.00000000E+000);
        _TMP16 = shadow2DProj(_ShadowMap, _c0142);
        _sum0140 = _sum0140 + _TMP16.x;
        _shadowCoordOffset10140 = _shadowCoord0140 + vec2(1.50000000E+000*_shadowMapSize0140.x, _y0140*_shadowMapSize0140.y);
        _c0142 = vec4(_shadowCoordOffset10140.x, _shadowCoordOffset10140.y, _zToCompare0140 - 4.99999987E-005, 1.00000000E+000);
        _TMP16 = shadow2DProj(_ShadowMap, _c0142);
        _sum0140 = _sum0140 + _TMP16.x;
    } // end for
    _shadowFactor0140 = _sum0140/1.60000000E+001;
    _shadowFactor1 = float(_shadowFactor0140);
    _lightContribution = _lightContribution*_shadowFactor1;
    gl_FragColor = vec4(float(_lightContribution.x), float(_lightContribution.y), float(_lightContribution.z), float(_lightContribution.w));
    return;
} // main end
