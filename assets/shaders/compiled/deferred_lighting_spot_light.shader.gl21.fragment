// glslf output by Cg compiler
// cgc version 3.1.0013, build date Apr 18 2012
// command line args: -DGL21=1 -q -profile glslf
// source file: deferred_lighting_spot_light.cg
//vendor NVIDIA Corporation
//version 3.1.0.13
//profile glslf
//program ps
//semantic DepthMap : TEXUNIT0
//semantic NormalMap : TEXUNIT1
//semantic ShadowMap : TEXUNIT2
//semantic LightInnerAngle
//semantic LightOuterAngle
//semantic LightDecay
//semantic LightDistance
//semantic ShadowMapSize
//semantic LightDirection
//semantic LightPosition
//semantic LightColor
//semantic DirectionToLight
//semantic ViewerPosition
//semantic ViewProjInv
//semantic LightViewProj
//semantic LightViewProjInv
//semantic WorldViewProj
//semantic NormalMatrix
//var sampler2D DepthMap : TEXUNIT0 : _DepthMap 0 : -1 : 1
//var sampler2D NormalMap : TEXUNIT1 : _NormalMap 1 : -1 : 1
//var float LightInnerAngle :  : _LightInnerAngle : -1 : 1
//var float LightOuterAngle :  : _LightOuterAngle : -1 : 1
//var float3 LightDirection :  : _LightDirection : -1 : 1
//var float3 LightPosition :  : _LightPosition : -1 : 1
//var float3 DirectionToLight :  : _DirectionToLight : -1 : 1
//var float4x4 ViewProjInv :  : _ViewProjInv[0], 4 : -1 : 1
//var float3 screenPosition : $vin.TEXCOORD0 : TEX0 : 1 : 1
//var float4 ps : $vout.COLOR0 : COL : -1 : 1

#version 110

struct VOutput {
    vec3 _screenPosition2;
};

vec4 _ret_0;
float _TMP8;
float _TMP7;
vec4 _TMP6;
vec2 _TMP5;
vec4 _r0051;
vec3 _v0061;
uniform sampler2D _DepthMap;
uniform float _LightInnerAngle;
uniform float _LightOuterAngle;
uniform vec3 _LightDirection;
uniform vec3 _LightPosition;
uniform vec4 _ViewProjInv[4];

 // main procedure, the original name was ps
void main()
{

    vec2 _screenPositionClip;
    vec2 _texCoord2;
    vec4 _positionScreen;
    vec3 _positionWorld;
    vec3 _pixelToLight;
    float _lightDirectionDot;
    float _lightOuterCos;
    float _lightInnerCos;

    _screenPositionClip = gl_TexCoord[0].xy/gl_TexCoord[0].z;
    _TMP5 = vec2(_screenPositionClip.x, -_screenPositionClip.y);
    _texCoord2 = 5.00000000E-001*(_TMP5 + vec2( 1.00000000E+000, 1.00000000E+000));
    _TMP6 = texture2D(_DepthMap, _texCoord2);
    _positionScreen = vec4(_screenPositionClip.x, _screenPositionClip.y, _TMP6.x, 1.00000000E+000);
    _r0051.x = dot(_ViewProjInv[0], _positionScreen);
    _r0051.y = dot(_ViewProjInv[1], _positionScreen);
    _r0051.z = dot(_ViewProjInv[2], _positionScreen);
    _r0051.w = dot(_ViewProjInv[3], _positionScreen);
    _positionWorld = _r0051.xyz/_r0051.w;
    _v0061 = _positionWorld - _LightPosition;
    _TMP7 = dot(_v0061, _v0061);
    _TMP8 = inversesqrt(_TMP7);
    _pixelToLight = _TMP8*_v0061;
    _lightDirectionDot = dot(_LightDirection, _pixelToLight);
    _lightOuterCos = cos(_LightOuterAngle);
    _lightInnerCos = cos(_LightInnerAngle);
    if (_lightDirectionDot > _lightOuterCos) { // if begin
    } // end if
    if (_lightDirectionDot > _lightInnerCos) { // if begin
    } // end if
    _ret_0 = vec4(_TMP6.x, _TMP6.x, _TMP6.x, 1.00000000E+000);
    gl_FragColor = _ret_0;
    return;
} // main end
