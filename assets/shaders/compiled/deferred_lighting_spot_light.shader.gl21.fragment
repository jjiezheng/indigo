// glslf output by Cg compiler
// cgc version 3.1.0013, build date Apr 18 2012
// command line args: -q -profile glslf
// source file: deferred_lighting_spot_light.cg
//vendor NVIDIA Corporation
//version 3.1.0.13
//profile glslf
//program ps
//semantic NormalMap
//semantic DepthMap
//semantic ShadowMap
//semantic ViewPosition
//semantic LightDirection
//semantic LightPosition
//semantic LightColor
//semantic LightInnerAngle
//semantic LightOuterAngle
//semantic LightDecay
//semantic View
//semantic ViewProjInv
//semantic ProjInv
//semantic LightViewProj
//semantic WorldViewProj
//semantic NormalMatrix
//var sampler2D NormalMap :  : _NormalMap : -1 : 1
//var sampler2D DepthMap :  : _DepthMap : -1 : 1
//var sampler2D ShadowMap :  : _ShadowMap : -1 : 1
//var float4 ViewPosition :  : _ViewPosition : -1 : 1
//var float4 LightDirection :  : _LightDirection : -1 : 1
//var float4 LightPosition :  : _LightPosition : -1 : 1
//var float3 LightColor :  : _LightColor : -1 : 1
//var float LightInnerAngle :  : _LightInnerAngle : -1 : 1
//var float LightOuterAngle :  : _LightOuterAngle : -1 : 1
//var float4x4 ViewProjInv :  : _ViewProjInv[0], 4 : -1 : 1
//var float4x4 LightViewProj :  : _LightViewProj[0], 4 : -1 : 1
//var float3x3 NormalMatrix :  : _NormalMatrix[0], 3 : -1 : 1
//var float4 screenPosition : $vin.TEXCOORD0 : TEX0 : 1 : 1
//var float4 ps : $vout.COLOR0 : COL : -1 : 1

#version 110

struct VOutput {
    vec4 _screenPosition2;
};

vec4 _ret_0;
float _TMP18;
float _TMP17;
vec4 _TMP13;
float _TMP11;
float _TMP16;
float _TMP15;
float _TMP8;
vec3 _TMP7;
float _TMP6;
float _TMP4;
vec3 _TMP3;
vec3 _TMP1;
vec3 _TMP0;
vec3 _TMP14;
vec4 _normalData0042;
vec4 _unPackedNormal0042;
vec4 _r0054;
vec3 _v0066;
vec3 _b0078;
vec3 _v0080;
vec3 _r0086;
float _TMP113;
float _x0124;
float _TMP125;
float _TMP141;
vec3 _r0156;
float _TMP173;
vec4 _r0182;
float _TMP193;
float _Ex_20194;
float _variance0194;
float _m_d0194;
float _p_max0194;
float _p0194;
float _a0196;
float _a0198;
float _TMP205;
float _x0206;
uniform sampler2D _NormalMap;
uniform sampler2D _DepthMap;
uniform sampler2D _ShadowMap;
uniform vec4 _ViewPosition;
uniform vec4 _LightDirection;
uniform vec4 _LightPosition;
uniform vec3 _LightColor;
uniform float _LightInnerAngle;
uniform float _LightOuterAngle;
uniform vec4 _ViewProjInv[4];
uniform vec4 _LightViewProj[4];
uniform vec3 _NormalMatrix[3];

 // main procedure, the original name was ps
void main()
{

    vec4 _screenPositionHom;
    vec3 _normal;
    vec4 _depthSpec;
    vec4 _positionScreen;
    vec4 _positionWorld;
    float _distance;
    vec3 _directionToLight;
    float _lightDirectionDot;
    float _diffuseStrength;
    vec3 _lightVector;
    vec3 _lightVectorViewSpace;
    float _lightOuterCos;
    float _lightInnerCos;
    vec3 _diffuseContribution;
    float _specularContribution;
    vec4 _viewDirectionRaw1;
    vec3 _viewDirection1;
    vec3 _halfVectorRaw1;
    vec3 _halfVector1;
    float _i1;
    vec3 _pixelPositionFromLight;
    vec2 _shadowCoord;
    float _shadowLightContribution;

    _screenPositionHom = gl_TexCoord[0]/gl_TexCoord[0].w;
    _TMP14 = vec3(_screenPositionHom.x, -_screenPositionHom.y, _screenPositionHom.z);
    _TMP0 = 5.00000000E-001*(_TMP14 + vec3( 1.00000000E+000, 1.00000000E+000, 0.00000000E+000));
    _normalData0042 = texture2D(_NormalMap, _TMP0.xy);
    _unPackedNormal0042 = _normalData0042*2.00000000E+000 - 1.00000000E+000;
    _TMP15 = dot(_unPackedNormal0042.xyz, _unPackedNormal0042.xyz);
    _TMP16 = inversesqrt(_TMP15);
    _normal = _TMP16*_unPackedNormal0042.xyz;
    _depthSpec = texture2D(_DepthMap, _TMP0.xy);
    if (_depthSpec.x == 1.00000000E+000) { // if begin
        gl_FragColor = vec4( 0.00000000E+000, 0.00000000E+000, 0.00000000E+000, 0.00000000E+000);
        return;
    } // end if
    _positionScreen = vec4(_screenPositionHom.x, _screenPositionHom.y, _depthSpec.x, 1.00000000E+000);
    _r0054.x = dot(_ViewProjInv[0], _positionScreen);
    _r0054.y = dot(_ViewProjInv[1], _positionScreen);
    _r0054.z = dot(_ViewProjInv[2], _positionScreen);
    _r0054.w = dot(_ViewProjInv[3], _positionScreen);
    _positionWorld = _r0054/_r0054.w;
    _distance = length(_LightDirection);
    _distance = _distance*_distance;
    _v0066 = _LightPosition.xyz - _positionWorld.xyz;
    _TMP15 = dot(_v0066, _v0066);
    _TMP16 = inversesqrt(_TMP15);
    _directionToLight = _TMP16*_v0066;
    _TMP15 = dot(_LightDirection.xyz, _LightDirection.xyz);
    _TMP16 = inversesqrt(_TMP15);
    _TMP1 = _TMP16*_LightDirection.xyz;
    _b0078 = -_directionToLight;
    _lightDirectionDot = dot(_TMP1, _b0078);
    _diffuseStrength = 0.00000000E+000;
    _v0080 = -_LightDirection.xyz;
    _TMP15 = dot(_v0080, _v0080);
    _TMP16 = inversesqrt(_TMP15);
    _lightVector = _TMP16*_v0080;
    _r0086.x = dot(_NormalMatrix[0], _lightVector);
    _r0086.y = dot(_NormalMatrix[1], _lightVector);
    _r0086.z = dot(_NormalMatrix[2], _lightVector);
    _TMP15 = dot(_r0086, _r0086);
    _TMP16 = inversesqrt(_TMP15);
    _lightVectorViewSpace = _TMP16*_r0086;
    _lightOuterCos = cos(_LightOuterAngle);
    _lightInnerCos = cos(_LightInnerAngle);
    if (_lightDirectionDot > _lightOuterCos) { // if begin
        _TMP15 = dot(_lightVectorViewSpace, _lightVectorViewSpace);
        _TMP16 = inversesqrt(_TMP15);
        _TMP3 = _TMP16*_lightVectorViewSpace;
        _TMP4 = dot(_normal, _TMP3);
        _TMP18 = min(1.00000000E+000, _TMP4);
        _TMP113 = max(0.00000000E+000, _TMP18);
        _diffuseStrength = max(0.00000000E+000, _TMP113);
        _x0124 = (_lightDirectionDot - _lightOuterCos)/(_lightInnerCos - _lightOuterCos);
        _TMP18 = min(1.00000000E+000, _x0124);
        _TMP125 = max(0.00000000E+000, _TMP18);
        _TMP6 = _TMP125*_TMP125*(3.00000000E+000 - 2.00000000E+000*_TMP125);
        _diffuseStrength = _diffuseStrength*_TMP6;
    } // end if
    if (_lightDirectionDot > _lightInnerCos) { // if begin
        _TMP15 = dot(_lightVectorViewSpace, _lightVectorViewSpace);
        _TMP16 = inversesqrt(_TMP15);
        _TMP7 = _TMP16*_lightVectorViewSpace;
        _TMP8 = dot(_normal, _TMP7);
        _TMP18 = min(1.00000000E+000, _TMP8);
        _TMP141 = max(0.00000000E+000, _TMP18);
        _diffuseStrength = max(0.00000000E+000, _TMP141);
    } // end if
    _diffuseContribution = (_LightColor*_unPackedNormal0042.w*_diffuseStrength)/_distance;
    _specularContribution = 0.00000000E+000;
    if (_diffuseStrength > 0.00000000E+000) { // if begin
        _viewDirectionRaw1 = _ViewPosition - _positionWorld;
        _TMP15 = dot(_viewDirectionRaw1.xyz, _viewDirectionRaw1.xyz);
        _TMP16 = inversesqrt(_TMP15);
        _viewDirection1 = _TMP16*_viewDirectionRaw1.xyz;
        _halfVectorRaw1 = _lightVector + _viewDirection1;
        _r0156.x = dot(_NormalMatrix[0], _halfVectorRaw1);
        _r0156.y = dot(_NormalMatrix[1], _halfVectorRaw1);
        _r0156.z = dot(_NormalMatrix[2], _halfVectorRaw1);
        _TMP15 = dot(_r0156, _r0156);
        _TMP16 = inversesqrt(_TMP15);
        _halfVector1 = _TMP16*_r0156;
        _TMP11 = dot(_normal, _halfVector1);
        _TMP18 = min(1.00000000E+000, _TMP11);
        _TMP173 = max(0.00000000E+000, _TMP18);
        _i1 = pow(_TMP173, _depthSpec.z);
        _specularContribution = (_i1*_depthSpec.w)/_distance;
    } // end if
    _r0182.x = dot(_LightViewProj[0], _positionWorld);
    _r0182.y = dot(_LightViewProj[1], _positionWorld);
    _r0182.z = dot(_LightViewProj[2], _positionWorld);
    _r0182.w = dot(_LightViewProj[3], _positionWorld);
    _pixelPositionFromLight = _r0182.xyz/_r0182.w;
    _shadowCoord = _pixelPositionFromLight.xy*5.00000000E-001 + 5.00000000E-001;
    _shadowCoord.y = 1.00000000E+000 - _shadowCoord.y;
    _TMP13 = texture2D(_ShadowMap, _shadowCoord);
    _shadowLightContribution = 1.00000000E+000;
    if (_TMP13.x < _pixelPositionFromLight.z && _shadowCoord.x > 0.00000000E+000 && _shadowCoord.x < 1.00000000E+000) { // if begin
        _Ex_20194 = _TMP13.x*_TMP13.x;
        _a0196 = _TMP13.y - _Ex_20194;
        _TMP17 = max(_a0196, 0.00000000E+000);
        _a0198 = _TMP17 + 4.99999999E-007;
        _variance0194 = min(_a0198, 1.00000000E+000);
        _m_d0194 = _pixelPositionFromLight.z - _TMP13.x;
        _p_max0194 = _variance0194/(_variance0194 + _m_d0194*_m_d0194);
        _p0194 = float((_pixelPositionFromLight.z <= _TMP13.x));
        _TMP193 = max(_p0194, _p_max0194);
        _x0206 = (_TMP193 - 8.99999976E-001)/1.00000024E-001;
        _TMP18 = min(1.00000000E+000, _x0206);
        _TMP205 = max(0.00000000E+000, _TMP18);
        _shadowLightContribution = _TMP205;
    } // end if
    _diffuseContribution = _diffuseContribution*_shadowLightContribution;
    _ret_0 = vec4(_diffuseContribution.x, _diffuseContribution.y, _diffuseContribution.z, _specularContribution);
    gl_FragColor = _ret_0;
    return;
} // main end
