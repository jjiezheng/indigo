// ps_4_0 output by Cg compiler
// cgc version 3.1.0013, build date Apr 18 2012
// command line args: -DDX11=1 -q -unroll all -profile ps_5_0
// source file: average_blur_vertical.cg
//vendor NVIDIA Corporation
//version 3.1.0.13
//profile ps_5_0
//program ps
//semantic SourceMap : TEXUNIT0
//semantic TexelSize
//var sampler2D SourceMap : TEXUNIT0 : _SourceMap 0 : -1 : 1
//var float TexelSize :  : _TexelSize : -1 : 1
//var float2 texCoord : $vin.TEXCOORD0 :  : 1 : 1
//var float4 ps : $vout.COLOR0 : COLOR0 : -1 : 1

#pragma pack_matrix(row_major)

struct VOutput {
    float4 _position1 : SV_Position;
    float2 _texCoord1 : TEXCOORD0;
};

struct X1X {
    float4 _POSITION : SV_Position;
    float2 _TEXCOORD0 : TEXCOORD0;
};

static float4 _TMP8;
static float4 _TMP7;
static float4 _TMP6;
static float4 _TMP5;
static float4 _TMP4;
static float4 _TMP3;
static float4 _TMP2;
static float4 _TMP1;
static float4 _TMP0;
Texture2D<float4> _TMP10 : register(t0);
SamplerState _SourceMap : TEXUNIT0;
float _TexelSize;

 // main procedure, the original name was ps
float4 main( in X1X cin) : SV_Target0
{

    float2 _texCoord;
    float4 _result;
    float2 _offset1;
    float2 _offset2;
    float2 _offset4;
    float2 _offset5;
    float2 _offset6;
    float2 _offset7;
    float2 _offset8;

    _texCoord = cin._TEXCOORD0;
    _offset1 = float2( -1.00000000000000000E000f,  1.00000000000000000E000f)*_TexelSize;
    _TMP0 = _TMP10.Sample(_SourceMap, _texCoord + _offset1);
    _offset2 = float2(  0.00000000000000000E000f,  1.00000000000000000E000f)*_TexelSize;
    _TMP1 = _TMP10.Sample(_SourceMap, _texCoord + _offset2);
    _result = _TMP0 + _TMP1;
    _TMP2 = _TMP10.Sample(_SourceMap, _texCoord + _TexelSize.xx);
    _result = _result + _TMP2;
    _offset4 = float2( -1.00000000000000000E000f,  0.00000000000000000E000f)*_TexelSize;
    _TMP3 = _TMP10.Sample(_SourceMap, _texCoord + _offset4);
    _result = _result + _TMP3;
    _TMP4 = _TMP10.Sample(_SourceMap, _texCoord);
    _result = _result + _TMP4;
    _offset5 = float2(  1.00000000000000000E000f,  0.00000000000000000E000f)*_TexelSize;
    _TMP5 = _TMP10.Sample(_SourceMap, _texCoord + _offset5);
    _result = _result + _TMP5;
    _offset6 = (-_TexelSize).xx;
    _TMP6 = _TMP10.Sample(_SourceMap, _texCoord + _offset6);
    _result = _result + _TMP6;
    _offset7 = float2(  0.00000000000000000E000f, -1.00000000000000000E000f)*_TexelSize;
    _TMP7 = _TMP10.Sample(_SourceMap, _texCoord + _offset7);
    _result = _result + _TMP7;
    _offset8 = float2(  1.00000000000000000E000f, -1.00000000000000000E000f)*_TexelSize;
    _TMP8 = _TMP10.Sample(_SourceMap, _texCoord + _offset8);
    _result = _result + _TMP8;
    _result = _result/ 9.00000000000000000E000f;
    return float4(_result.x, _result.y, _result.z,  1.00000000000000000E000f);
} // main end
