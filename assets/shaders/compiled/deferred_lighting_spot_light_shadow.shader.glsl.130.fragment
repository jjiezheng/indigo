// glslf output by Cg compiler
// cgc version 3.1.0013, build date Apr 18 2012
// command line args: -DGL=1 -DGL32=1 -q -profileopts version=140 -profile glslf
// source file: deferred_lighting_spot_light_shadow.cg
//vendor NVIDIA Corporation
//version 3.1.0.13
//profile glslf
//program ps
//semantic DepthMap : TEXUNIT0
//semantic NormalMap : TEXUNIT1
//semantic ShadowMap : TEXUNIT2
//semantic LightInnerAngle
//semantic LightOuterAngle
//semantic LightDecay
//semantic LightDistance
//semantic ShadowMapSize
//semantic ShadowBias
//semantic LightBias
//semantic LightBleed
//semantic LightDirection
//semantic LightPosition
//semantic LightColor
//semantic DirectionToLight
//semantic ViewerPosition
//semantic ViewProjInv
//semantic LightViewProj
//semantic LightViewProjInv
//semantic WorldViewProj
//semantic NormalMatrix
//var sampler2D DepthMap : TEXUNIT0 : _DepthMap 0 : -1 : 1
//var sampler2D NormalMap : TEXUNIT1 : _NormalMap 1 : -1 : 1
//var sampler2D ShadowMap : TEXUNIT2 : _ShadowMap 2 : -1 : 1
//var float LightInnerAngle :  : _LightInnerAngle : -1 : 1
//var float LightOuterAngle :  : _LightOuterAngle : -1 : 1
//var float LightDistance :  : _LightDistance : -1 : 1
//var float ShadowBias :  : _ShadowBias : -1 : 1
//var float LightBias :  : _LightBias : -1 : 1
//var float LightBleed :  : _LightBleed : -1 : 1
//var float3 LightDirection :  : _LightDirection : -1 : 1
//var float3 LightPosition :  : _LightPosition : -1 : 1
//var float3 LightColor :  : _LightColor : -1 : 1
//var float3 DirectionToLight :  : _DirectionToLight : -1 : 1
//var float3 ViewerPosition :  : _ViewerPosition : -1 : 1
//var float4x4 ViewProjInv :  : _ViewProjInv[0], 4 : -1 : 1
//var float4x4 LightViewProj :  : _LightViewProj[0], 4 : -1 : 1
//var float3x3 NormalMatrix :  : _NormalMatrix[0], 3 : -1 : 1
//var float3 screenPosition : $vin.TEXCOORD0 : TEXCOORD0 : 1 : 1
//var float4 ps : $vout.COLOR0 : COLOR0 : -1 : 1

#version 140

struct VOutput {
    vec3 _screenPosition2;
};

float _TMP11;
float _TMP5;
float _TMP10;
float _TMP9;
float _TMP3;
float _TMP2;
float _TMP1;
vec4 _TMP8;
vec4 _TMP7;
vec2 _texCoord0036;
vec3 _unPackedNormal0042;
vec4 _r0052;
vec3 _v0062;
vec3 _r0070;
vec3 _v0070;
float _TMP91;
float _x0100;
float _TMP101;
float _TMP111;
vec3 _r0124;
float _TMP141;
vec4 _r0148;
vec4 _v0148;
vec2 _texCoord0158;
vec4 _moments0160;
float _zToCompare0160;
float _TMP163;
float _variance0164;
float _d0164;
float _p_max0164;
bool _TMP165;
float _TMP168;
float _x0173;
float _TMP174;
uniform sampler2D _DepthMap;
uniform sampler2D _NormalMap;
uniform sampler2D _ShadowMap;
uniform float _LightInnerAngle;
uniform float _LightOuterAngle;
uniform float _LightDistance;
uniform float _ShadowBias;
uniform float _LightBias;
uniform float _LightBleed;
uniform vec3 _LightDirection;
uniform vec3 _LightPosition;
uniform vec3 _LightColor;
uniform vec3 _DirectionToLight;
uniform vec3 _ViewerPosition;
uniform vec4 _ViewProjInv[4];
uniform vec4 _LightViewProj[4];
uniform vec3 _NormalMatrix[3];
in vec4 cg_TexCoord0;
out vec4 cg_FragColor;

 // main procedure, the original name was ps
void main()
{

    vec2 _screenPositionClip;
    float _depth;
    vec3 _normal;
    vec4 _positionScreen;
    vec3 _positionWorld;
    vec4 _lightContribution;
    vec3 _pixelToLight;
    float _lightDirectionDot;
    float _diffuseStrength;
    vec3 _lightVectorViewSpace;
    float _lightOuterCos;
    float _lightInnerCos;
    vec3 _viewerDirectionUnNormalized1;
    vec3 _viewDirection1;
    vec3 _floatVectorRaw1;
    vec3 _floatVector1;
    vec3 _pixelPositionFromLightNDC;

    _screenPositionClip = cg_TexCoord0.xy/cg_TexCoord0.z;
    _texCoord0036 = _screenPositionClip*5.00000000E-001 + 5.00000000E-001;
    _TMP7 = texture(_DepthMap, _texCoord0036);
    _depth = _TMP7.x*2.00000000E+000 - 1.00000000E+000;
    _TMP8 = texture(_NormalMap, _texCoord0036);
    _unPackedNormal0042 = _TMP8.xyz*2.00000000E+000 - 1.00000000E+000;
    _TMP9 = dot(_unPackedNormal0042.xyz, _unPackedNormal0042.xyz);
    _TMP10 = inversesqrt(_TMP9);
    _normal = _TMP10*_unPackedNormal0042.xyz;
    _positionScreen = vec4(_screenPositionClip.x, _screenPositionClip.y, _depth, 1.00000000E+000);
    _r0052.x = dot(_ViewProjInv[0], _positionScreen);
    _r0052.y = dot(_ViewProjInv[1], _positionScreen);
    _r0052.z = dot(_ViewProjInv[2], _positionScreen);
    _r0052.w = dot(_ViewProjInv[3], _positionScreen);
    _positionWorld = _r0052.xyz/_r0052.w;
    _lightContribution = vec4( 0.00000000E+000, 0.00000000E+000, 0.00000000E+000, 1.00000000E+000);
    _v0062 = _positionWorld - _LightPosition;
    _TMP9 = dot(_v0062, _v0062);
    _TMP10 = inversesqrt(_TMP9);
    _pixelToLight = _TMP10*_v0062;
    _lightDirectionDot = dot(_LightDirection, _pixelToLight);
    _diffuseStrength = 0.00000000E+000;
    _v0070 = -_LightDirection;
    _r0070.x = dot(_NormalMatrix[0], _v0070);
    _r0070.y = dot(_NormalMatrix[1], _v0070);
    _r0070.z = dot(_NormalMatrix[2], _v0070);
    _TMP9 = dot(_r0070, _r0070);
    _TMP10 = inversesqrt(_TMP9);
    _lightVectorViewSpace = _TMP10*_r0070;
    _lightOuterCos = cos(_LightOuterAngle);
    _lightInnerCos = cos(_LightInnerAngle);
    if (_lightDirectionDot > _lightOuterCos) { // if begin
        _TMP1 = dot(_normal, _lightVectorViewSpace);
        _TMP11 = min(1.00000000E+000, _TMP1);
        _TMP91 = max(0.00000000E+000, _TMP11);
        _x0100 = (_lightDirectionDot - _lightOuterCos)/(_lightInnerCos - _lightOuterCos);
        _TMP11 = min(1.00000000E+000, _x0100);
        _TMP101 = max(0.00000000E+000, _TMP11);
        _TMP2 = _TMP101*_TMP101*(3.00000000E+000 - 2.00000000E+000*_TMP101);
        _diffuseStrength = _TMP91*_TMP2;
    } // end if
    if (_lightDirectionDot > _lightInnerCos) { // if begin
        _TMP3 = dot(_normal, _lightVectorViewSpace);
        _TMP11 = min(1.00000000E+000, _TMP3);
        _TMP111 = max(0.00000000E+000, _TMP11);
        _diffuseStrength = _TMP111;
    } // end if
    _lightContribution.xyz = _LightColor*_diffuseStrength*2.54999995E+000*_LightDistance;
    if (_diffuseStrength > 0.00000000E+000) { // if begin
        _viewerDirectionUnNormalized1 = _ViewerPosition - _positionWorld;
        _TMP9 = dot(_viewerDirectionUnNormalized1, _viewerDirectionUnNormalized1);
        _TMP10 = inversesqrt(_TMP9);
        _viewDirection1 = _TMP10*_viewerDirectionUnNormalized1;
        _floatVectorRaw1 = _DirectionToLight + _viewDirection1;
        _r0124.x = dot(_NormalMatrix[0], _floatVectorRaw1);
        _r0124.y = dot(_NormalMatrix[1], _floatVectorRaw1);
        _r0124.z = dot(_NormalMatrix[2], _floatVectorRaw1);
        _TMP9 = dot(_r0124, _r0124);
        _TMP10 = inversesqrt(_TMP9);
        _floatVector1 = _TMP10*_r0124;
        _TMP5 = dot(_normal, _floatVector1);
        _TMP11 = min(1.00000000E+000, _TMP5);
        _TMP141 = max(0.00000000E+000, _TMP11);
        _lightContribution.w = _TMP141*_LightDistance;
    } // end if
    _v0148 = vec4(_positionWorld.x, _positionWorld.y, _positionWorld.z, 1.00000000E+000);
    _r0148.x = dot(_LightViewProj[0], _v0148);
    _r0148.y = dot(_LightViewProj[1], _v0148);
    _r0148.z = dot(_LightViewProj[2], _v0148);
    _r0148.w = dot(_LightViewProj[3], _v0148);
    _pixelPositionFromLightNDC = _r0148.xyz/_r0148.w;
    _texCoord0158 = _pixelPositionFromLightNDC.xy*5.00000000E-001 + 5.00000000E-001;
    _zToCompare0160 = _pixelPositionFromLightNDC.z + _ShadowBias;
    _moments0160 = texture(_ShadowMap, _texCoord0158);
    _TMP165 = true;
    if (_zToCompare0160 <= _moments0160.x) { // if begin
        _TMP163 = 1.00000000E+000;
        _TMP165 = false;
    } // end if
    if (_TMP165) { // if begin
        _variance0164 = _moments0160.y - _moments0160.x*_moments0160.x;
        _variance0164 = max(_variance0164, _LightBias);
        _d0164 = _zToCompare0160 - _moments0160.x;
        _p_max0164 = _variance0164/(_variance0164 + _d0164*_d0164);
        _TMP163 = _p_max0164;
    } // end if
    _x0173 = (_TMP163 - _LightBleed)/(1.00000000E+000 - _LightBleed);
    _TMP11 = min(1.00000000E+000, _x0173);
    _TMP174 = max(0.00000000E+000, _TMP11);
    _TMP168 = _TMP174*_TMP174*(3.00000000E+000 - 2.00000000E+000*_TMP174);
    _lightContribution = _lightContribution*_TMP168;
    cg_FragColor = _lightContribution;
    return;
} // main end
