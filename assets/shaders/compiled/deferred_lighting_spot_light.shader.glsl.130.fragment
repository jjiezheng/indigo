// glslf output by Cg compiler
// cgc version 3.1.0013, build date Apr 18 2012
// command line args: -DGL=1 -DGL32=1 -q -profileopts version=140 -profile glslf
// source file: deferred_lighting_spot_light.cg
//vendor NVIDIA Corporation
//version 3.1.0.13
//profile glslf
//program ps
//semantic DepthMap : TEXUNIT0
//semantic NormalMap : TEXUNIT1
//semantic LightInnerAngle
//semantic LightOuterAngle
//semantic LightDecay
//semantic LightDistance
//semantic HalfPixel
//semantic LightDirection
//semantic LightPosition
//semantic LightColor
//semantic DirectionToLight
//semantic ViewerPosition
//semantic ViewProjInv
//semantic LightViewProj
//semantic LightViewProjInv
//semantic WorldViewProj
//semantic NormalMatrix
//var sampler2D DepthMap : TEXUNIT0 : _DepthMap 0 : -1 : 1
//var sampler2D NormalMap : TEXUNIT1 : _NormalMap 1 : -1 : 1
//var float LightInnerAngle :  : _LightInnerAngle : -1 : 1
//var float LightOuterAngle :  : _LightOuterAngle : -1 : 1
//var float LightDistance :  : _LightDistance : -1 : 1
//var float2 HalfPixel :  : _HalfPixel : -1 : 1
//var float3 LightDirection :  : _LightDirection : -1 : 1
//var float3 LightPosition :  : _LightPosition : -1 : 1
//var float3 LightColor :  : _LightColor : -1 : 1
//var float3 DirectionToLight :  : _DirectionToLight : -1 : 1
//var float3 ViewerPosition :  : _ViewerPosition : -1 : 1
//var float4x4 ViewProjInv :  : _ViewProjInv[0], 4 : -1 : 1
//var float3 screenPosition : $vin.TEXCOORD0 : TEXCOORD0 : 1 : 1
//var float4 ps : $vout.COLOR0 : COLOR0 : -1 : 1

#version 140

struct VOutput {
    vec3 _screenPosition2;
};

float _TMP3;
float _TMP9;
float _TMP8;
float _TMP7;
float _TMP2;
float _TMP1;
float _TMP0;
vec4 _TMP6;
vec4 _TMP5;
vec2 _texCoord0029;
vec2 _texCoord0031;
vec2 _texCoord0035;
vec3 _unPackedNormal0035;
vec4 _r0045;
vec3 _v0055;
float _TMP70;
float _x0079;
float _TMP80;
float _TMP90;
float _TMP106;
uniform sampler2D _DepthMap;
uniform sampler2D _NormalMap;
uniform float _LightInnerAngle;
uniform float _LightOuterAngle;
uniform float _LightDistance;
uniform vec2 _HalfPixel;
uniform vec3 _LightDirection;
uniform vec3 _LightPosition;
uniform vec3 _LightColor;
uniform vec3 _DirectionToLight;
uniform vec3 _ViewerPosition;
uniform vec4 _ViewProjInv[4];
in vec4 cg_TexCoord0;
out vec4 cg_FragColor;

 // main procedure, the original name was ps
void main()
{

    vec2 _screenPositionClip;
    float _depth;
    vec3 _normal;
    vec4 _positionScreen;
    vec3 _positionWorld;
    vec4 _lightContribution;
    vec3 _pixelToLight;
    float _lightDirectionDot;
    float _diffuseStrength;
    float _lightOuterCos;
    float _lightInnerCos;
    vec3 _viewerDirectionUnNormalized1;
    vec3 _viewDirection1;
    vec3 _floatVectorRaw1;

    _screenPositionClip = cg_TexCoord0.xy/cg_TexCoord0.z;
    _texCoord0029 = _screenPositionClip*5.00000000E-01 + 5.00000000E-01;
    _texCoord0031 = _texCoord0029 + _HalfPixel;
    _TMP5 = texture(_DepthMap, _texCoord0031);
    _depth = _TMP5.x*2.00000000E+00 - 1.00000000E+00;
    _texCoord0035 = _texCoord0029 + _HalfPixel;
    _TMP6 = texture(_NormalMap, _texCoord0035);
    _unPackedNormal0035 = _TMP6.xyz*2.00000000E+00 - 1.00000000E+00;
    _TMP7 = dot(_unPackedNormal0035.xyz, _unPackedNormal0035.xyz);
    _TMP8 = inversesqrt(_TMP7);
    _normal = _TMP8*_unPackedNormal0035.xyz;
    _positionScreen = vec4(_screenPositionClip.x, _screenPositionClip.y, _depth, 1.00000000E+00);
    _r0045.x = dot(_ViewProjInv[0], _positionScreen);
    _r0045.y = dot(_ViewProjInv[1], _positionScreen);
    _r0045.z = dot(_ViewProjInv[2], _positionScreen);
    _r0045.w = dot(_ViewProjInv[3], _positionScreen);
    _positionWorld = _r0045.xyz/_r0045.w;
    _lightContribution = vec4( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00);
    _v0055 = _positionWorld - _LightPosition;
    _TMP7 = dot(_v0055, _v0055);
    _TMP8 = inversesqrt(_TMP7);
    _pixelToLight = _TMP8*_v0055;
    _lightDirectionDot = dot(_LightDirection, _pixelToLight);
    _diffuseStrength = 0.00000000E+00;
    _lightOuterCos = cos(_LightOuterAngle);
    _lightInnerCos = cos(_LightInnerAngle);
    if (_lightDirectionDot > _lightOuterCos) { // if begin
        _TMP0 = dot(_normal, _DirectionToLight);
        _TMP9 = min(1.00000000E+00, _TMP0);
        _TMP70 = max(0.00000000E+00, _TMP9);
        _x0079 = (_lightDirectionDot - _lightOuterCos)/(_lightInnerCos - _lightOuterCos);
        _TMP9 = min(1.00000000E+00, _x0079);
        _TMP80 = max(0.00000000E+00, _TMP9);
        _TMP1 = _TMP80*_TMP80*(3.00000000E+00 - 2.00000000E+00*_TMP80);
        _diffuseStrength = _TMP70*_TMP1;
    } // end if
    if (_lightDirectionDot > _lightInnerCos) { // if begin
        _TMP2 = dot(_normal, _DirectionToLight);
        _TMP9 = min(1.00000000E+00, _TMP2);
        _TMP90 = max(0.00000000E+00, _TMP9);
        _diffuseStrength = _TMP90;
    } // end if
    _lightContribution.xyz = _LightColor*_diffuseStrength*2.54999995E+00*_LightDistance;
    if (_diffuseStrength > 0.00000000E+00) { // if begin
        _viewerDirectionUnNormalized1 = _ViewerPosition - _positionWorld;
        _TMP7 = dot(_viewerDirectionUnNormalized1, _viewerDirectionUnNormalized1);
        _TMP8 = inversesqrt(_TMP7);
        _viewDirection1 = _TMP8*_viewerDirectionUnNormalized1;
        _floatVectorRaw1 = _DirectionToLight + _viewDirection1;
        _TMP3 = dot(_normal, _floatVectorRaw1);
        _TMP9 = min(1.00000000E+00, _TMP3);
        _TMP106 = max(0.00000000E+00, _TMP9);
        _lightContribution.w = _TMP106*_LightDistance;
    } // end if
    cg_FragColor = _lightContribution;
    return;
} // main end
