// glslv output by Cg compiler
// cgc version 3.1.0013, build date Apr 18 2012
// command line args: -DGL21=1 -q -profile glslv
// source file: deferred_render_colormap_normal_depth.cg
//vendor NVIDIA Corporation
//version 3.1.0.13
//profile glslv
//program vs
//semantic ColorMap
//semantic WorldViewProj
//semantic WorldView
//semantic NormalMatrix
//semantic DiffusePower
//semantic SpecularPower
//semantic SpecularIntensity
//semantic Far
//semantic Near
//var float4x4 WorldViewProj :  : _WorldViewProj[0], 4 : -1 : 1
//var float4x4 WorldView :  : _WorldView[0], 4 : -1 : 1
//var float4 position : $vin.POSITION : ATTR0 : 0 : 1
//var float3 normal : $vin.NORMAL : ATTR2 : 1 : 1
//var float2 texCoord : $vin.TEXCOORD0 : ATTR8 : 2 : 1
//var float4 vs.position : $vout.POSITION : HPOS : -1 : 1
//var float3 vs.normal : $vout.TEXCOORD0 : TEX0 : -1 : 1
//var float2 vs.texCoord : $vout.TEXCOORD1 : TEX1 : -1 : 1
//var float3 vs.depth : $vout.TEXCOORD2 : TEX2 : -1 : 1

#version 110

struct VOutput {
    vec4 _position2;
    vec3 _normal2;
    vec2 _texCoord2;
    vec3 _depth;
};

struct POutput {
    vec4 _color;
    vec4 _normal3;
    vec4 _depth1;
};

vec4 _r0010;
vec4 _r0020;
uniform vec4 _WorldViewProj[4];
uniform vec4 _WorldView[4];

 // main procedure, the original name was vs
void main()
{

    VOutput _OUT;

    _r0010.x = dot(_WorldViewProj[0], gl_Vertex);
    _r0010.y = dot(_WorldViewProj[1], gl_Vertex);
    _r0010.z = dot(_WorldViewProj[2], gl_Vertex);
    _r0010.w = dot(_WorldViewProj[3], gl_Vertex);
    _OUT._depth.x = _r0010.z;
    _OUT._depth.y = _r0010.w;
    _r0020.z = dot(_WorldView[2], gl_Vertex);
    _OUT._depth.z = _r0020.z;
    gl_TexCoord[2].xyz = _OUT._depth;
    gl_TexCoord[0].xyz = gl_Normal;
    gl_TexCoord[1].xy = gl_MultiTexCoord0.xy;
    gl_Position = _r0010;
    return;
} // main end
