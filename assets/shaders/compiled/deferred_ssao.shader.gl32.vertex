// glslv output by Cg compiler
// cgc version 3.1.0013, build date Apr 18 2012
// command line args: -DGL=1 -DGL32=1 -q -profileopts version=130 -profile glslv
// source file: deferred_ssao.cg
//vendor NVIDIA Corporation
//version 3.1.0.13
//profile glslv
//program vs
//semantic HalfPixel
//semantic Radius
//semantic NoiseScale
//semantic Kernel
//semantic Far
//semantic Near
//semantic NormalViewSpaceMap : TEXUNIT0
//semantic DepthMap : TEXUNIT1
//semantic NoiseMap : TEXUNIT2
//semantic Projection
//semantic ProjInv
//semantic ModelView
//semantic View
//var float4x4 ProjInv :  : _ProjInv[0], 4 : -1 : 1
//var float4 position : $vin.POSITION : POSITION : 0 : 1
//var float2 texCoord : $vin.TEXCOORD0 : TEXCOORD0 : 1 : 1
//var float4 vs.position : $vout.POSITION : HPOS : -1 : 1
//var float2 vs.texCoord : $vout.TEXCOORD0 : TEXCOORD0 : -1 : 1
//var float4 vs.positionVS : $vout.TEXCOORD1 : TEXCOORD1 : -1 : 1

#version 130

struct VOutput {
    vec4 _position2;
    vec2 _texCoord1;
    vec4 _positionVS;
};

struct POutput {
    vec4 _ssao;
    vec4 _temp;
};

vec4 _r0014;
in vec4 TEXCOORD0;
uniform vec4 _ProjInv[4];
in vec4 cg_Vertex;
out vec4 cg_TexCoord1;
out vec4 cg_TexCoord0;

 // main procedure, the original name was vs
void main()
{


    _r0014.x = dot(_ProjInv[0], cg_Vertex);
    _r0014.y = dot(_ProjInv[1], cg_Vertex);
    _r0014.z = dot(_ProjInv[2], cg_Vertex);
    _r0014.w = dot(_ProjInv[3], cg_Vertex);
    cg_TexCoord0.xy = TEXCOORD0.xy;
    cg_TexCoord1 = _r0014;
    gl_Position = cg_Vertex;
    return;
} // main end
