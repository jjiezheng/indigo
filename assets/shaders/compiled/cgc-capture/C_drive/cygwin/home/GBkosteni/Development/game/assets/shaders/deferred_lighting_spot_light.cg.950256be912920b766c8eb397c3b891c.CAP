#include "standard.h"
#include "utils.h"

sampler2D DepthMap 	: TEXUNIT0;
sampler2D NormalMap : TEXUNIT1;
sampler2D ShadowMap : TEXUNIT2;

uniform float LightInnerAngle;
uniform float LightOuterAngle;
uniform float LightDecay;
uniform float LightDistance;

uniform float2 ShadowMapSize;

uniform float3 LightDirection;
uniform float3 LightPosition;
uniform float3 LightColor;

uniform float3 DirectionToLight;
uniform float3 ViewerPosition;

uniform float4x4 ViewProjInv;
uniform float4x4 LightViewProj;
uniform float4x4 LightViewProjInv;
uniform float4x4 WorldViewProj;
uniform float3x3 NormalMatrix;

struct VOutput {
      float4 position 			: POSITION;
      float3 screenPosition 		: TEXCOORD0;
};

VOutput vs(float4 position : POSITION) {
    VOutput OUT;
    OUT.position = position;
    OUT.screenPosition = OUT.position.xyw;
    return OUT;
}

float4 ps(float4 position 		: POSITION,
		 float3 screenPosition 	: TEXCOORD0) : COLOR0 {

	// these need to be fed through in a texturetex2Dprojtex2Dproj
	float diffusePower = 0.01f * 255;// normalData.w * 255; // 0-1 -> 0-255
	float specularPower = 1;//depthSpec.z;
	float specularIntensity = 1;//depthSpec.w;

	float2 screenPositionClip = screenPosition.xy / screenPosition.z;// -> w
	float2 texCoord = contract(screenPositionClip);

	//------------------------------------------------------------
	// depth
	//------------------------------------------------------------

	float depth = unpackDepth(DepthMap, texCoord);

	//------------------------------------------------------------
	// normal
	//------------------------------------------------------------

	float3 normalData = unpackNormal(NormalMap, texCoord);
	float3 normal = normalize(normalData);

	//------------------------------------------------------------
	// world position
	//------------------------------------------------------------

	float4 positionScreen = float4(screenPositionClip, depth, 1.0f);
	float4 positionWorldRaw = mul(ViewProjInv, positionScreen);
	float3 positionWorld = positionWorldRaw.xyz / positionWorldRaw.w;

	//------------------------------------------------------------
	// spot light
	//------------------------------------------------------------

	float4 lightContribution = float4(0);

	//------------------------------------------------------------
	// diffuse
	// -----------------------------------------------------------

	float3 pixelToLight = normalize(positionWorld - LightPosition);
	float lightDirectionDot = dot(LightDirection, pixelToLight);

	float diffuseStrength = 0.0f;

	float3 lightVector = DirectionToLight;
  	float3 lightVectorViewSpace = DirectionToLight;//normalize(mul(NormalMatrix, lightVector));

	float lightOuterCos = cos(LightOuterAngle);
	float lightInnerCos = cos(LightInnerAngle);	

	if (lightDirectionDot > lightOuterCos) {
		diffuseStrength = saturate(dot(normal, lightVectorViewSpace));
		diffuseStrength *= smoothstep(lightOuterCos, lightInnerCos, lightDirectionDot);	
	}

	if (lightDirectionDot > lightInnerCos) {
		diffuseStrength = saturate(dot(normal, lightVectorViewSpace));
	}
	
	lightContribution.xyz = LightColor * diffuseStrength * diffusePower * LightDistance;

	//------------------------------------------------------------
	// specular
	// -----------------------------------------------------------

	float specularContribution = 0;

	if (diffuseStrength > 0) {
		float3 viewerDirectionUnNormalized = ViewerPosition - positionWorld;
		float3 viewDirection = normalize(viewerDirectionUnNormalized);

		float3 floatVectorRaw = lightVector + viewDirection;
		float3 floatVector = floatVectorRaw;//normalize(mul(NormalMatrix, floatVectorRaw));

		float incidence = pow(saturate(dot(normal, floatVector)), specularPower);

		lightContribution.w = incidence * specularIntensity * LightDistance;
	}

	//------------------------------------------------------------
	// shadow
	//------------------------------------------------------------

	float4 pixelPositionFromLightRaw = mul(LightViewProj, float4(positionWorld, 1));
	float3 pixelPositionFromLight = pixelPositionFromLightRaw.xyz / pixelPositionFromLightRaw.w;

	float2 shadowCoord =  0.5f + pixelPositionFromLight.xy * 0.5f;
	shadowCoord.y = 1.0f - shadowCoord.y;

	//float shadowFactor = shadowPCF(ShadowMap, shadowCoord, pixelPositionFromLight.z, ShadowMapSize);

	float3 colorSomething = tex2D(ShadowMap, shadowCoord).arg;
	return float4(colorSomething, depth * normal.z);


	//lightContribution *= shadowFactor;

	//return lightContribution;
} 
