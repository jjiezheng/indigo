// glslf output by Cg compiler
// cgc version 3.1.0013, build date Apr 24 2012
// command line args: -DGL=1 -DGL21=1 -q -profile glslf
// source file: deferred_lighting_spot_light_shadow.cg
//vendor NVIDIA Corporation
//version 3.1.0.13
//profile glslf
//program ps
//semantic DepthMap : TEXUNIT0
//semantic NormalMap : TEXUNIT1
//semantic ShadowMap : TEXUNIT2
//semantic LightInnerAngle
//semantic LightOuterAngle
//semantic LightDecay
//semantic LightDistance
//semantic ShadowMapSize
//semantic LightDirection
//semantic LightPosition
//semantic LightColor
//semantic DirectionToLight
//semantic ViewerPosition
//semantic ViewProjInv
//semantic LightViewProj
//semantic LightViewProjInv
//semantic WorldViewProj
//semantic NormalMatrix
//var sampler2D DepthMap : TEXUNIT0 : _DepthMap 0 : -1 : 1
//var float4x4 ViewProjInv :  : _ViewProjInv[0], 4 : -1 : 1
//var float3 screenPosition : $vin.TEXCOORD0 : TEX0 : 1 : 1
//var float4 ps : $vout.COLOR0 : COL : -1 : 1

#version 110

struct VOutput {
    vec3 _screenPosition2;
};

vec4 _ret_0;
vec4 _TMP1;
vec4 _r0047;
uniform sampler2D _DepthMap;
uniform vec4 _ViewProjInv[4];

 // main procedure, the original name was ps
void main()
{

    vec2 _screenPositionClip;
    vec2 _texCoord3;
    vec4 _positionScreen;
    vec3 _positionWorld;

    _screenPositionClip = gl_TexCoord[0].xy/gl_TexCoord[0].z;
    _texCoord3 = 5.00000000E-01*(_screenPositionClip + vec2( 1.00000000E+00, 1.00000000E+00));
    _TMP1 = texture2D(_DepthMap, _texCoord3);
    _positionScreen = vec4(_screenPositionClip.x, _screenPositionClip.y, _TMP1.x, 1.00000000E+00);
    _r0047.x = dot(_ViewProjInv[0], _positionScreen);
    _r0047.y = dot(_ViewProjInv[1], _positionScreen);
    _r0047.z = dot(_ViewProjInv[2], _positionScreen);
    _r0047.w = dot(_ViewProjInv[3], _positionScreen);
    _positionWorld = _r0047.xyz/_r0047.w;
    _ret_0 = vec4(_positionWorld.x, _positionWorld.y, _positionWorld.z, 1.00000000E+00);
    gl_FragColor = _ret_0;
    return;
} // main end
