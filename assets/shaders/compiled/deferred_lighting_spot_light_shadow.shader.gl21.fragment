// glslf output by Cg compiler
// cgc version 3.1.0013, build date Apr 24 2012
// command line args: -DGL=1 -DGL21=1 -q -profile glslf
// source file: deferred_lighting_spot_light_shadow.cg
//vendor NVIDIA Corporation
//version 3.1.0.13
//profile glslf
//program ps
//semantic DepthMap : TEXUNIT0
//semantic NormalMap : TEXUNIT1
//semantic ShadowMap : TEXUNIT2
//semantic LightInnerAngle
//semantic LightOuterAngle
//semantic LightDecay
//semantic LightDistance
//semantic ShadowMapSize
//semantic LightDirection
//semantic LightPosition
//semantic LightColor
//semantic DirectionToLight
//semantic ViewerPosition
//semantic ViewProjInv
//semantic LightViewProj
//semantic LightViewProjInv
//semantic WorldViewProj
//semantic NormalMatrix
//var sampler2D DepthMap : TEXUNIT0 : _DepthMap 0 : -1 : 1
//var sampler2D NormalMap : TEXUNIT1 : _NormalMap 1 : -1 : 1
//var sampler2D ShadowMap : TEXUNIT2 : _ShadowMap 2 : -1 : 1
//var float LightInnerAngle :  : _LightInnerAngle : -1 : 1
//var float LightOuterAngle :  : _LightOuterAngle : -1 : 1
//var float LightDistance :  : _LightDistance : -1 : 1
//var float2 ShadowMapSize :  : _ShadowMapSize : -1 : 1
//var float3 LightDirection :  : _LightDirection : -1 : 1
//var float3 LightPosition :  : _LightPosition : -1 : 1
//var float3 LightColor :  : _LightColor : -1 : 1
//var float3 DirectionToLight :  : _DirectionToLight : -1 : 1
//var float3 ViewerPosition :  : _ViewerPosition : -1 : 1
//var float4x4 ViewProjInv :  : _ViewProjInv[0], 4 : -1 : 1
//var float4x4 LightViewProj :  : _LightViewProj[0], 4 : -1 : 1
//var float3 screenPosition : $vin.TEXCOORD0 : TEX0 : 1 : 1
//var float4 ps : $vout.COLOR0 : COL : -1 : 1

#version 110

struct VOutput {
    vec3 _screenPosition2;
};

vec4 _TMP10;
float _TMP3;
float _TMP9;
float _TMP8;
float _TMP7;
float _TMP2;
float _TMP1;
float _TMP0;
vec4 _TMP6;
vec4 _normalData0041;
vec4 _unPackedNormal0041;
vec4 _r0051;
vec3 _v0061;
float _TMP76;
float _x0085;
float _TMP86;
float _TMP96;
float _TMP112;
vec4 _r0119;
vec4 _v0119;
float _shadowFactor0131;
float _sum0131;
float _y0131;
vec2 _shadowCoordOffset10131;
vec4 _c0135;
uniform sampler2D _DepthMap;
uniform sampler2D _NormalMap;
uniform sampler2DShadow _ShadowMap;
uniform float _LightInnerAngle;
uniform float _LightOuterAngle;
uniform float _LightDistance;
uniform vec2 _ShadowMapSize;
uniform vec3 _LightDirection;
uniform vec3 _LightPosition;
uniform vec3 _LightColor;
uniform vec3 _DirectionToLight;
uniform vec3 _ViewerPosition;
uniform vec4 _ViewProjInv[4];
uniform vec4 _LightViewProj[4];

 // main procedure, the original name was ps
void main()
{

    vec2 _screenPositionClip;
    vec2 _texCoord3;
    float _depth;
    vec3 _normal;
    vec4 _positionScreen;
    vec3 _positionWorld;
    vec4 _lightContribution;
    vec3 _pixelToLight;
    float _lightDirectionDot;
    float _diffuseStrength;
    float _lightOuterCos;
    float _lightInnerCos;
    vec3 _viewerDirectionUnNormalized1;
    vec3 _viewDirection1;
    vec3 _floatVectorRaw1;
    vec3 _pixelPositionFromLight;
    vec2 _shadowCoord1;

    _screenPositionClip = gl_TexCoord[0].xy/gl_TexCoord[0].z;
    _texCoord3 = 5.00000000E-01*(_screenPositionClip + vec2( 1.00000000E+00, 1.00000000E+00));
    _TMP6 = texture2D(_DepthMap, _texCoord3);
    _depth = _TMP6.x*2.00000000E+00 - 1.00000000E+00;
    _normalData0041 = texture2D(_NormalMap, _texCoord3);
    _unPackedNormal0041 = _normalData0041*2.00000000E+00 - 1.00000000E+00;
    _TMP7 = dot(_unPackedNormal0041.xyz, _unPackedNormal0041.xyz);
    _TMP8 = inversesqrt(_TMP7);
    _normal = _TMP8*_unPackedNormal0041.xyz;
    _positionScreen = vec4(_screenPositionClip.x, _screenPositionClip.y, _depth, 1.00000000E+00);
    _r0051.x = dot(_ViewProjInv[0], _positionScreen);
    _r0051.y = dot(_ViewProjInv[1], _positionScreen);
    _r0051.z = dot(_ViewProjInv[2], _positionScreen);
    _r0051.w = dot(_ViewProjInv[3], _positionScreen);
    _positionWorld = _r0051.xyz/_r0051.w;
    _lightContribution = vec4( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00);
    _v0061 = _positionWorld - _LightPosition;
    _TMP7 = dot(_v0061, _v0061);
    _TMP8 = inversesqrt(_TMP7);
    _pixelToLight = _TMP8*_v0061;
    _lightDirectionDot = dot(_LightDirection, _pixelToLight);
    _diffuseStrength = 0.00000000E+00;
    _lightOuterCos = cos(_LightOuterAngle);
    _lightInnerCos = cos(_LightInnerAngle);
    if (_lightDirectionDot > _lightOuterCos) { // if begin
        _TMP0 = dot(_normal, _DirectionToLight);
        _TMP9 = min(1.00000000E+00, _TMP0);
        _TMP76 = max(0.00000000E+00, _TMP9);
        _x0085 = (_lightDirectionDot - _lightOuterCos)/(_lightInnerCos - _lightOuterCos);
        _TMP9 = min(1.00000000E+00, _x0085);
        _TMP86 = max(0.00000000E+00, _TMP9);
        _TMP1 = _TMP86*_TMP86*(3.00000000E+00 - 2.00000000E+00*_TMP86);
        _diffuseStrength = _TMP76*_TMP1;
    } // end if
    if (_lightDirectionDot > _lightInnerCos) { // if begin
        _TMP2 = dot(_normal, _DirectionToLight);
        _TMP9 = min(1.00000000E+00, _TMP2);
        _TMP96 = max(0.00000000E+00, _TMP9);
        _diffuseStrength = _TMP96;
    } // end if
    _lightContribution.xyz = _LightColor*_diffuseStrength*2.54999995E+00*_LightDistance;
    if (_diffuseStrength > 0.00000000E+00) { // if begin
        _viewerDirectionUnNormalized1 = _ViewerPosition - _positionWorld;
        _TMP7 = dot(_viewerDirectionUnNormalized1, _viewerDirectionUnNormalized1);
        _TMP8 = inversesqrt(_TMP7);
        _viewDirection1 = _TMP8*_viewerDirectionUnNormalized1;
        _floatVectorRaw1 = _DirectionToLight + _viewDirection1;
        _TMP3 = dot(_normal, _floatVectorRaw1);
        _TMP9 = min(1.00000000E+00, _TMP3);
        _TMP112 = max(0.00000000E+00, _TMP9);
        _lightContribution.w = _TMP112*_LightDistance;
    } // end if
    _v0119 = vec4(_positionWorld.x, _positionWorld.y, _positionWorld.z, 1.00000000E+00);
    _r0119.x = dot(_LightViewProj[0], _v0119);
    _r0119.y = dot(_LightViewProj[1], _v0119);
    _r0119.z = dot(_LightViewProj[2], _v0119);
    _r0119.w = dot(_LightViewProj[3], _v0119);
    _pixelPositionFromLight = _r0119.xyz/_r0119.w;
    _shadowCoord1 = _pixelPositionFromLight.xy*5.00000000E-01 + 5.00000000E-01;
    _sum0131 = 0.00000000E+00;
    _y0131 = -1.50000000E+00;
    for (; _y0131 <= 1.50000000E+00; _y0131 = _y0131 + 1.00000000E+00) { // for begin
        _shadowCoordOffset10131 = _shadowCoord1 + vec2(-1.50000000E+00*_ShadowMapSize.x, _y0131*_ShadowMapSize.y);
        _c0135 = vec4(_shadowCoordOffset10131.x, _shadowCoordOffset10131.y, _pixelPositionFromLight.z*5.00000000E-01 + 5.00000000E-01, 1.00000000E+00);
        _TMP10 = shadow2DProj(_ShadowMap, _c0135);
        _sum0131 = _sum0131 + _TMP10.x;
        _shadowCoordOffset10131 = _shadowCoord1 + vec2(-5.00000000E-01*_ShadowMapSize.x, _y0131*_ShadowMapSize.y);
        _c0135 = vec4(_shadowCoordOffset10131.x, _shadowCoordOffset10131.y, _pixelPositionFromLight.z*5.00000000E-01 + 5.00000000E-01, 1.00000000E+00);
        _TMP10 = shadow2DProj(_ShadowMap, _c0135);
        _sum0131 = _sum0131 + _TMP10.x;
        _shadowCoordOffset10131 = _shadowCoord1 + vec2(5.00000000E-01*_ShadowMapSize.x, _y0131*_ShadowMapSize.y);
        _c0135 = vec4(_shadowCoordOffset10131.x, _shadowCoordOffset10131.y, _pixelPositionFromLight.z*5.00000000E-01 + 5.00000000E-01, 1.00000000E+00);
        _TMP10 = shadow2DProj(_ShadowMap, _c0135);
        _sum0131 = _sum0131 + _TMP10.x;
        _shadowCoordOffset10131 = _shadowCoord1 + vec2(1.50000000E+00*_ShadowMapSize.x, _y0131*_ShadowMapSize.y);
        _c0135 = vec4(_shadowCoordOffset10131.x, _shadowCoordOffset10131.y, _pixelPositionFromLight.z*5.00000000E-01 + 5.00000000E-01, 1.00000000E+00);
        _TMP10 = shadow2DProj(_ShadowMap, _c0135);
        _sum0131 = _sum0131 + _TMP10.x;
    } // end for
    _shadowFactor0131 = _sum0131/1.60000000E+01;
    _lightContribution = _lightContribution*_shadowFactor0131;
    gl_FragColor = _lightContribution;
    return;
} // main end
