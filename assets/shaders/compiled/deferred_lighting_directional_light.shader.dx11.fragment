// ps_4_0 output by Cg compiler
// cgc version 3.1.0013, build date Apr 18 2012
// command line args: -DDX11=1 -q -unroll all -profile ps_5_0
// source file: deferred_lighting_directional_light.cg
//vendor NVIDIA Corporation
//version 3.1.0.13
//profile ps_5_0
//program ps
//semantic NormalMap : TEXUNIT0
//semantic LightDirection
//semantic LightColor
//semantic HalfPixel
//var sampler2D NormalMap : TEXUNIT0 : _NormalMap 0 : -1 : 1
//var float4 LightDirection :  : _LightDirection : -1 : 1
//var float3 LightColor :  : _LightColor : -1 : 1
//var float2 HalfPixel :  : _HalfPixel : -1 : 1
//var float2 texCoord : $vin.TEXCOORD0 :  : 1 : 1
//var float4 ps : $vout.COLOR0 : COLOR0 : -1 : 1

#pragma pack_matrix(row_major)

struct VOutput {
    float4 _position1 : SV_Position;
    float2 _texCoord2 : TEXCOORD0;
};

struct X1X {
    float4 _POSITION : SV_Position;
    float2 _TEXCOORD0 : TEXCOORD0;
};

static float _TMP2;
static float3 _TMP1;
static float _TMP4;
static float _TMP3;
static float4 _unPackedNormal0007;
static float4 _normalData0007;
static float2 _texCoord0007;
Texture2D<float4> _TMP10 : register(t0);
SamplerState _NormalMap : TEXUNIT0;
uniform float4 _LightDirection;
uniform float3 _LightColor;
uniform float2 _HalfPixel;

 // main procedure, the original name was ps
float4 main( in X1X cin) : SV_Target0
{

    float2 _texCoord1;
    float3 _lightVector;
    float _diffuseStrength;
    float3 _diffuseContribution;

    _texCoord1 = cin._TEXCOORD0;
    _texCoord0007 = _texCoord1 + _HalfPixel;
    _normalData0007 = _TMP10.Sample(_NormalMap, _texCoord0007);
    _unPackedNormal0007 = _normalData0007* 2.00000000000000000E000f -  1.00000000000000000E000f;
    _TMP3 = dot(_LightDirection.xyz, _LightDirection.xyz);
    _TMP4 = rsqrt(_TMP3);
    _TMP1 = _TMP4*_LightDirection.xyz;
    _lightVector = -_TMP1;
    _TMP2 = dot(_unPackedNormal0007.xyz, _lightVector);
    _diffuseStrength = max( 0.00000000000000000E000f, _TMP2);
    _diffuseContribution = _LightColor*_diffuseStrength;
    return float4(_diffuseContribution.x, _diffuseContribution.y, _diffuseContribution.z,  0.00000000000000000E000f);
} // main end
