#include "standard.h"

sampler2D ColorMap;

uniform float4x4 WorldViewProj;
uniform float4x4 WorldView;
uniform float3x3 NormalMatrix;

uniform float DiffusePower;
uniform float SpecularPower;
uniform float SpecularIntensity;

uniform float Far;
uniform float Near;

struct VOutput {
	float4 position			: POSITION;
	float3 normal			: TEXCOORD0;
	float2 texCoord			: TEXCOORD1;
	float3 depth			: TEXCOORD2;
};

VOutput vs(float4 position 		: POSITION,
		   float3 normal 		: NORMAL,
		   float2 texCoord 		: TEXCOORD0) {
	VOutput OUT;
	OUT.position = mul(WorldViewProj, position);
	OUT.normal = normal;// mul(NormalMatrix, normal);
	OUT.texCoord = texCoord;

	OUT.depth.x = OUT.position.z;
	OUT.depth.y = OUT.position.w;

	float4 positionView = mul(WorldView, position);
 	OUT.depth.z = positionView.z;

 	return OUT;
}

struct POutput {
	float4 color 	: COLOR0;
	float4 normal 	: COLOR1;
	float4 depth 	: COLOR2;
};

POutput ps(float4 position			: POSITION,
		   float3 normal			: TEXCOORD0,
		   float2 texCoord			: TEXCOORD1,
		   float3 depth 			: TEXCOORD2) {
	POutput OUT;
	
	OUT.color = tex2D(ColorMap, texCoord);				
	OUT.normal = packNormal(float4(normal, DiffusePower));

	float depthLinear = linearize(depth.z, Near, Far);

	float3 packedDepth = packDepth(depthLinear);
	OUT.depth = float4(depthLinear, depthLinear, depthLinear, 0);// float4(packedDepth, 0);

	return OUT;
}