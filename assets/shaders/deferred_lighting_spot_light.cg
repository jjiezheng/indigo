#include "standard.h"
#include "utils.h"

sampler2D DepthMap : TEXUNIT0;
sampler2D NormalMap : TEXUNIT1;
sampler2D ShadowMap : TEXUNIT2;

uniform float4 ViewPosition;

uniform float4 LightDirection;
uniform float4 LightPosition;
uniform float3 LightColor;

uniform float LightInnerAngle;
uniform float LightOuterAngle;
uniform float LightDecay;

uniform float4x4 View;
uniform float4x4 ViewProjInv;
uniform float4x4 ProjInv;
uniform float4x4 LightViewProj;
uniform float4x4 WorldViewProj;
uniform float3x3 NormalMatrix;

struct VOutput {
      float4 position 			: POSITION;
      float4 screenPosition 	: TEXCOORD0;
};

VOutput vs(float4 position : POSITION) {
    VOutput OUT;
    OUT.position = mul(WorldViewProj, position);
    OUT.screenPosition = OUT.position;
    return OUT;
}

float2 texOffset( int u, int v )
{
	return float2(u * 1.0f/1024, v * 1.0f/768 );
}

float4 ps(float4 position 		: POSITION,
		  float4 screenPosition : TEXCOORD0) : COLOR0 {

	float4 screenPositionHom = screenPosition / screenPosition.w;
	float2 texCoord = contract(screenPositionHom.xyz).xy;

	//------------------------------------------------------------
	// world position
	//------------------------------------------------------------

	float4 normalData = unpackNormal(NormalMap, texCoord);
	float3 normal = normalize(normalData.xyz);
	float diffusePower = normalData.w * 255; // 0-1 -> 0-255

	float depth = unpackDepth(DepthMap, texCoord);

	if (depth == 1.0f) {
		//return float4(0, 0, 0, 0);
	}

	float specularPower = 1;//depthSpec.z;
	float specularIntensity = 1;//depthSpec.w;

	float4 positionScreen = float4(screenPositionHom.xy, depth, 1.0f);
	float4 positionWorldRaw = mul(ViewProjInv, positionScreen);
	float4 positionWorld = positionWorldRaw / positionWorldRaw.w;

	//------------------------------------------------------------
	// spot light
	//------------------------------------------------------------

	float distance = length(LightDirection);
  	distance = distance * distance;

	// diffuse
	float3 directionToLight = normalize(LightPosition.xyz - positionWorld.xyz);
	float lightDirectionDot = dot(normalize(LightDirection.xyz), -directionToLight);

	float diffuseStrength = 0.0f;

	float3 lightVector = normalize(-LightDirection.xyz);
  	float3 lightVectorViewSpace = lightVector;//normalize(mul(NormalMatrix, lightVector));

	float lightOuterCos = cos(LightOuterAngle);
	float lightInnerCos = cos(LightInnerAngle);	

	if (lightDirectionDot > lightOuterCos) {
		diffuseStrength = max(0.0f, saturate(dot(normal, normalize(lightVectorViewSpace))));
		diffuseStrength *= smoothstep(lightOuterCos, lightInnerCos, lightDirectionDot);	
	}

	if (lightDirectionDot > lightInnerCos) {
		diffuseStrength = max(0.0f, saturate(dot(normal, normalize(lightVectorViewSpace))));
	}
	
	float3 diffuseContribution = LightColor * diffusePower * diffuseStrength / distance;

	//specular
	float specularContribution = 0;

	if (diffuseStrength > 0) {
		float4 viewDirectionRaw = ViewPosition - positionWorld;
		float3 viewDirection = normalize(viewDirectionRaw.xyz);

		float3 halfVectorRaw = lightVector + viewDirection;
		float3 halfVector = halfVectorRaw;//normalize(mul(NormalMatrix, halfVectorRaw));

		float i = pow(saturate(dot(normal, halfVector)), specularPower);
		specularContribution = i * specularIntensity / distance;
	}

	//------------------------------------------------------------
	// shadows
	//------------------------------------------------------------
	float4 pixelPositionFromLightRaw = mul(LightViewProj, positionWorld);
	float3 pixelPositionFromLight = pixelPositionFromLightRaw.xyz / pixelPositionFromLightRaw.w;

	float2 shadowCoord = (pixelPositionFromLight.xy * 0.5f) + 0.5f;
	shadowCoord.y = 1.0f - shadowCoord.y;

	float lightDepth = unpackDepth(ShadowMap, shadowCoord).x;

	if (lightDepth + 0.0005f < pixelPositionFromLight.z) {
		float sum = 0.0f;
		for (float y = -1.5f; y <= 1.5f; y += 1.0f)
		{
			for (float x = -1.5f; x <= 1.5f; x += 1.0f)
			{
				sum += tex2D(ShadowMap, shadowCoord + texOffset(x,y)).x;
			}
		}

		float shadowFactor = sum / 16.0f;

		diffuseContribution *= shadowFactor - 0.1;
	}

	/*
	//------------------------------------------------------------
	float4 pixelPositionFromLightRaw = mul(LightViewProj, positionWorld);
	float3 pixelPositionFromLight = pixelPositionFromLightRaw.xyz / pixelPositionFromLightRaw.w;

	float4 shadowCoord;
	shadowCoord.x = (pixelPositionFromLight.x * 0.5f) + 0.5f;
	shadowCoord.y = (pixelPositionFromLight.y * 0.5f) + 0.5f;
	shadowCoord.y = 1.0f - shadowCoord.y;
	shadowCoord.z = pixelPositionFromLight.z;
	shadowCoord.w = pixelPositionFromLightRaw.w;

	//float lightDepth = unpackDepth(ShadowMap, shadowCoord).x;

	//if (lightDepth + 0.0005f < pixelPositionFromLight.z) {
		float sum = 0;
		float x, y;

		for (y = -1.5; y <= 1.5; y += 1.0)
		  for (x = -1.5; x <= 1.5; x += 1.0)
		    sum += offset_lookup(ShadowMap, shadowCoord, float2(x, y)).x;

		float shadowFactor = sum / 16.0f;

		diffuseContribution *= shadowFactor;// - 0.5;
	//}
	*/

	return float4(diffuseContribution, 0);
} 
