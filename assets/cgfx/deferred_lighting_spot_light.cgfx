#include "utils.cg"

sampler2D NormalMap = sampler_state {
	MinFilter = Point;
	MagFilter = Point;
	WrapS = Clamp;
	WrapT = Clamp;
};

sampler2D DepthMap = sampler_state {
	MinFilter = Point;
	MagFilter = Point;
	WrapS = Clamp;
	WrapT = Clamp;
};

uniform float2 HalfPixel;

uniform float4 LightPosition;
uniform float3 LightColor;
uniform float LightRadius;

uniform float4x4 ViewProjInv;
uniform float4x4 WorldViewProj;

struct VOutput {
      float4 position 			: POSITION;
};

VOutput vs(float4 position : POSITION) {
    VOutput OUT;
    OUT.position = position;
    return OUT;
}

VOutput vsgl(float4 position : ATTR0) {
  return vs(position);
}

float4 ps() : COLOR {
	/*float3 screenPositionHom = screenPosition.xyz / screenPosition.w;
	float2 texCoord = contract(screenPositionHom) - HalfPixel;

	float4 normalData = tex2D(NormalMap, texCoord);
	float3 normal = normalData.xyz;

	float depth = tex2D(DepthMap, texCoord);

	float4 positionScreen;
	positionScreen.xy = screenPositionHom.xy;
	positionScreen.z = depth; 
	positionScreen.w = 1.0f;

	float4 positionRaw = mul(ViewProjInv, positionScreen);
	float4 position = positionRaw / positionRaw.w;

	float4 lightDirection = LightPosition - position;

	float diffuseStrength = max(0.0f, dot(normalize(normal), normalize(lightDirection)));
	float3 diffuseColor = LightColor * diffuseStrength;

	float attenuation = saturate(1.0f - length(lightDirection) / LightRadius); 
	float3 finalColor = diffuseColor * attenuation;*/

	return float4(1.0f, 0.0f, 0.0f, 1);
}

technique dx {
  pass {
  	BlendEnable = false;
  	SrcBlend = One;
  	DestBlend = One;
    VertexProgram = compile vs_4_0 vs();
    FragmentProgram = compile ps_4_0 ps();
  }
}

technique latest {
  pass {
  	BlendEnable = false;
  	SrcBlend = One;
  	DestBlend = One;
    VertexProgram = compile glslv vsgl();
    FragmentProgram = compile glslf ps();
  }
}
