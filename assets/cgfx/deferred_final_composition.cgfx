sampler2D ColorMap = sampler_state {
	MinFilter = Linear;
	MagFilter = Linear;
	WrapS = Clamp;
	WrapT = Clamp;
};

sampler2D LightMap = sampler_state {
	MinFilter = Linear;
	MagFilter = Linear;
	WrapS = Clamp;
	WrapT = Clamp;
};

uniform float2 HalfPixel;

struct VOutput {
	float4 position			: POSITION;
	float2 texCoord			: TEXCOORD0;
};

VOutput vs(float4 position 		: POSITION,
		   float2 texCoord 		: TEXCOORD0) {
	VOutput OUT;
	OUT.position = position;
	OUT.texCoord = texCoord - HalfPixel;
 	return OUT;
}

VOutput vsgl(float4 position 		: ATTR0,
		   	 float2 texCoord 		: ATTR8) {
	return vs(position, texCoord);
}

float4 ps(float2 texCoord		: TEXCOORD0) : COLOR {
	float4 color = tex2D(ColorMap, texCoord);
	float4 light = tex2D(LightMap, texCoord);
	float4 finalColor = color * light;
	return float4(finalColor.rgb, 1.0f);
}

technique dx {
	pass {
		VertexProgram = compile vs_4_0 vs();
		FragmentProgram = compile ps_4_0 ps();
	}
}
	
technique latest {
	pass {
		VertexProgram = compile latest vsgl();
		FragmentProgram = compile latest ps();
	}
}
