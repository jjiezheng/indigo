
texture colorMap  <
	string ResourceName = "";//Optional default file name
	string UIName =  "colorMap Texture";
	string ResourceType = "2D";
>;

sampler2D colorMapSampler = sampler_state {
	Texture = <colorMap>;
	MinFilter = LinearMipMapLinear;
	MagFilter = Linear;
	WrapS = Repeat;
	WrapT = Repeat;
};


texture normalMap  <
	string ResourceName = "";//Optional default file name
	string UIName =  "normalMap Texture";
	string ResourceType = "2D";
>;

sampler2D normalMapSampler = sampler_state {
	Texture = <normalMap>;
	MinFilter = LinearMipMapLinear;
	MagFilter = Linear;
	WrapS = Repeat;
	WrapT = Repeat;
};
	
float3 ambientColor : Ambient <
    string UIName =  "Ambient Light";
    string UIWidget = "Color";
> = {0.0f,0.0f,0.0f};

float3 lightPosition : Position <
    string Object = "PointLight0";
    string UIName =  "LightPosition";
    string Space = "World";
> = {-0.5f,2.0f,1.25f};

float4x4 WorldViewProj : WorldViewProjection< string UIWidget="None"; >;
float4x4 World : World< string UIWidget="None"; >;
float4x4 NormalMatrix : Projection< string UIWidget="None"; >;

struct VOutput {
	float4 position			: POSITION;
	float2 texCoord			: TEXCOORD0;
	float3 vPosition		: TEXCOORD1;
	float3 normal			: TEXCOORD2;
};

VOutput mainVS(	float4 position 		: ATTR0,
				float4 normal 			: ATTR2,
				float2 texCoord 		: ATTR8) {
	VOutput OUT;
	OUT.position = mul(WorldViewProj, position);
	OUT.vPosition = mul(World, position).xyz;
	OUT.texCoord = texCoord;
	OUT.normal = normal.xyz;
 	return OUT;
}

float4 mainPS(	float2 texCoord			: TEXCOORD0,
				float3 vPosition		: TEXCOORD1,
				float3 normal 			: TEXCOORD2,
				uniform float3 lightPosition,
				uniform sampler2D colorMapSampler,
				uniform sampler2D normalMapSampler,
				uniform float4x4 normalMatrix) : COLOR {
	
	float3 finalColor = float3(0, 0, 0);
					
	normal += 2 * tex2D(normalMapSampler, texCoord).rgb - 1;
	
	float3 diffuseColor = tex2D(colorMapSampler, texCoord).rgb;
					
	// diffuse + ambient
	{
		float3 lightDirection = lightPosition - vPosition;
		float diffuseStrength = max(0.0f, dot(normalize(normal), normalize(lightDirection)));

		float3 diffuseAmount = diffuseColor * diffuseStrength;
		finalColor += diffuseAmount + ambientColor;
	}
					
	return float4(finalColor, 1.0f);
}

technique technique0 {
	pass p0 {
		VertexProgram = compile arbvp1 mainVS();
		FragmentProgram = compile arbfp1 mainPS(lightPosition, colorMapSampler, normalMapSampler, NormalMatrix);
	}
}