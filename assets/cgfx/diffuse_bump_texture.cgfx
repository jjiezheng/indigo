sampler2D NormalMap = sampler_state {
	MinFilter = LinearMipMapLinear;
	MagFilter = Linear;
	WrapS = Repeat;
	WrapT = Repeat;
};

sampler2D ColorMap = sampler_state {
	MinFilter = LinearMipMapLinear;
	MagFilter = Linear;
	WrapS = Repeat;
	WrapT = Repeat;
};
	
float3 ambientColor : Ambient <
    string UIName =  "Ambient Light";
    string UIWidget = "Color";
> = {0.0f,0.0f,0.0f};

float3 lightPosition : Position <
    string Object = "PointLight0";
    string UIName =  "LightPosition";
    string Space = "World";
> = {-0.5f,2.0f,1.25f};

float4x4 WorldViewProj : WorldViewProjection< string UIWidget="None"; >;
float4x4 World : World< string UIWidget="None"; >;
float4x4 NormalMatrix : Projection< string UIWidget="None"; >;

struct VOutput {
	float4 position			: POSITION;
	float2 texCoord			: TEXCOORD0;
	float3 vPosition		: TEXCOORD1;
	float3 normal			: TEXCOORD2;
};

VOutput vs(	float4 position 		: POSITION,
			float4 normal 			: NORMAL,
			float2 texCoord 		: TEXCOORD0) {
	VOutput OUT;
	OUT.position = mul(WorldViewProj, position);
	OUT.vPosition = mul(World, position).xyz;
	OUT.texCoord = texCoord;
	OUT.normal = normal.xyz;
 	return OUT;
}

VOutput vsgl(float4 position 		: ATTR0,
			 float4 normal 			: ATTR2,
			 float2 texCoord 		: ATTR8) {
	return vs(position, normal, texCoord);
}

float3 expand(float3 v) {
  return (v - 0.5) * 2; // Expand a range-compressed vector
}


float4 ps(	float2 texCoord			: TEXCOORD0,
			float3 vPosition		: TEXCOORD1,
			float3 normal 			: TEXCOORD2,
			uniform float3 lightPosition,
			uniform sampler2D colorMap,
			uniform sampler2D normalMap,
			uniform float4x4 normalMatrix) : COLOR {
	
	float3 finalColor = float3(0, 0, 0);
					
	normal += expand(tex2D(normalMap, texCoord).rgb);
	
	float3 diffuseColor = tex2D(colorMap, texCoord).rgb;
					
	// diffuse + ambient
	{
		float3 lightDirection = lightPosition - vPosition;
		float diffuseStrength = max(0.0f, dot(normalize(normal), normalize(lightDirection)));

		float3 diffuseAmount = diffuseColor * diffuseStrength;
		finalColor += diffuseAmount + ambientColor;
	}
					
	return float4(finalColor, 1.0f);
}

technique dx {
	pass {
		VertexProgram = compile vs_4_0 vs();
		FragmentProgram = compile ps_4_0 ps(lightPosition, ColorMap, NormalMap, NormalMatrix);
	}
}

technique gl {
	pass {
		VertexProgram = compile latest vsgl();
		FragmentProgram = compile latest ps(lightPosition, ColorMap, NormalMap, NormalMatrix);
	}
}
