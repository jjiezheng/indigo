uniform float3 ambientColor;
uniform float3 LightPosition;

sampler2D ColorMap = sampler_state {
	MinFilter = LinearMipMapLinear;
	MagFilter = Linear;
	WrapS = Repeat;
	WrapT = Repeat;
};

sampler2D NormalMap = sampler_state {
	MinFilter = LinearMipMapLinear;
	MagFilter = Linear;
	WrapS = Repeat;
	WrapT = Repeat;
};

uniform float4x4 WorldViewProj;
uniform float4x4 World;
uniform float4x4 NormalMatrix;

float3 expand(float3 v) {
  return (v - 0.5) * 2; // Expand a range-compressed vector
}

struct VOutput {
	float4 position			: POSITION;
	float2 texCoord			: TEXCOORD0;
	float3 vPosition		: TEXCOORD1;
	float3 normal			: TEXCOORD2;
};

VOutput vs(float4 position 		: POSITION,
		   float4 normal 		: NORMAL,
		   float2 texCoord 		: TEXCOORD0) {
	VOutput OUT;
	OUT.position = mul(WorldViewProj, position);
	OUT.vPosition = mul(World, position).xyz;
	OUT.texCoord = texCoord;
	OUT.normal = normal.xyz;
 	return OUT;
}

float4 ps(float2 texCoord			: TEXCOORD0,
		  float3 vPosition			: TEXCOORD1,
		  float3 normal 			: TEXCOORD2) : COLOR {
	
	float3 finalColor = float3(0, 0, 0);

	float3 diffuseColor = tex2D(ColorMap, texCoord).rgb;
					
	normal += expand(tex2D(NormalMap, texCoord).rgb);
					
	// diffuse + ambient
	{
		float3 lightDirection = LightPosition - vPosition;
		float diffuseStrength = max(0.0f, dot(normalize(normal), normalize(lightDirection)));

		float3 diffuseAmount = diffuseColor * diffuseStrength;
		finalColor += diffuseAmount + ambientColor;
	}
					
	return float4(finalColor, 1.0f);
}
	



technique dx {
	pass {
		VertexProgram = compile vs_4_0 vs();
		FragmentProgram = compile ps_4_0 ps();
	}
}
