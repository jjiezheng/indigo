uniform float3 DiffuseColor;
uniform float3 AmbientColor;
uniform float3 LightPosition;
uniform float3 LightColor;
uniform float4x4 WorldViewProj;
uniform float4x4 World;
uniform float4x4 NormalMatrix;

struct VOutput {
	float4 position			: POSITION;
	float3 normal			: TEXCOORD0;
	float3 vPosition		: TEXCOORD1;
};

VOutput vs(float4 position 		: POSITION,
		   float4 normal 		: NORMAL) {
	VOutput OUT;
	OUT.position = mul(WorldViewProj, position);
	OUT.vPosition = mul(World, position).xyz;
	OUT.normal = normal.xyz;// mul(NormalMatrix, normal).xyz;
 	return OUT;
}

VOutput vsgl(float4 position 		: ATTR0,
			 float4 normal 			: ATTR2) {
	return vs(position, normal);
}

float4 ps(float3 normal			: TEXCOORD0,
		  float3 vPosition		: TEXCOORD1) : COLOR {
	
	float3 finalColor = float3(0, 0, 0);
	
	// diffuse + ambient
	{
		float3 lightDirection = LightPosition - vPosition;
		float diffuseStrength = max(0.0f, dot(normalize(normal), normalize(lightDirection)));
		float3 diffuseAmount = lerp(DiffuseColor, LightColor, 0.5) * diffuseStrength;
		finalColor += diffuseAmount + AmbientColor;
	}
	
	return float4(finalColor, 1);
}

technique dx {
	pass {
		VertexProgram = compile vs_4_0 vs();
		FragmentProgram = compile ps_4_0 ps();
	}
}

technique gl {
	pass {
		CullFaceEnable = true;
		VertexProgram = compile latest vsgl();
		FragmentProgram = compile latest ps();
	}
}
