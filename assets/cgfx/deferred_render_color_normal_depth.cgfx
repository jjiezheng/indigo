#include "utils.cg"

uniform float3 DiffuseColor;
uniform float3 AmbientColor;

uniform float4x4 WorldViewProj;
uniform float4x4 World;
uniform float3x3 NormalMatrix;

struct VOutput {
	float4 position			: POSITION;
	float3 normal			: TEXCOORD0;
	float2 depth			: TEXCOORD1;
};

VOutput vs(float4 position 		: POSITION,
		   float4 normal 		: NORMAL) {
	VOutput OUT;
	OUT.position = mul(WorldViewProj, position);
	OUT.normal = normal.xyz;
	OUT.depth.x = OUT.position.z;
	OUT.depth.y = OUT.position.w;
 	return OUT;
}

VOutput vsgl(float4 position 		: ATTR0,
			 float4 normal 			: ATTR2) {
	return vs(position, normal);
}

struct POutput {
	float4 color 	: COLOR0;
	float4 normal 	: COLOR1;
	float depth 	: COLOR2;
};


POutput ps(float3 normal			: TEXCOORD0,
		   float2 depth 			: TEXCOORD1) {
	POutput OUT;
	OUT.color = float4(DiffuseColor, 1);					
	OUT.normal = float4(normal, 1);
	OUT.depth = depth.x / depth.y; // z / w
	return OUT;
}

technique dx {
	pass {
		VertexProgram = compile vs_4_0 vs();
		FragmentProgram = compile ps_4_0 ps();
	}
}

technique gl {
	pass {
		VertexProgram = compile latest vsgl();
		FragmentProgram = compile latest ps();
	}
}
