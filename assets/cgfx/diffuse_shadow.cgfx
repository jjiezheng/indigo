struct VOutput {
	float4 position			: POSITION;
	float3 normal			: TEXCOORD0;
	float3 vPosition		: TEXCOORD1;
	float4 shadowMapCoord	: TEXCOORD2;
};

VOutput vs(float4 position 		: POSITION,
		   float4 normal 		: NORMAL,
		   uniform float4x4 worldViewProj,
		   uniform float4x4 world,
		   uniform float4x4 worldLight) {
	VOutput OUT;
	OUT.position = mul(worldViewProj, position);
	OUT.vPosition = mul(world, position).xyz;
	OUT.normal = normal.xyz;// mul(NormalMatrix, normal).xyz;
	OUT.shadowMapCoord = mul(worldLight, position);
 	return OUT;
}

uniform float4 DiffuseColor;
uniform float3 AmbientColor;
uniform float3 LightPosition;
uniform float3 LightColor;

sampler2D ShadowMap = sampler_state {
	MinFilter = Linear;
	MagFilter = Linear;
	WrapS = ClampToBorder;
	WrapT = ClampToBorder;
	CompareMode = CompareRToTexture;
	CompareFunc = LEqual;
	BorderColor = float4(1, 1, 1, 1);
};


float4 ps(float3 normal			: TEXCOORD0,
		  float3 vPosition		: TEXCOORD1,
		  float4 shadowMapCoord : TEXCOORD2) : COLOR {
	
	float3 finalColor = float3(0, 0, 0);
	
	// diffuse + ambient
	{
		float3 lightDirection = LightPosition - vPosition;
		float diffuseStrength = max(0.0f, dot(normalize(normal), normalize(lightDirection)));

		float3 diffuseAmount = lerp(DiffuseColor, LightColor, 0.5) * diffuseStrength;
		finalColor += diffuseAmount + AmbientColor;
	}
					
	// shadow
	/*{
		float4 shadowCoord = shadowMapCoord;
    	shadowCoord.z += 0.0005f;

    	if (shadowCoord.w > 0.0f) {
      		float depth = tex2Dproj(ShadowMap, shadowCoord).z;
			float shadow = depth == 0 ? 0.5f : 1.0f;
      		finalColor = finalColor * shadow;
    	}
 	}*/
	
	return float4(finalColor, 1);
}

float4x4 World;
float4x4 WorldLight;
float4x4 WorldViewProj : ModelViewProjection;
uniform float4x4 NormalMatrix;

technique dx {
	pass {
		VertexProgram = compile vs_4_0 vs(WorldViewProj, World, WorldLight);
		FragmentProgram = compile ps_4_0 ps();
	}
}