#include "utils.cg"

sampler2D ShadowMap = sampler_state {
  MinFilter = Point;
  MagFilter = Point;
  WrapS = Clamp;
  WrapT = Clamp;
};

sampler2D DepthMap = sampler_state {
  MinFilter = Point;
  MagFilter = Point;
  WrapS = Clamp;
  WrapT = Clamp;
};

uniform float2 HalfPixel;
uniform float4x4 LightViewProj;
uniform float4x4 CameraViewProjInv;

struct VOutput {
      float4 position       : POSITION;
      float4 screenPosition   : TEXCOORD0;
};

VOutput vs(float4 position : POSITION) {
    VOutput OUT;
    OUT.position = position;
    OUT.screenPosition = OUT.position;
    return OUT;
}

VOutput vsgl(float4 position : ATTR0) {
  return vs(position);
}

float4 ps(float4 screenPosition : TEXCOORD0) : COLOR {
  float3 screenPositionHom = screenPosition.xyz / screenPosition.w;
  float2 texCoord = contract(screenPositionHom) - HalfPixel;

  float depth = tex2D(DepthMap, texCoord);

  float4 positionScreen;
  positionScreen.xy = screenPositionHom.xy;
  positionScreen.z = depth; 
  positionScreen.w = 1.0f;

  float4 positionWorldRaw = mul(CameraViewProjInv, positionScreen);
  float4 positionWorld = positionWorldRaw / positionWorldRaw.w;

  //--

  float4 shadowMapCoordRaw = mul(LightViewProj, positionWorld);
  float3 shadowCoord = shadowMapCoordRaw.xyz / shadowMapCoordRaw.w;

  float2 shadowMapUV = float2(shadowCoord.x, 1.0f - shadowCoord.y);
  float shadowDepth = tex2D(ShadowMap, shadowMapUV.xy);

  return float4(shadowDepth, shadowDepth, shadowDepth, 1.0f);
} 

technique dx {
  pass {
    BlendEnable = false;
    SrcBlend = One;
    DestBlend = One;
    VertexProgram = compile vs_4_0 vs();
    FragmentProgram = compile ps_4_0 ps();
  }
}

technique latest {
  pass {
    BlendEnable = true;
    SrcBlend = One;
    DestBlend = One;
    VertexProgram = compile glslv vsgl();
    FragmentProgram = compile glslf ps();
  }
}
