#include "utils.cg"

sampler2D NormalMap = sampler_state {
	MinFilter = Point;
	MagFilter = Point;
	WrapS = Clamp;
	WrapT = Clamp;
};

uniform float4 LightDirection;
uniform float3 LightColor;

struct VOutput {
	float4 position 			: POSITION;
	float2 texCoord				: TEXCOORD0;
};

VOutput vs(float4 position 	: POSITION,
		   float4 texCoord 	: TEXCOORD0) {
    VOutput OUT;
    OUT.position = position;
    OUT.texCoord = texCoord;
    return OUT;
}

float4 ps(float2 texCoord	: TEXCOORD0) : COLOR {
  float4 normalData = tex2D(NormalMap, texCoord);
  float3 normal = normalData.xyz;

  float3 finalColor;

  // diffuse
  float4 lightVector = -LightDirection;
  float diffuseStrength = max(0.0f, dot(normalize(normal), normalize(lightVector)));
  finalColor = LightColor * diffuseStrength;

  return float4(finalColor, diffuseStrength);
}

technique dx {
  pass {    
  	BlendEnable = true;
  	SrcBlend = One;
  	DestBlend = One;
    VertexProgram = compile vs_4_0 vs();
    FragmentProgram = compile ps_4_0 ps();
  }
}
